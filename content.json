{"meta":{"title":"kylinhuang","subtitle":null,"description":null,"author":"kylinhuang","url":"http://www.kylinhuang.cn"},"pages":[{"title":"categories","date":"2017-10-09T02:28:51.000Z","updated":"2019-04-18T01:48:29.440Z","comments":true,"path":"categories/index.html","permalink":"http://www.kylinhuang.cn/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-11-09T12:10:10.000Z","updated":"2019-04-18T01:48:29.440Z","comments":true,"path":"tags/index-1.html","permalink":"http://www.kylinhuang.cn/tags/index-1.html","excerpt":"","text":""},{"title":"tags","date":"2017-11-09T12:06:40.000Z","updated":"2019-04-18T01:48:29.441Z","comments":true,"path":"tags/index.html","permalink":"http://www.kylinhuang.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"科学上网","slug":"工具/科学上网","date":"2019-04-17T14:03:10.160Z","updated":"2019-04-17T14:03:10.160Z","comments":true,"path":"2019/04/17/工具/科学上网/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/17/工具/科学上网/","excerpt":"","text":"1 下载shadowsocks官方下载地址 android 在没有翻墙情况下 可以从github中下载app shadowsocks github下载地址 IOS shadowsocks 2 配置免费提供账号免费账号 https://free-ss.tk/ 自己搭建的 服务器 账号 暂不提供","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"vpn","slug":"vpn","permalink":"http://www.kylinhuang.cn/tags/vpn/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"SeverLauncher","slug":"android/research/SeverLauncher","date":"2019-04-17T14:03:10.159Z","updated":"2019-04-17T14:03:10.159Z","comments":true,"path":"2019/04/17/android/research/SeverLauncher/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/17/android/research/SeverLauncher/","excerpt":"","text":"无意间发现 开源中国中有人回复 看见 以前的文章就想整理下 这是一份 2013年 创维 研究服务器自定义Launcher 时候调研 的 文章 一直在有道笔记 原理app 从服务器端获取 数据 通过数据 绘制控件 大小 以及位置 和点 击 跳转 服务器 与 客户端 统一一套协议 例子 左上角 logo &quot;logo&quot;: { &quot;background_url&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=logo%20png&amp;ie=utf-8&amp;fr=result&amp;url=http%3A%2F%2Fimg.article.pchome.net%2F00%2F37%2F47%2F30%2Fpic_lib%2Fs960x639%2F0e80039f04ea6106487069a0ffc82a8es960x639.JPG&quot;, &quot;hasFocus&quot;: false, &quot;height&quot;: 50, &quot;width&quot;: 50, &quot;x&quot;: 50, &quot;y&quot;: 30 }, 注释background_url 为空 加载 apk默认的logo 右上角 网络状态 &quot;network&quot;: { &quot;hasFocus&quot;: false, &quot;height&quot;: 0, &quot;width&quot;: 0, &quot;x&quot;: 1100, &quot;y&quot;: 40 }, 右上角 时间 &quot;timeEntity&quot;: { &quot;textSize&quot;: 16, &quot;timeType&quot;: 12, &quot;hasFocus&quot;: false, &quot;height&quot;: 0, &quot;width&quot;: 0, &quot;x&quot;: 1150, &quot;y&quot;: 40 } Title &quot;arrayTitle&quot;: [ { &quot;text&quot;: &quot;电视&quot;, &quot;position&quot;: 1, &quot;textSize&quot;: 25, &quot;hasFocus&quot;: false, &quot;height&quot;: 50, &quot;width&quot;: 100, &quot;x&quot;: 350, &quot;y&quot;: 650 }, { &quot;text&quot;: &quot;设置&quot;, &quot;position&quot;: 2, &quot;textSize&quot;: 25, &quot;hasFocus&quot;: false, &quot;height&quot;: 50, &quot;width&quot;: 100, &quot;x&quot;: 500, &quot;y&quot;: 650 }, { &quot;text&quot;: &quot;新闻&quot;, &quot;position&quot;: 3, &quot;textSize&quot;: 25, &quot;hasFocus&quot;: false, &quot;height&quot;: 50, &quot;width&quot;: 100, &quot;x&quot;: 650, &quot;y&quot;: 650 }, { &quot;text&quot;: &quot;用户&quot;, &quot;position&quot;: 4, &quot;textSize&quot;: 25, &quot;hasFocus&quot;: false, &quot;height&quot;: 50, &quot;width&quot;: 100, &quot;x&quot;: 800, &quot;y&quot;: 650 } ], 中间tab &quot;arrTab&quot;: [ [{ &quot;name&quot;: &quot;电视&quot;, &quot;image_icon&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=icon png&amp;ie=utf-8&amp;fr=result&amp;url=http:// www.icosky.com/icon/png/System/Candied Apples/Candy Apple Red 2.png&quot;, &quot;action&quot;: &quot;com.kylin.action&quot;, &quot;image_content&quot;: &quot;&quot;, &quot;id&quot;: 11, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: 12, &quot;NextFocusLeftId&quot;: -1, &quot;NextFocusDownId&quot;: 15, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 250, &quot;width&quot;: 250, &quot;x&quot;: 50, &quot;y&quot;: 20 }, { &quot;name&quot;: &quot;TV&quot;, &quot;image_icon&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=icon png&amp;ie=utf-8&amp;fr=result&amp;url=http:// www.sucaitianxia.com/png/UploadFiles_6130/200807/20080702002356141.png&quot;, &quot;action&quot;: &quot;com.kylin.action&quot;, &quot;image_content&quot;: &quot;&quot;, &quot;id&quot;: 12, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: 13, &quot;NextFocusLeftId&quot;: 11, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 250, &quot;width&quot;: 250, &quot;x&quot;: 300, &quot;y&quot;: 20 }, { &quot;name&quot;: &quot;歌华有线&quot;, &quot;image_icon&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=png å°å¾&amp;ie=utf-8&amp;fr=result&amp;url=http://img.sj33.cn/uploads/allimg/201009/20100918144426835.png&quot;, &quot;action&quot;: &quot;com.kylin.action&quot;, &quot;image_content&quot;: &quot;&quot;, &quot;id&quot;: 13, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: 14, &quot;NextFocusLeftId&quot;: 12, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 250, &quot;width&quot;: 250, &quot;x&quot;: 550, &quot;y&quot;: 20 }, { &quot;name&quot;: &quot;百事通&quot;, &quot;image_icon&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=png å°å¾&amp;ie=utf-8&amp;fr=result&amp;url=http://p1.qqyou.com/pic/uploadpic/2011-4/201143921218128.png&quot;, &quot;action&quot;: &quot;com.kylin.action&quot;, &quot;image_content&quot;: &quot;&quot;, &quot;id&quot;: 14, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: -1, &quot;NextFocusLeftId&quot;: 13, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 250, &quot;width&quot;: 250, &quot;x&quot;: 800, &quot;y&quot;: 20 }, { &quot;name&quot;: &quot;回看&quot;, &quot;image_icon&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=icon png&amp;ie=utf-8&amp;fr=result&amp;url=http:// www.icosky.com/icon/png/System/Candied Apples/Candy Apple Red 2.png&quot;, &quot;action&quot;: &quot;com.kylin.action&quot;, &quot;image_content&quot;: &quot;&quot;, &quot;id&quot;: 15, &quot;NextFocusUpId&quot;: 11, &quot;NextFocusRightId&quot;: -1, &quot;NextFocusLeftId&quot;: -1, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 250, &quot;width&quot;: 250, &quot;x&quot;: 50, &quot;y&quot;: 250 } ], [{ &quot;name&quot;: &quot;设置&quot;, &quot;image_icon&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=icon png&amp;ie=utf-8&amp;fr=result&amp;url=http:// www.icosky.com/icon/png/System/Candied Apples/Candy Apple Red 2.png&quot;, &quot;image_content&quot;: &quot;&quot;, &quot;id&quot;: 50, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: 51, &quot;NextFocusLeftId&quot;: -1, &quot;NextFocusDownId&quot;: 52, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 250, &quot;width&quot;: 250, &quot;x&quot;: 50, &quot;y&quot;: 20 }, { &quot;name&quot;: &quot;TV&quot;, &quot;image_icon&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=icon png&amp;ie=utf-8&amp;fr=result&amp;url=http:// www.icosky.com/icon/png/System/Candied Apples/Candy Apple Red 2.png&quot;, &quot;image_content&quot;: &quot;&quot;, &quot;id&quot;: 51, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: -1, &quot;NextFocusLeftId&quot;: 50, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 250, &quot;width&quot;: 850, &quot;x&quot;: 350, &quot;y&quot;: 20 }, { &quot;name&quot;: &quot;回看&quot;, &quot;image_icon&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=icon png&amp;ie=utf-8&amp;fr=result&amp;url=http:// www.icosky.com/icon/png/System/Candied Apples/Candy Apple Red 2.png&quot;, &quot;image_content&quot;: &quot;&quot;, &quot;id&quot;: 52, &quot;NextFocusUpId&quot;: 50, &quot;NextFocusRightId&quot;: 51, &quot;NextFocusLeftId&quot;: -1, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 250, &quot;width&quot;: 250, &quot;x&quot;: 50, &quot;y&quot;: 250 }, { &quot;image_content&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=å¹¿å&amp;ie=utf-8&amp;fr=result&amp;url=http://pic17.nipic.com/20111030/178350_181133315001_2.jpg&quot;, &quot;id&quot;: 53, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: -1, &quot;NextFocusLeftId&quot;: -1, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 0, &quot;hasFocus&quot;: false, &quot;height&quot;: 250, &quot;width&quot;: 600, &quot;x&quot;: 300, &quot;y&quot;: 250 } ], [{ &quot; nameBg&quot;: &quot;#CC000000&quot;, //-------------------文字背景色 &quot;name&quot;: &quot;匆匆那些年&quot;, &quot;image_content&quot;: &quot; http://f.hiphotos.baidu.com/baike/c0=baike116,5,5,116,38/sign=82e87630262dd42a4b0409f9625230d0/96dda144ad345982e775c6cb0ff431adcaef84ef.jpg&quot;, &quot;id&quot;: 50, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: 51, &quot;NextFocusLeftId&quot;: -1, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 550, &quot;width&quot;: 750, &quot;x&quot;: 20, &quot;y&quot;: 20 }, { &quot;nameBg&quot;: &quot;#CC000000&quot;, &quot;name&quot;: &quot;重返地球&quot;, &quot;image_content&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=çµå½±æµ·æ¥å¾&amp;ie=utf-8&amp;fr=result&amp;url=http://down1.sucaitianxia.com/psd02/psd179/psds36925.jpg&quot;, &quot;id&quot;: 51, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: 52, &quot;NextFocusLeftId&quot;: 50, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 550, &quot;width&quot;: 300, &quot;x&quot;: 730, &quot;y&quot;: 20 }, { &quot;nameBg&quot;: &quot;#CC000000&quot;, &quot;name&quot;: &quot;银河护卫队&quot;, &quot;image_content&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=çµå½±&amp;ie=utf-8&amp;fr=result&amp;url=http:// www.ln.chinanews.com/UploadFiles/2014/8/201408051648340612.jpg&quot;, &quot;id&quot;: 52, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: -1, &quot;NextFocusLeftId&quot;: 51, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 550, &quot;width&quot;: 250, &quot;x&quot;: 1000, &quot;y&quot;: 20 } ], [{ &quot;nameColor&quot;: &quot;#000080&quot;, &quot;nameBg&quot;: &quot;#CC000000&quot;, &quot;name&quot;: &quot;魁拔&quot;, &quot;image_content&quot;: &quot; http://e.hiphotos.baidu.com/baike/c0=baike272,5,5,272,90/sign=e0e4cc8f39292df583cea447dd583705/838ba61ea8d3fd1f353eab9a334e251f95ca5f5e.jpg&quot;, &quot;id&quot;: 50, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: 51, &quot;NextFocusLeftId&quot;: -1, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 550, &quot;width&quot;: 250, &quot;x&quot;: 30, &quot;y&quot;: 20 }, { &quot;nameColor&quot;: &quot;#000080&quot;, &quot;nameBg&quot;: &quot;#33FF0000&quot;, &quot;name&quot;: &quot;天降雄狮&quot;, &quot;image_content&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=å¤©ééç®&amp;ie=utf-8&amp;fr=result&amp;url=http://f.hiphotos.baidu.com/zhidao/pic/item/dcc451da81cb39dbfb89d81ed3160924ab183028.jpg&quot;, &quot;id&quot;: 51, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: 52, &quot;NextFocusLeftId&quot;: 50, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 550, &quot;width&quot;: 300, &quot;x&quot;: 250, &quot;y&quot;: 20 }, { &quot;nameBg&quot;: &quot;#33000000&quot;, &quot;name&quot;: &quot;中国合伙人&quot;, &quot;image_content&quot;: &quot; http://image.baidu.com/i?tn=download&amp;ipn=dwnl&amp;word=ä¸­å½åä¼äºº&amp;ie=utf-8&amp;fr=result&amp;url=http:// www.lizhi123.net/uploads/allimg/130525/4_130525175139_1.png&quot;, &quot;id&quot;: 52, &quot;NextFocusUpId&quot;: -1, &quot;NextFocusRightId&quot;: -1, &quot;NextFocusLeftId&quot;: 51, &quot;NextFocusDownId&quot;: -1, &quot;nameSize&quot;: 25, &quot;hasFocus&quot;: true, &quot;height&quot;: 550, &quot;width&quot;: 800, &quot;x&quot;: 520, &quot;y&quot;: 20 } ] ] “nameColor”: “#000080”, ——文字的颜色“nameBg”: “#CC000000”, —— 文字背景颜色“name”: “魁拔”,“image_content”: “ http://e.hiphotos.baidu.com/baike/c0 %3Dbaike272%2C5%2C5%2C272%2C90/sign=e0e4cc8f39292df583cea447dd583705/838ba61ea8d3fd1f353eab9a334e251f95ca5f5e.jpg”,“id”: 50,“NextFocusUpId”: -1,“NextFocusRightId”: 51,“NextFocusLeftId”: -1,“NextFocusDownId”: -1,“nameSize”: 25,“hasFocus”: true,“height”: 550,“width”: 250,“x”: 30,“y”: 20 “nameColor”: “#000080”, ——文字的颜色“nameBg”: “#CC000000”, —— 文字背景颜色image_content —– 底图url“nameSize”: 25, —-文字大小 image_icon —– icon url &quot;id&quot;: 50, //----每个view对于的id &quot;NextFocusUpId&quot;: -1, //---- 当前view 向上 view的id &quot;NextFocusRightId&quot;: 51, //---- 当前view 向右 view的id &quot;NextFocusLeftId&quot;: -1, //---- 当前view 向左 view的id &quot;NextFocusDownId&quot;: -1, //---- 当前view 向下 view的id 这几个控制 TV 的焦点跳转 -1 不能跳转NextFocusRightId 当焦点位于该控件 点击 右 焦点 跳转到 id为51 的控件上 android 源码 找不到了当年放在 taobaosvn上http://code.taobao.org/","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"research","slug":"research","permalink":"http://www.kylinhuang.cn/tags/research/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android 8.0变更","slug":"android/base/android 8.0变更","date":"2019-04-17T14:03:10.158Z","updated":"2019-04-17T14:03:10.159Z","comments":true,"path":"2019/04/17/android/base/android 8.0变更/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/17/android/base/android 8.0变更/","excerpt":"","text":"参考 1 Downloadable Fonts您可以使用可下载字体功能在以下几个方面： 使用Android Studio和谷歌播放服务 编程 通过支持库 2 Fonts in XMLWebView控件功能强大，除了具有一般View的属性和设置外，还可以对url请求、页面加载、渲染、页面交互进行强大的处理。 3 使用介绍 Webview自身的常见方法； Webview的最常用的子类 （WebSettings类、WebViewClient类、WebChromeClient类) Android和Js的交互 3.1 Webview自身的常见方法 3.1.1 WebView的状态 1234567891011121314151617181920//激活WebView为活跃状态，能正常执行网页的响应webView.onResume() ；//当页面被失去焦点被切换到后台不可见状态，需要执行onPause//通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。webView.onPause()；//当应用程序(存在webview)被切换到后台时，这个方法不仅仅针对当前的webview而是全局的全应用程序的webview//它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。webView.pauseTimers()//恢复pauseTimers状态webView.resumeTimers()；//销毁Webview//在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview//但是注意：webview调用destory时,webview仍绑定在Activity上//这是由于自定义webview构建时传入了该Activity的context对象//因此需要先从父容器中移除webview,然后再销毁webview:rootLayout.removeView(webView); webView.destroy(); 3.1.2 关于前进 / 后退网页 12345678910111213//是否可以后退Webview.canGoBack() //后退网页Webview.goBack()//是否可以前进 Webview.canGoForward()//前进网页Webview.goForward()//以当前的index为起始点前进或者后退到历史记录中指定的steps//如果steps为负数则为后退，正数则为前进Webview.goBackOrForward(intsteps) 运用 activity back 12345678910111213141516171819@Overridepublic boolean onKeyDown(int keyCode, KeyEvent event) &#123; if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123; setWebViewGoBack(); return true; &#125; return false;&#125;/** * 设置webView 后退 */private void setWebViewGoBack() &#123; if (mWebview.canGoBack()) &#123; mWebview.goBack(); &#125; else &#123; finish(); &#125;&#125; 3.1.3 清除缓存数据 12345678910//清除网页访问留下的缓存//由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.Webview.clearCache(true);//清除当前webview访问的历史记录//只会webview访问历史记录里的所有记录除了当前访问记录Webview.clearHistory()；//这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据Webview.clearFormData()； 3.2 常用类 3.2.1 WebSettings类 配置步骤1：添加访问网络权限（AndroidManifest.xml）1&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt; 配置步骤2：生成一个WebView组件（有两种方式）12345//方式1：直接在在Activity中生成WebView webView = new WebView(this)//方法2：在Activity的layout文件里添加webview控件：WebView webview = (WebView) findViewById(R.id.webView1); 配置步骤3：进行配置-利用WebSettings子类（常见方法） 123456789101112131415161718192021222324//声明WebSettings子类WebSettings webSettings = webView.getSettings();//如果访问的页面中要与Javascript交互，则webview必须设置支持JavascriptwebSettings.setJavaScriptEnabled(true); //支持插件webSettings.setPluginsEnabled(true); //设置自适应屏幕，两者合用webSettings.setUseWideViewPort(true); //将图片调整到适合webview的大小 webSettings.setLoadWithOverviewMode(true); // 缩放至屏幕的大小//缩放操作webSettings.setSupportZoom(true); //支持缩放，默认为true。是下面那个的前提。webSettings.setBuiltInZoomControls(true); //设置内置的缩放控件。若为false，则该WebView不可缩放webSettings.setDisplayZoomControls(false); //隐藏原生的缩放控件//其他细节操作webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 webSettings.setAllowFileAccess(true); //设置可以访问文件 webSettings.setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 webSettings.setLoadsImagesAutomatically(true); //支持自动加载图片webSettings.setDefaultTextEncodingName(\"utf-8\");//设置编码格式 常见用法：设置WebView缓存 当加载 html 页面时，WebView会在/data/data/包名目录下生成 database 与 cache 两个文件夹 请求的 URL记录保存在 WebViewCache.db，而 URL的内容是保存在 WebViewCache 文件夹下 是否启用缓存 12345678910//优先使用缓存: WebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //缓存模式如下： //LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据 //LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。 //LOAD_NO_CACHE: 不使用缓存，只从网络获取数据. //LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。//不使用缓存: WebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE); 结合使用（离线加载) 1234567891011121314if (NetStatusUtil.isConnected(getApplicationContext())) &#123; webSettings.setCacheMode(WebSettings.LOAD_DEFAULT); //根据cache-control决定是否从网络上取数据。&#125; else &#123; webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //没网，则从本地获取，即离线加载&#125;webSettings.setDomStorageEnabled(true); // 开启 DOM storage API 功能webSettings.setDatabaseEnabled(true); //开启 database storage API 功能webSettings.setAppCacheEnabled(true);//开启 Application Caches 功能String cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;webSettings.setAppCachePath(cacheDirPath); //设置 Application Caches 缓存目录 注意： 每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize() 3.2.2 WebViewClient类 作用：处理各种通知 &amp; 请求事件 常见方法： 常见方法1：shouldOverrideUrlLoading() 作用：打开网页时不调用系统浏览器， 而是在本WebView中显示；在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。123456789101112131415161718192021//步骤1. 定义Webview组件Webview webview = (WebView) findViewById(R.id.webView1);//步骤2. 选择加载方式 //方式1. 加载一个网页： webView.loadUrl(\"http://www.google.com/\"); //方式2：加载apk包中的html页面 webView.loadUrl(\"file:///android_asset/test.html\"); //方式3：加载手机本地的html页面 webView.loadUrl(\"content://com.android.htmlfileprovider/sdcard/test.html\");//步骤3. 复写shouldOverrideUrlLoading()方法，使得打开网页时不调用系统浏览器， 而是在本WebView中显示 webView.setWebViewClient(new WebViewClient()&#123; @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; view.loadUrl(url); return true; &#125; &#125;); 常见方法2：onPageStarted() 作用：开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。123456webView.setWebViewClient(new WebViewClient()&#123; @Override public void onPageStarted(WebView view, String url, Bitmap favicon) &#123; //设定加载开始的操作 &#125; &#125;); 常见方法3：onPageFinished() 作用：在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。123456789 /** * 在页面加载结束时调用。 */@Overridepublic void onPageFinished(WebView view, String url) &#123; //设定加载结束的操作 mProgressBar.setVisibility(View.GONE);&#125; 常见方法4：onLoadResource() 作用：在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。123456 webView.setWebViewClient(new WebViewClient()&#123; @Override public boolean onLoadResource(WebView view, String url) &#123; //设定加载资源的操作 &#125;&#125;); 常见方法5：onReceivedError（） 作用：加载页面的服务器出现错误时（如404）调用。 App里面使用webview控件的时候遇到了诸如404这类的错误的时候，若也显示浏览器里面的那种错误提示页面就显得很丑陋了，那么这个时候我们的app就需要加载一个本地的错误提示页面，即webview如何加载一个本地的页面 12345678910111213141516//步骤1：写一个html文件（error_handle.html），用于出错时展示给用户看的提示页面//步骤2：将该html文件放置到代码根目录的assets文件夹下//步骤3：复写WebViewClient的onRecievedError方法//该方法传回了错误码，根据错误类型可以进行不同的错误分类处理 webView.setWebViewClient(new WebViewClient()&#123; @Override public void onReceivedError(WebView view, int errorCode, String description, String failingUrl)&#123;switch(errorCode) &#123; case HttpStatus.SC_NOT_FOUND: view.loadUrl(\"file:///android_assets/error_handle.html\"); break; &#125; &#125; &#125;); 常见方法6：onReceivedSslError() 作用：处理https请求webView默认是不处理https请求的，页面显示空白，需要进行如下设置：12345678webView.setWebViewClient(new WebViewClient() &#123; @Override public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) &#123; handler.proceed(); //表示等待证书响应 // handler.cancel(); //表示挂起连接，为默认方式 // handler.handleMessage(null); //可做其他处理 &#125; &#125;); 3.2.3 WebChromeClient类 作用：辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等。常见使用： 常见方法1： onProgressChanged（） 作用：获得网页的加载进度并显示 12345678910webview.setWebChromeClient(new WebChromeClient()&#123; @Override public void onProgressChanged(WebView view, int newProgress) &#123; if (newProgress &lt; 100) &#123; String progress = newProgress + \"%\"; progress.setText(progress); &#125; else &#123; &#125; &#125;&#125;); 常见方法2： onReceivedTitle（） 作用：获取Web页中的标题 1234567webview.setWebChromeClient(new WebChromeClient()&#123; @Override public void onReceivedTitle(WebView view, String title) &#123; titleview.setText(title)； &#125;&#125;); 3.3 WebView与JS的交互参考 3.4 注意事项：如何避免WebView内存泄露？ 3.4.1 不在xml中定义 Webview ，而是在需要的时候在Activity中创建，并且Context使用 getApplicationgContext() 1234LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);mWebView = new WebView(getApplicationContext());mWebView.setLayoutParams(params);mLayout.addView(mWebView); 3.4.2 在 Activity 销毁（ WebView ）的时候，先让 WebView 加载null内容，然后移除 WebView，再销毁 WebView，最后置空。 123456789101112@Overrideprotected void onDestroy() &#123; if (mWebView != null) &#123; mWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null); mWebView.clearHistory(); ((ViewGroup) mWebView.getParent()).removeView(mWebView); mWebView.destroy(); mWebView = null; &#125; super.onDestroy();&#125; 参考","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android 8.0","slug":"android-8-0","permalink":"http://www.kylinhuang.cn/tags/android-8-0/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"工作任务","slug":"Work/工作任务","date":"2019-04-17T14:03:10.158Z","updated":"2019-04-18T06:05:20.593Z","comments":true,"path":"2019/04/17/Work/工作任务/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/17/Work/工作任务/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! 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","categories":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/categories/Work/"}],"tags":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/tags/Work/"}],"keywords":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/categories/Work/"}]},{"title":"LifeHome 推送","slug":"Work/LifeHome推动","date":"2019-04-17T14:03:10.157Z","updated":"2019-04-18T06:10:08.670Z","comments":true,"path":"2019/04/17/Work/LifeHome推动/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/17/Work/LifeHome推动/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/categories/Work/"}],"tags":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/tags/Work/"}],"keywords":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/categories/Work/"}]},{"title":"教育 - 03","slug":"Share/ed_03","date":"2019-04-17T14:03:10.157Z","updated":"2019-04-18T06:10:29.456Z","comments":true,"path":"2019/04/17/Share/ed_03/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/17/Share/ed_03/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}],"tags":[{"name":"教育","slug":"教育","permalink":"http://www.kylinhuang.cn/tags/教育/"}],"keywords":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}]},{"title":"教育 - 02","slug":"Share/ed_02","date":"2019-04-17T14:03:10.156Z","updated":"2019-04-18T06:10:27.427Z","comments":true,"path":"2019/04/17/Share/ed_02/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/17/Share/ed_02/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}],"tags":[{"name":"教育","slug":"教育","permalink":"http://www.kylinhuang.cn/tags/教育/"}],"keywords":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}]},{"title":"教育 - 01","slug":"Share/ed_01","date":"2019-04-17T14:03:10.155Z","updated":"2019-04-18T06:10:24.265Z","comments":true,"path":"2019/04/17/Share/ed_01/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/17/Share/ed_01/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}],"tags":[{"name":"教育","slug":"教育","permalink":"http://www.kylinhuang.cn/tags/教育/"}],"keywords":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}]},{"title":"安全","slug":"android/pay/安全","date":"2019-04-15T06:56:30.023Z","updated":"2019-04-18T06:58:28.146Z","comments":true,"path":"2019/04/15/android/pay/安全/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/15/android/pay/安全/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! 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","categories":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}],"tags":[{"name":"安全","slug":"安全","permalink":"http://www.kylinhuang.cn/tags/安全/"}],"keywords":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}]},{"title":"Lycamobile","slug":"android/pay/lycamobile","date":"2019-04-15T03:19:52.979Z","updated":"2019-04-18T06:17:17.198Z","comments":true,"path":"2019/04/15/android/pay/lycamobile/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/15/android/pay/lycamobile/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! U2FsdGVkX19PJ+r1j+4ntH524M2JVMxGSIYk/q3+z9HB/XjRW08+uo7YYmCss5qnRpPGcJYSk6XYYoRkMUPo1zYrU3W2Qd/YpT0w06md/7nUYe69lJ0JL9F8Vke8g4GGVrja9ghP4L1bRCBeMZu4m2dUmWLgzXKUJ49nja5QgVpu+WWhgorJGDa4JU3sMwMhfCaEflvuxIjwuYIGeNqQEYVgtsWo/wsrRXJXiO/o1ITAwcYGMnCaoNDeI7nV9Wx8s+uHs+gzi/xPqvFjJiix3En02wa34Lh+GiVQqeE8yqUh4KyGYUxq3v9xSh2eFU40w2A+mRMY69/VW3jsGz/EQsVAurhiNqEuthm5Khn6oYeC4sn8eZ0jyB9G6faAtFt7/93vHsF5iwbm93vdXOdvD/QpZLySl0VrN5Gy9wkMiQsnv8jLEmmDQfrCuaqZXgPQ/4LkMxZTa8AzCxXjT98AeC7LntJZXItuHhJx1qkCvv3eX5ZNOBmXyqP7ZFxSd4PEMvWcZH0wpTU0rh1n5ai4m0vC0h8jNp4155aglHg8FNVFmWPD9t6672IKDBzRCYeS4wIuwNN7PPbktqbGamRDdse+yjc+lZx2X4vHvqSnWMr3uWQTalPYLcCnYNM1k4XFVpDqUXf2Fsj9TIR5cAl4wbrZhcIlbBeAMxN5hjjzBq8NeeU+5qRvv2VUtADSD+OS3e4mpWJCVKwKZ4J5pD95ClYt7V/qATCD45jKyEcn5noOgkrSNHe3YxTBUmpQRpXSiRV9F4omWarTTTfOqthIBetp57wlsdogqjNZ1BTTtRxaNg5iJHSgjlX6oKApjE8VtuL2PHp2X+zz8MIKDbJCP/hGRJptbiCwaza5+xFE/F06gu5wfd9/6V1vJnm6DawvSLLzHOG0S5GZTmc3b6W/MTdV0sx3kbQFNGgdiSn6Ji6c5eX1LfR+/bzEGyHYXqUVxfsPRBYK03+Uf44WTXPRrrwrd/aEaxXEqeWCeSQn7Gbk6njVTYU7g87Ir+e2wj+lAjZ2WZ+sbaotIvA4OGcAQEUXWxXijYxDb48m3iSqQNm1pY7CyfKFIyWaAUDeKxf30elpJiWPus6IL5nsa7c19yrK0uNjOwjFOP1zPiTMiUg7tX+94Ozso68CIDNnVoRjOQGsw56qVQ6OEaFUKkTcTmeVu0PcKqkCh9lSfFUEkmXz1s8/s0fW5xpXaNeG+2dNgQnUH+QfGHMAClk9E2SlD5GOlNh4h9vbIfaHIKGesuIWBcvorPCZz39zippfpZXcKcYo7XRy7fBGiuVj/HFfLWP7+MGqptc4HXhiAgkzuHRStngaQRPVBtd6JVtO8RmQMmoggxND/Tq4XJVPZ/JUhOdC7sB3n9/7Ew5aY8ZdGvs4fyHCLIEXEVVU728leTn8","categories":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}],"tags":[{"name":"phone number","slug":"phone-number","permalink":"http://www.kylinhuang.cn/tags/phone-number/"}],"keywords":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}]},{"title":"android 项目编译过程","slug":"android/research/Android 项目编译过程","date":"2019-04-01T06:23:40.168Z","updated":"2019-04-01T06:48:43.254Z","comments":true,"path":"2019/04/01/android/research/Android 项目编译过程/","link":"","permalink":"http://www.kylinhuang.cn/2019/04/01/android/research/Android 项目编译过程/","excerpt":"","text":"工具介绍 工具 功能介绍 SDK的路径 aapt Android资源打包工具 ${ANDROID_SDK_HOME}/platform-tools/appt aidl Android接口描述语言转化为.java文件的工具 ${ANDROID_SDK_HOME}/platform-tools/aidl javac Java Compiler ${JDK_HOME}/javac或/usr/bin/javac dex 转化.class文件为Davik VM能识别的.dex文件 ${ANDROID_SDK_HOME}/platform-tools/dx apkbuilder 生成apk包 ${ANDROID_SDK_HOME}/tools/opkbuilder jarsigner .jar文件的签名工具 ${JDK_HOME}/jarsigner或/usr/bin/jarsigner zipalign 字节码对齐工具 ${ANDROID_SDK_HOME}/tools/zipalign 编译过程第一步：打包资源文件，生成R.java文件输入Resource文件（就是工程中res中的文件）、Assets文件（相当于另外一种资源，这种资源Android系统并不像对res中的文件那样优化它）、AndroidManifest.xml文件（包名就是从这里读取的，因为生成R.java文件需要包名）、Android基础类库（Android.jar文件） 输出打包好的资源（一般在Android工程的bin目录可以看到一个叫resources.ap_的文件就是它了）、R.java文件（在gen目录中，大家应该很熟悉了） 工具aapt工具，它的路径在${ANDROID_SDK_HOME}/platform-tools/aapt（如果你使用的是Windows系统，按惯例路径应该这样写：%ANDROID_SDK_HOME%\\platform-tools\\aapt.exe，下同）。 第二步：处理AIDL文件，生成对应的.java文件（当然，有很多工程没有用到AIDL，那这个过程就可以省了） 输入源码文件、aidl文件、framework.aidl文件 输出对应的.java文件 工具aidl工具 第三步：编译Java文件，生成对应的.class文件输入源码文件（包括R.java和AIDL生成的.java文件）、库文件（.jar文件） 输出.class文件 工具javac工具 第四步：把.class文件转化成Davik VM支持的.dex文件输入.class文件（包括Aidl生成.class文件，R生成的.class文件，源文件生成的.class文件），库文件（.jar文件） 输出.dex文件 工具dex工具 第五步：打包生成未签名的.apk文件输入打包后的资源文件、打包后类文件（.dex文件）、libs文件（包括.so文件，当然很多工程都没有这样的文件，如果你不使用C/C++开发的话） 输出未签名的.apk文件 工具apkbuilder工具 第六步：对未签名.apk文件进行签名输入未签名的.apk文件 输出签名的.apk文件 工具jarsigner 第七步：对签名后的.apk文件进行对齐处理（不进行对齐处理是不能发布到Google Market的） 输入签名后的.apk文件 输出对齐后的.apk文件 工具zipalign工具","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"research","slug":"research","permalink":"http://www.kylinhuang.cn/tags/research/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"XPosed调试","slug":"android/Xposed/XPosed调试","date":"2019-03-28T13:32:35.691Z","updated":"2019-04-17T02:25:23.320Z","comments":true,"path":"2019/03/28/android/Xposed/XPosed调试/","link":"","permalink":"http://www.kylinhuang.cn/2019/03/28/android/Xposed/XPosed调试/","excerpt":"","text":"TopActivity.apk安装这个工具可以直接查看当前 App 显示的最前 Activity，后面我们接触别人写的项目，这个工具可以很方便跟踪代码的入口，项目原理是通过 AccessibilityService 服务，监听所有的界面变化，读取当前界面 Activity，需要给软件开启【辅助权限】。 项目地址：https://github.com/109021017/android-TopActivity 当然也可以通过 Adb 命令，获取 Dumpsys 当前 Activity 的信息： adb shell dumpsys activity top BDOpener——开启APK调试与备份选项的Xposed模块https://github.com/riusksk/BDOpener 这是 Xposed 的插件模块，也就是说需要刷入 Xposed 框架后，才能使用该，通过安装这个软件，我们可以使手机安装的软件，变为可调试状态，这样就可以通过 Android Studio 的 Monitor 工具，查看所有的进程状态，并 dumpsys 方法调用信息。 Android\\Sdk\\tools\\monitor.bat 目录下找到 调试 方法123456789public class TargetHook implements IXposedHookLoadPackage &#123; @Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable &#123; //通过目标包名过滤 if (lpparam.packageName.equals(&quot;com.xxx.xxx&quot;)) &#123; XposedBridge.log(&quot;启动了xxx软件&quot;); &#125; &#125;&#125; 还是不行 https://blog.csdn.net/qq_30496695/article/details/80425676 Xposed 免重启调试123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102Xposed插件每次代码改动，都需要重启手机才能生效，有时候重启一次还不生效（我的手机有一次重启 3 次，才看到生效，还好是公司测试机，不心疼），所以代码最好写上相关 Log 信息，来看代码生效没。XposedBridge.log(&quot;启动了xxx软件&quot;);不过这里分享一个免重启调试的方法，方法来自网上，感谢 DX ：/** * @author DX * 这种方案建议只在开发调试的时候使用，因为这将损耗一些性能(需要额外加载apk文件)，调试没问题后，直接修改xposed_init文件为正确的类即可 * 可以实现免重启，由于存在缓存，需要杀死宿主程序以后才能生效 * 这种免重启的方式针对某些特殊情况的hook无效 * 例如我们需要implements IXposedHookZygoteInit,并将自己的一个服务注册为系统服务，这种就必须重启了 * Created by DX on 2017/10/4. */ public class HookLoader2 implements IXposedHookLoadPackage &#123; //按照实际使用情况修改下面几项的值 /** * 当前Xposed模块的包名,方便寻找apk文件 */ private final String modulePackage = &quot;com.xxx.plugin&quot;; /** * 宿主程序的包名(允许多个),过滤无意义的包名,防止无意义的apk文件加载 */ private static List&lt;String&gt; hostAppPackages = new ArrayList&lt;&gt;(); static &#123; // TODO: Add the package name of application your want to hook! hostAppPackages.add(&quot;com.eg.android.AlipayGphone&quot;); hostAppPackages.add(&quot;com.xxx.plugin&quot;); &#125; /** * 实际hook逻辑处理类 */ private final String handleHookClass = TargetHook.class.getName(); /** * 实际hook逻辑处理类的入口方法 */ private final String handleHookMethod = &quot;handleLoadPackage&quot;; @Override public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123; if (hostAppPackages.contains(loadPackageParam.packageName)) &#123; //将loadPackageParam的classloader替换为宿主程序Application的classloader,解决宿主程序存在多个.dex文件时,有时候ClassNotFound的问题 XposedHelpers.findAndHookMethod(Application.class, &quot;attach&quot;, Context.class, new XC_MethodHook() &#123; @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123; Context context=(Context) param.args[0]; loadPackageParam.classLoader = context.getClassLoader(); invokeHandleHookMethod(context,modulePackage, handleHookClass, handleHookMethod, loadPackageParam); &#125; &#125;); &#125; &#125; /** * 安装app以后，系统会在/data/app/下备份了一份.apk文件，通过动态加载这个apk文件，调用相应的方法 * 这样就可以实现，只需要第一次重启，以后修改hook代码就不用重启了 * @param context context参数 * @param modulePackageName 当前模块的packageName * @param handleHookClass 指定由哪一个类处理相关的hook逻辑 * @param loadPackageParam 传入XC_LoadPackage.LoadPackageParam参数 * @throws Throwable 抛出各种异常,包括具体hook逻辑的异常,寻找apk文件异常,反射加载Class异常等 */ private void invokeHandleHookMethod(Context context, String modulePackageName, String handleHookClass, String handleHookMethod, XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123; File apkFile=findApkFile(context,modulePackageName); if (apkFile==null)&#123; throw new RuntimeException(&quot;寻找模块apk失败&quot;); &#125; //加载指定的hook逻辑处理类，并调用它的handleHook方法 PathClassLoader pathClassLoader = new PathClassLoader(apkFile.getAbsolutePath(), ClassLoader.getSystemClassLoader()); Class&lt;?&gt; cls = Class.forName(handleHookClass, true, pathClassLoader); Object instance = cls.newInstance(); Method method = cls.getDeclaredMethod(handleHookMethod, XC_LoadPackage.LoadPackageParam.class); method.invoke(instance, loadPackageParam); &#125; /** * 根据包名构建目标Context,并调用getPackageCodePath()来定位apk * @param context context参数 * @param modulePackageName 当前模块包名 * @return return apk file */ private File findApkFile(Context context, String modulePackageName)&#123; if (context==null)&#123; return null; &#125; try &#123; Context moudleContext = context.createPackageContext(modulePackageName, Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY); String apkPath=moudleContext.getPackageCodePath(); return new File(apkPath); &#125; catch (PackageManager.NameNotFoundException e) &#123; e.printStackTrace(); &#125; return null; &#125;&#125;","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"research","slug":"research","permalink":"http://www.kylinhuang.cn/tags/research/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"避免过多if-else的几种方法","slug":"android/problem/避免过多if-else的几种方法","date":"2019-03-28T12:24:57.953Z","updated":"2019-03-28T13:14:04.246Z","comments":true,"path":"2019/03/28/android/problem/避免过多if-else的几种方法/","link":"","permalink":"http://www.kylinhuang.cn/2019/03/28/android/problem/避免过多if-else的几种方法/","excerpt":"","text":"避免过多if-else的几种方法1234567891011121314String input = &quot;three&quot;;@Testpublic void testElse() &#123; if (&quot;one&quot;.equals(input)) &#123; System.out.println(&quot;one&quot;); &#125; else if (&quot;two&quot;.equals(input)) &#123; System.out.println(&quot;two&quot;); &#125; else if (&quot;three&quot;.equals(input)) &#123; System.out.println(&quot;three&quot;); &#125; else if (&quot;four&quot;.equals(input)) &#123; System.out.println(&quot;four&quot;); &#125;&#125; 代码中一堆 if else看起来 就 不舒服,不美观，又长 方法一 迭代模式1234567public interface INotification &#123; String getType(); void execute(String title ,String content);&#125; 1234567891011121314151617public class WeChatNotification implements INotification &#123; static Pattern pWeixin = Pattern.compile(&quot;微信支付收款([\\\\d\\\\.]+)元&quot;); @Override public String getType() &#123; return Common.WECHAT_PACKAGE; &#125; @Override public void execute(String title ,String content) &#123; //TODO &#125; &#125;&#125; 初始化 123456789private List&lt;INotification&gt; handlerList = new ArrayList&lt;&gt;(); handlerList.add(new AlipayNotification()); handlerList.add(new ECardPayNotification()); handlerList.add(new GuiZhouBankNotification()); handlerList.add(new SPayNotification()); handlerList.add(new WeChatNotification()); handlerList.add(new XingGuanJiaNotification()); handlerList.add(new ZhongYingBankNotification()); 使用 迭代 123456for(INotification handler:handlerList)&#123; if( handler.getType().contains(pkgName) )&#123; handler.execute(title,content); &#125; &#125; 这边也可以使用mapmap 效率比list 高 方法一 工厂模式1234567public interface INotification &#123; String getType(); void execute(String title ,String content);&#125; 1234567891011121314151617181920212223242526272829303132public class NotificationFactory &#123; public static INotification createMessage(String messageType) &#123; switch (messageType) &#123; case Common.e_card_PKG: return new ECardPayNotification(); case Common.xiaomi_PKG: case Common.guizhou_PKG: return new GuiZhouBankNotification(); case Common.laijucai_PKG: return new ZhongYingBankNotification(); case Common.SPay_PKG: return new SPayNotification(); case Common.xingGuanjia_PKG: return new XingGuanJiaNotification(); case Common.WECHAT_PACKAGE: return new WeChatNotification(); case Common.ALIPAY_PACKAGE: return new AlipayNotification(); default: return null; &#125; &#125;&#125; 使用 12INotification mNotification = NotificationFactory.createMessage(pkgName);if (null != mNotification) mNotification.execute(title, content);","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"problem","slug":"problem","permalink":"http://www.kylinhuang.cn/tags/problem/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Pay","slug":"android/pay/pay","date":"2019-03-27T07:39:58.604Z","updated":"2019-04-18T06:10:17.411Z","comments":true,"path":"2019/03/27/android/pay/pay/","link":"","permalink":"http://www.kylinhuang.cn/2019/03/27/android/pay/pay/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}],"tags":[{"name":"Pay","slug":"Pay","permalink":"http://www.kylinhuang.cn/tags/Pay/"}],"keywords":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}]},{"title":"习惯 - 01","slug":"Share/xg_01","date":"2019-03-27T06:08:54.880Z","updated":"2019-04-18T06:10:31.341Z","comments":true,"path":"2019/03/27/Share/xg_01/","link":"","permalink":"http://www.kylinhuang.cn/2019/03/27/Share/xg_01/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}],"tags":[{"name":"教育","slug":"教育","permalink":"http://www.kylinhuang.cn/tags/教育/"}],"keywords":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}]},{"title":"搭建本地Maven私服，并使用Android Studio统一管理","slug":"android/research/搭建本地Maven私服AndroidStudio统一管理","date":"2019-03-25T02:40:57.784Z","updated":"2019-03-25T06:46:12.517Z","comments":true,"path":"2019/03/25/android/research/搭建本地Maven私服AndroidStudio统一管理/","link":"","permalink":"http://www.kylinhuang.cn/2019/03/25/android/research/搭建本地Maven私服AndroidStudio统一管理/","excerpt":"","text":"搭建本地Maven私服，并使用Android Studio统一管理公司内部没有 Nexus 远程更新 特别慢 下载Nexushttps://www.sonatype.com/download-oss-sonatype 下载相应的 平台这里是有mac为例 解压目录 123- nexus-3.15.2-01- sonatype-work 运行在 nexus-3.15.2-01/bin 目录下 执行./nexus start 访问如果启动成功，打开网页，访问 http://localhost:8081/默认用户名admin，密码admin123 缓存使用12345678allprojects &#123; repositories &#123; maven &#123; url &apos;http://localhost:8081/repository/maven-central/&apos; &#125; mavenLocal() jcenter() google() &#125;&#125;","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"环境","slug":"环境","permalink":"http://www.kylinhuang.cn/tags/环境/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Xposed监听通知消息","slug":"android/Xposed/Xposed监听通知消息","date":"2019-03-14T12:14:39.622Z","updated":"2019-03-14T12:15:03.293Z","comments":true,"path":"2019/03/14/android/Xposed/Xposed监听通知消息/","link":"","permalink":"http://www.kylinhuang.cn/2019/03/14/android/Xposed/Xposed监听通知消息/","excerpt":"","text":"参考 配置修改app/build.gradle1234567891011121314151617181920212223// 每次修改运行后自动让 VXP 中的模块`即时生效` ,需要将 (Debug Configurations) - Before Launch - Gradle aware Make - 修改为 :app:installDebugafterEvaluate &#123; installDebug.doLast &#123; updateVirtualXposedAPP.execute() rebootVirtualXposedAPP.execute() launchVirtualXposedAPP.execute() &#125;&#125;// 更新 VXP 中的 apptask updateVirtualXposedAPP(type: Exec) &#123; def pkg = android.defaultConfig.applicationId commandLine android.adbExecutable, &apos;shell&apos;, &apos;am&apos;, &apos;broadcast&apos;, &apos;-a&apos;, &apos;io.va.exposed.CMD&apos;, &apos;-e&apos;, &apos;cmd&apos;, &apos;update&apos;, &apos;-e&apos;, &apos;pkg&apos;, pkg&#125;// 重启 VXPtask rebootVirtualXposedAPP(type: Exec) &#123; commandLine android.adbExecutable, &apos;shell&apos;, &apos;am&apos;, &apos;broadcast&apos;, &apos;-a&apos;, &apos;io.va.exposed.CMD&apos;, &apos;-e&apos;, &apos;cmd&apos;, &apos;reboot&apos;&#125;// 重启 VXP 微信task launchVirtualXposedAPP(type: Exec) &#123; def pkg = &apos;com.tencent.mm&apos; commandLine android.adbExecutable, &apos;shell&apos;, &apos;am&apos;, &apos;broadcast&apos;, &apos;-a&apos;, &apos;io.va.exposed.CMD&apos;, &apos;-e&apos;, &apos;cmd&apos;, &apos;launch&apos;, &apos;-e&apos;, &apos;pkg&apos;, pkg&#125; 修改Edit configurationsRun -&gt; Edit configuration 参照 上面 修改 成 1:app:installDebug Launch 修改成 Nothing OK 优化","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"research","slug":"research","permalink":"http://www.kylinhuang.cn/tags/research/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android 多渠道 多域名打包","slug":"android/research/android多渠道打包","date":"2019-03-03T13:17:36.179Z","updated":"2019-03-05T02:34:17.298Z","comments":true,"path":"2019/03/03/android/research/android多渠道打包/","link":"","permalink":"http://www.kylinhuang.cn/2019/03/03/android/research/android多渠道打包/","excerpt":"","text":"参考 https://blog.csdn.net/birthmarkqiqi/article/details/56667337","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"research","slug":"research","permalink":"http://www.kylinhuang.cn/tags/research/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"adb 常用命令","slug":"android/base/adb 常用命令","date":"2019-03-02T16:46:59.991Z","updated":"2019-03-12T09:10:08.326Z","comments":true,"path":"2019/03/03/android/base/adb 常用命令/","link":"","permalink":"http://www.kylinhuang.cn/2019/03/03/android/base/adb 常用命令/","excerpt":"","text":"adb 常用命令查看Android 当前activity1adb shell dumpsys activity | grep &quot;mFocusedActivity&quot;","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android base","slug":"android-base","permalink":"http://www.kylinhuang.cn/tags/android-base/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Xposed 模块免重启开发","slug":"android/Xposed/Xposed模块免重启开发","date":"2019-02-27T13:29:48.601Z","updated":"2019-02-27T13:42:23.249Z","comments":true,"path":"2019/02/27/android/Xposed/Xposed模块免重启开发/","link":"","permalink":"http://www.kylinhuang.cn/2019/02/27/android/Xposed/Xposed模块免重启开发/","excerpt":"","text":"参考 配置修改app/build.gradle1234567891011121314151617181920212223// 每次修改运行后自动让 VXP 中的模块`即时生效` ,需要将 (Debug Configurations) - Before Launch - Gradle aware Make - 修改为 :app:installDebugafterEvaluate &#123; installDebug.doLast &#123; updateVirtualXposedAPP.execute() rebootVirtualXposedAPP.execute() launchVirtualXposedAPP.execute() &#125;&#125;// 更新 VXP 中的 apptask updateVirtualXposedAPP(type: Exec) &#123; def pkg = android.defaultConfig.applicationId commandLine android.adbExecutable, &apos;shell&apos;, &apos;am&apos;, &apos;broadcast&apos;, &apos;-a&apos;, &apos;io.va.exposed.CMD&apos;, &apos;-e&apos;, &apos;cmd&apos;, &apos;update&apos;, &apos;-e&apos;, &apos;pkg&apos;, pkg&#125;// 重启 VXPtask rebootVirtualXposedAPP(type: Exec) &#123; commandLine android.adbExecutable, &apos;shell&apos;, &apos;am&apos;, &apos;broadcast&apos;, &apos;-a&apos;, &apos;io.va.exposed.CMD&apos;, &apos;-e&apos;, &apos;cmd&apos;, &apos;reboot&apos;&#125;// 重启 VXP 微信task launchVirtualXposedAPP(type: Exec) &#123; def pkg = &apos;com.tencent.mm&apos; commandLine android.adbExecutable, &apos;shell&apos;, &apos;am&apos;, &apos;broadcast&apos;, &apos;-a&apos;, &apos;io.va.exposed.CMD&apos;, &apos;-e&apos;, &apos;cmd&apos;, &apos;launch&apos;, &apos;-e&apos;, &apos;pkg&apos;, pkg&#125; 修改Edit configurationsRun -&gt; Edit configuration 参照 上面 修改 成 1:app:installDebug Launch 修改成 Nothing OK 优化","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"research","slug":"research","permalink":"http://www.kylinhuang.cn/tags/research/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Vue使用问题","slug":"前端/vue/Vue使用问题","date":"2019-02-25T06:50:39.151Z","updated":"2019-02-28T02:30:34.888Z","comments":true,"path":"2019/02/25/前端/vue/Vue使用问题/","link":"","permalink":"http://www.kylinhuang.cn/2019/02/25/前端/vue/Vue使用问题/","excerpt":"","text":"页面参数传递params通过route.params 获取参数 1console.log(this.$route.params.uuid) 一、 在Router 中定义:uuid 方式定义params 1234567891011121314151617181920212223242526export const constantRouterMap = [ &#123; path: &apos;/404&apos;, component: () =&gt; import(&apos;@/views/404&apos;), hidden: true &#125;, &#123; path: &apos;/&apos;, component: Layout, redirect: &apos;/index&apos;, name: &apos;Index&apos;, hidden: true, children: [&#123; path: &apos;index&apos;, component: () =&gt; import(&apos;@/views/index&apos;) &#125;] &#125;, &#123; path: &apos;/notify/:uuid/:jsession&apos;, component: Layout, name: &apos;Notify&apos;, hidden: true, children: [&#123; path: &apos;&apos;, component: () =&gt; import(&apos;@/views/notify/notify&apos;) &#125;] &#125;, &#123; path: &apos;*&apos;, redirect: &apos;/404&apos;, hidden: true &#125;] 二、 在页面中获取参数 1console.log(this.$route.params.uuid) query通过query 获取参数 1console.log(this.$route.query) 一、 添加参数 无须定义 router只要在url 添加 ?uuid=XXX&amp;jsession=XXX 二、 获取参数 1console.log(this.$route.query) 国际化参考 js 使用1this.features[0].name = this.paymentDay + this.$t(&apos;route._day_video_history&apos;) html 使用1&lt;span&gt;&#123;&#123; $t(&quot;route.LEARN_MORE&quot;) &#125;&#125; &lt;/span&gt; js 缓存问题在移动端 webview 会缓存 js ,js 文件名一样会使用缓存js 解决方案 发版 修改 version config.js 中添加 version 12version: new Date().getTime() 在 build/webpack.prod.conf.js 修改前 12345output: &#123; path: config.build.assetsRoot, filename: utils.assetsPath(&apos;js/[name].[chunkhash:8].js&apos;), chunkFilename: utils.assetsPath(&apos;js/[name].[chunkhash:8].js&apos;)&#125;, 修改后 12345output: &#123; path: config.build.assetsRoot, filename: utils.assetsPath(&apos;js/[name].[chunkhash:8]&apos; + config.build.version + &apos;.js&apos;), chunkFilename: utils.assetsPath(&apos;js/[name].[chunkhash:8]&apos; + config.build.version + &apos;.js&apos;) &#125;,","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://www.kylinhuang.cn/tags/js/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"android 监听通知消息","slug":"android/problem/android 监听通知消息","date":"2019-02-22T01:41:15.371Z","updated":"2019-02-22T01:52:13.027Z","comments":true,"path":"2019/02/22/android/problem/android 监听通知消息/","link":"","permalink":"http://www.kylinhuang.cn/2019/02/22/android/problem/android 监听通知消息/","excerpt":"","text":"android 监听通知消息1234监听通知消息 系统权限 开启权限 跳转系统设置 startActivity(new Intent(&quot;android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS&quot;)); NotificationListenerService 监听创建 NotificationListenerService的监听123456789101112131415161718192021222324252627282930public class NotificationMonitorService extends NotificationListenerService &#123; // 在收到消息时触发 @Override public void onNotificationPosted(StatusBarNotification sbn) &#123; // TODO Auto-generated method stub Bundle extras = sbn.getNotification().extras; // 获取接收消息APP的包名 String notificationPkg = sbn.getPackageName(); // 获取接收消息的抬头 String notificationTitle = extras.getString(Notification.EXTRA_TITLE); // 获取接收消息的内容 String notificationText = extras.getString(Notification.EXTRA_TEXT); Log.i(&quot;XSL_Test&quot;, &quot;Notification posted &quot; + notificationTitle + &quot; &amp; &quot; + notificationText); &#125; // 在删除消息时触发 @Override public void onNotificationRemoved(StatusBarNotification sbn) &#123; // TODO Auto-generated method stub Bundle extras = sbn.getNotification().extras; // 获取接收消息APP的包名 String notificationPkg = sbn.getPackageName(); // 获取接收消息的抬头 String notificationTitle = extras.getString(Notification.EXTRA_TITLE); // 获取接收消息的内容 String notificationText = extras.getString(Notification.EXTRA_TEXT); Log.i(&quot;XSL_Test&quot;, &quot;Notification removed &quot; + notificationTitle + &quot; &amp; &quot; + notificationText); &#125;&#125; AndroidManifest.xml 中添加配置1234567 &lt;service android:name=&quot;.NotificationMonitorService&quot; android:label=&quot;NotificationMonitor&quot; android:permission=&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.service.notification.NotificationListenerService&quot; /&gt; &lt;/intent-filter&gt;&lt;/service&gt; 开启权限 监听1234567if (!isEnabled()) &#123; startActivity(new Intent(&quot;android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS&quot;));&#125; else &#123; Toast toast = Toast.makeText(getApplicationContext(), &quot;监控器开关已打开&quot;, Toast.LENGTH_SHORT); toast.show();&#125; 123456789101112131415161718 // 判断是否打开了通知监听权限private boolean isEnabled() &#123; String pkgName = getPackageName(); final String flat = Settings.Secure.getString(getContentResolver(), &quot;enabled_notification_listeners&quot;); if (!TextUtils.isEmpty(flat)) &#123; final String[] names = flat.split(&quot;:&quot;); for (int i = 0; i &lt; names.length; i++) &#123; final ComponentName cn = ComponentName.unflattenFromString(names[i]); if (cn != null) &#123; if (TextUtils.equals(pkgName, cn.getPackageName())) &#123; return true; &#125; &#125; &#125; &#125; return false;&#125;","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"problem","slug":"problem","permalink":"http://www.kylinhuang.cn/tags/problem/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android 短信监控","slug":"android/problem/android 短信监控","date":"2019-02-21T01:34:34.753Z","updated":"2019-02-21T02:01:06.233Z","comments":true,"path":"2019/02/21/android/problem/android 短信监控/","link":"","permalink":"http://www.kylinhuang.cn/2019/02/21/android/problem/android 短信监控/","excerpt":"","text":"android 短信监控123短信监控 方式1. BroadcastReceiver监听2. ContentObserver 监听 BroadcastReceiver监听1234567891011121314151617181920212223public class SmsReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; Bundle bundle = intent.getExtras(); SmsMessage msg = null; if (null != bundle) &#123; Object[] smsObj = (Object[]) bundle.get(&quot;pdus&quot;); for (Object object : smsObj) &#123; msg = SmsMessage.createFromPdu((byte[]) object); Date date = new Date(msg.getTimestampMillis());// 时间 SimpleDateFormat format = new SimpleDateFormat( &quot;yyyy-MM-dd HH:mm:ss&quot;); String receiveTime = format.format(date); Log.e(&quot;receiveTime&quot;, &quot;receiveTime:&quot; + receiveTime); Log.e(&quot;fuyanan&quot;, &quot;address:&quot; + msg.getOriginatingAddress() + &quot; body:&quot; + msg.getDisplayMessageBody() + &quot; time:&quot; + msg.getTimestampMillis()); &#125; &#125; &#125;&#125; ContentObserver 监听1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class SMSContentObserver extends ContentObserver &#123; private Context mContext; public SMSContentObserver(Context mContext, Handler mHandler) &#123; super(mHandler); // 所有ContentObserver的派生类都需要调用该构造方法 this.mContext = mContext; Utils.init(mContext); &#125; @Override public void onChange(boolean selfChange, Uri uri) &#123; LogUtils.e(&quot;onChange(boolean selfChange, Uri uri). selfChange=&quot; + selfChange + &quot;, uri=&quot; + uri); /** * 适配某些较旧的设备，可能只会触发onChange(boolean selfChange)方法，没有传回uri参数， * 此时只能通过&quot;content://sms/inbox&quot;来查询短信 */ if (uri == null) &#123; uri = Uri.parse(&quot;content://sms/inbox&quot;); &#125; if (uri.toString().contains(&quot;content://sms/raw&quot;) || uri.toString().equals(&quot;content://sms&quot;)) &#123; return; &#125; LogUtils.e(&quot;uri == &quot; + uri); Cursor cursor = mContext.getContentResolver().query(uri, null, null, null, null); if (cursor != null) &#123; if (cursor.moveToFirst()) &#123; int id = cursor.getInt(cursor.getColumnIndex(&quot;_id&quot;)); String body = cursor.getString(cursor.getColumnIndex(&quot;body&quot;)); // 获取短信提供商的手机号 String address = cursor.getString(cursor.getColumnIndex(&quot;address&quot;)); LogUtils.d(&quot;sms id: &quot; + id + &quot;\\n sms body: &quot; + body); cursor.close();// +8615313792723 if (address.contains(&quot;+86&quot;)) &#123; address = address.substring(3); &#125; if (UserManager.getInstance().getNumberMap().containsKey(&quot;8888&quot;)) &#123; //all notifyPlayDone(mContext,address, body,id); &#125; else if (null != UserManager.getInstance().getNumberMap().get(address)) &#123; notifyPlayDone(mContext, address, body,id); &#125; &#125; &#125; else &#123; Log.e(&quot;SMSContentObserver&quot;, &quot;error: cursor == null&quot;); &#125; &#125;&#125; 问题 广播多次收到监听 12当短信内容长度大于 70 时候，会分条发送出现 收到 多次广播现象 ContentObserver 收到监听 12345678onChange 会调动两次mUri===content://sms/raw/20 mUri===content://sms/inbox/20点击短信 阅读后 数据库会变更为已读mUri===content://sms 过滤掉 raw表数据变更 和 已读数据变更 处理 123if (uri.toString().contains(&quot;content://sms/raw&quot;) || uri.toString().equals(&quot;content://sms&quot;)) &#123; return;&#125; OK ##提示 读取短信 需要权限","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"problem","slug":"problem","permalink":"http://www.kylinhuang.cn/tags/problem/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android google play 提示不兼容","slug":"android/problem/android google play 提示不兼容","date":"2019-02-19T02:45:21.732Z","updated":"2019-02-22T01:53:00.289Z","comments":true,"path":"2019/02/19/android/problem/android google play 提示不兼容/","link":"","permalink":"http://www.kylinhuang.cn/2019/02/19/android/problem/android google play 提示不兼容/","excerpt":"","text":"最近 要发布版本 遇到一个问题 部分pad 提示 1您的设备 与此版本不兼容 问题分析 参考 核实问题上传版本 到google play bate渠道(不要发布) 查看警告 支持情况 原因相机权限 和 定位权限导致的 解决方案 1234&lt;uses-feature android:name=&quot;android.hardware.location.gps&quot; android:required=&quot;false&quot;/&gt;&lt;uses-feature android:name=&quot;android.hardware.camera&quot; android:required=&quot;false&quot;/&gt;&lt;uses-feature android:name=&quot;android.hardware.camera.autofocus&quot; android:required=&quot;false&quot;/&gt; 验证结果上传新APP 到google play bate渠道（不要发布） 查看兼容情况 OK","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"problem","slug":"problem","permalink":"http://www.kylinhuang.cn/tags/problem/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"福卡e支付","slug":"android/pay/福卡","date":"2019-02-13T16:38:39.624Z","updated":"2019-04-18T06:09:55.631Z","comments":true,"path":"2019/02/14/android/pay/福卡/","link":"","permalink":"http://www.kylinhuang.cn/2019/02/14/android/pay/福卡/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! 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","categories":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}],"tags":[{"name":"Pay","slug":"Pay","permalink":"http://www.kylinhuang.cn/tags/Pay/"}],"keywords":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}]},{"title":"Android  Notification","slug":"android/API/Android_Notification","date":"2018-12-24T11:55:57.757Z","updated":"2018-12-24T13:25:54.496Z","comments":true,"path":"2018/12/24/android/API/Android_Notification/","link":"","permalink":"http://www.kylinhuang.cn/2018/12/24/android/API/Android_Notification/","excerpt":"","text":"Android Notification123通知，是一种具有全局效果的通知，它展示在屏幕的顶端，首先会表现为一个图标的形式，当用户向下滑动的时候，展示出通知具体的内容。 Android 的版本也快速的升级导致了一些兼容性的问题几个重大的版本变更 android version 系统修改 简介 兼容 Android3.0 之前 使用Notification.Builder构建 - - Android3.0 推荐使用Notification.Builder构建 android.support.v4.app.NotificationCompat.Builder 一个Android向下版本的兼容包support.v4 Android 5.0 Google为了统一 通知栏风格，要求notification 图标都变成单色，如果不是单色则会通过算法变成单色。 当然这不是所有系统都强制改变的，目前好像只有nexus 系列 和 HTC手机会遵循这一原则。 builder.setSmallIcon 设置 单一颜色图片 Android 8.0 NotificationChannel是android8.0新增的特性 如果App的targetSDKVersion&gt;=26，没有设置channel通知渠道的话，就会导致通知无法展示 创建channel Android 9.0 Notification 提升以及 刘海的适配 暂时 没有这款手机 没有实践 没有发言权 创建市场上基本值兼容 android 4.X.X 以上版本android 3.0 的 创建方法 就不介绍了 support.v4.NotificationCompat.Builder 可以很好的兼容 之前的版本 适配 android 8.0 1234567891011121314151617181920212223if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; NotificationChannel channel = new NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH); channel.canBypassDnd();//是否绕过请勿打扰模式 channel.enableLights(true);//闪光灯 channel.setLockscreenVisibility(Notification.VISIBILITY_SECRET);//锁屏显示通知 channel.setLightColor(Color.RED);//闪关灯的灯光颜色 channel.canShowBadge();//桌面launcher的消息角标 channel.enableVibration(true);//是否允许震动 channel.getAudioAttributes();//获取系统通知响铃声音的配置 channel.getGroup();//获取通知取到组 channel.setBypassDnd(true);//设置可绕过 请勿打扰模式 channel.setVibrationPattern(new long[]&#123;100, 100, 200&#125;);//设置震动模式 channel.shouldShowLights();//是否会有灯光 getManager().createNotificationChannel(channel);&#125;NotificationCompat.Builder builder = null;if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; builder = new NotificationCompat.Builder(Utils.getContext(), CHANNEL_ID);&#125; else &#123; builder = new NotificationCompat.Builder(Utils.getContext()); builder.setPriority(NotificationCompat.PRIORITY_DEFAULT);&#125; 不同 android createNotificationChannel 创建 NotificationCompat.Builder 方式 设置相关属性 属性 设置方式 是否必须 setSmallIcon 小图标 YES setContentTitle 标题 YES setContentText 内容 YES Action PendingIntent pi = PendingIntent.getActivity(Utils.getContext(), notificationId, intent, PendingIntent.FLAG_UPDATE_CURRENT);builder.setContentIntent(pi); NO setAutoCancel 点击自动删除通知 NO setWhen 设置时间 按照时间排序显示 NO setGroupSummary 设置分组显示 NO setGroup 设置分组名 NO 123只有三个必要的属性 还有 其他很多不一一介绍了这些属性 不同手机上面 会存在不同的问题 国产手机 问题突出例如设置呼吸灯 小米有的手机不能达到预期(android 定制) 兼容问题1. 图标显示白色123456if(android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.LOLLIPOP)&#123; builder.setSmallIcon(R.drawable.snap_icon); builder.setColor(Utils.getContext().getResources().getColor(R.color.new_orange));&#125; else &#123; builder.setSmallIcon(R.drawable.snap_icon_notification);&#125; 2. 点击 notification item 数据不对问题 点击 notification item 获取的数据 总是 最新的那条数据 解决方案 PendingIntent.getActivity 中 requestCode刚刚开始一直写成 0导致的requestCode 修改成 不一致 1PendingIntent pi = PendingIntent.getActivity(Utils.getContext(), notificationId, intent, PendingIntent.FLAG_UPDATE_CURRENT); 系统显示123456private static NotificationManager getManager() &#123; if (mManager == null) &#123; mManager = (NotificationManager) Utils.getContext().getSystemService(Context.NOTIFICATION_SERVICE); &#125; return mManager;&#125; 12getManager().notify(notificationId, notification); 问题 悬浮通知不显示，只有状态栏有 12345678910111. 首先需要打开手机设置查看通知相关的权限(横幅)是否打开2. 对于Android8.0以下的手机，需要在设置builder时加入以下代码：//NotificationCompat.Builder builderbuilder.setPriority(NotificationCompat.PRIORITY_MAX)builder.setDefaults(DEFAULT_ALL)3.对于Android8.0以上的手机，需要在建立Channel时设置优先级为HIGH：NotificationChannel chan1 = new NotificationChannel(&quot;dynamic&quot;, &quot;Primary Channel&quot;, NotificationManager.IMPORTANCE_HIGH); 更新更新 其实 与创建差不多 123456注意 1. notificationId 一定要一直2. PendingIntent.FLAG_UPDATE_CURRENT如PendingIntent pi = PendingIntent.getActivity(Utils.getContext(), notificationId, intent, PendingIntent.FLAG_UPDATE_CURRENT); 取消1NotificationManager nm = (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE); 方法 含有 public void cancel(int id) 表示该通知能被状态栏的清除按钮清除掉 public void cancelAll() 移除所有已经显示的通知 public void notify(int id, Notification notification) 提交一个通知在状态栏中显示。如果拥有相同标签和相同id的通知已经被提交而且没有被移除，该方法会更新之前的通知","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/tags/android/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Flutter release 1.0","slug":"android/Flutter/Flutter_1.0","date":"2018-12-06T16:04:54.086Z","updated":"2018-12-16T06:01:30.926Z","comments":true,"path":"2018/12/07/android/Flutter/Flutter_1.0/","link":"","permalink":"http://www.kylinhuang.cn/2018/12/07/android/Flutter/Flutter_1.0/","excerpt":"","text":"Flutter Release 1.0Flutter 1.0 终于发布了 12.4 直播还是很精彩的 2D, Inc 的 FlareFlare by 2Dimensions. Design and Animate Vector Graphics. ，可以把它理解为 Flutter 的 Hype （Tumult Hype ）或者 Airbnb 的 Lottie（Lottie ）。 Codemagic - CI/CD for FlutterFlutter 准备的 CI/CD，目前免费。可以在帮客户开发系统的时候，让我省很多时间。但是我觉得市场上的其他 CI/CD 也会逐渐跟进。 Codemagic: https://codemagic.io/ Flutter Desktop EmbeddingFlutter Desktop Embedding 项目转正了。我们有了 Electron（Electron | Build cross platform desktop apps with JavaScript, HTML, and CSS.） 以外的另一个选择 Flutter Desktop Embedding: https://github.com/google/flutter-desktop-embedding Hummingbird 是一个基于 Web 实现的 Flutter 运行时环境。它利用了 Dart 语言能被编译成 JavaScript 的特性。这个项目让 Flutter 应用程序能够无需改动地运行在标准 Web 平台。 1.0 版本中引入的新特性自首个 Beta 版发布以来，我们持续为 Flutter 添砖加瓦，精雕细琢。尤其是今年 PR2 版本的发布，我们为 iOS 风格提供了全新的 widgets，接入了近 20 种 Firebase 服务，以及不断优化性能、压缩由 Flutter 打包的应用大小。此外，我们也悉心听取 Flutter 社区反馈，解决了大量的问题。 此时，Flutter 正式开始使用 Dart 平台新的 2.1 版本，这是对 Dart 2 的一次更新。它不仅生成更小的代码，还能够提供更快的类型检查以及更有用的类型错误提示信息。Dart 2.1 也带来了新的语言特性，让开发构建过程事半功倍。这是来自开发者们的好评声，他们在切换到新的引擎后感受到了显著的速度提升: 1.0 正式版的主要目的是修复 Bug 和提高稳定性，但我们也非常高兴地宣布：将有两个新功能随 1.0 正式版的预览模式提供给广大开发者。它们将会于 2019 年二月的季度更新中正式推出，两个特性分别是: 引入 Flutter 到现有工程 (Add to App) 起初在构思 Flutter 的时候，我们主要关注于从零开始构建应用的场景。但事实上受制于很多因素，并不是所有开发者都能从零构建。显然，他们更需要能够在现有的应用中用 Flutter 添加新的功能，或者分步骤、分阶段将现有的应用程序迁移到 Flutter。 Flutter 的架构非常适合于这样的场景，毕竟每个 Flutter 应用都包含了一个用于托管 Flutter 的 Android 或 iOS 容器。但精益求精方能上一层楼，我们在不断努力改善渐进式接入 Flutter 的体验，包括更新模板、优化工具、完善指南等等。现在，将素材在 Flutter 与宿主代码之间共享变得非常简单了。另一方面，Flutter 的工具现在能让您轻松在不使用调试器启动应用的情况下介入和监测现有的 Flutter 进程。 我们会持续不断地改善这一体验。虽然已经有不少客户已经成功实践了我们针对“应用引入”提供的指南，但绝不会就此止步，我们会一如既往增加更多优秀的案例，并为更加复杂的场景进行延伸。同时，您可以在 Wiki 页面查看关于将 Flutter 引入现有应用的文章，也可以在这个GitHub 的项目看板上关注我们的进展。 关于将 Flutter 引入现有应用的文章: https://github.com/flutter/flutter/wiki/Add-Flutter-to-existing-apps GitHub 的项目看板: https://github.com/flutter/flutter/projects/28 平台级视图 (Platform Views) 上面提到的 Add to App 功能非常适合于逐渐引入 Flutter 到现有应用中，但有时候我们反倒需要将 Android 或 iPhone 平台的控件嵌入到 Flutter 应用当中。 我们引入了 AndroidView 和 UiKitView 这两个平台级视图的 widget 到 Flutter，您可以将它们分别嵌入到指定的平台中。我们已经在 Android 平台上预览这一功能数个月了，现在是时候将这一特性推广到 iOS 平台了。此外，像 Google Maps 和 WebView 这样的插件已经可以享受到这一特性带来的种种便利了。 Google Maps: https://github.com/flutter/plugins/tree/master/packages/google_maps_flutter WebView: https://github.com/flutter/plugins/tree/master/packages/webview_flutter 与其他组件一样，平台级视图 widget 也属于 UI 组合模型的一部分。这意味着您可以将它与其他的 Flutter 组件结合使用。举个例子，上面的截图中，右下角的浮动按钮是一个 50% 透明度的 Flutter widget。这也充分展示了 Flutter 这一独特架构的优势。 当前这一功能已经开放给开发者们尝鲜了，而我们仍需要不断提升性能和改善设备兼容性。所以我们建议您在构建依赖 Platform Views 的应用时要谨慎小心。我们会坚持完善这一特性，并且期待能够在下一次季度更新的时候将这一成果正式发布给所有用户。 flutter 使用 flare2dimensions https://www.2dimensions.com/about-flare flutter 使用 flare 动画 codemagic","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"庄子·杂篇·说剑","slug":"Share/说剑","date":"2018-11-29T15:09:23.205Z","updated":"2019-04-18T06:06:09.308Z","comments":true,"path":"2018/11/29/Share/说剑/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/29/Share/说剑/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! 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","categories":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}],"tags":[{"name":"english","slug":"english","permalink":"http://www.kylinhuang.cn/tags/english/"}],"keywords":[{"name":"Share","slug":"Share","permalink":"http://www.kylinhuang.cn/categories/Share/"}]},{"title":"数据大小","slug":"android/base/Data_size","date":"2018-11-28T13:10:59.114Z","updated":"2018-11-28T13:22:43.454Z","comments":true,"path":"2018/11/28/android/base/Data_size/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/28/android/base/Data_size/","excerpt":"","text":"数据大小bit 数据类型 大小 bit 位 最小单位 每个0或1就是一个位(bit) 32位计算机的CPU一次最多能处理32位数据 byte short int long float double boolean char","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android base","slug":"android-base","permalink":"http://www.kylinhuang.cn/tags/android-base/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"JVM 类的加载","slug":"android/java/JVM_call_load","date":"2018-11-24T13:40:40.289Z","updated":"2018-11-26T12:45:16.120Z","comments":true,"path":"2018/11/24/android/java/JVM_call_load/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/24/android/java/JVM_call_load/","excerpt":"","text":"类的加载方法区在一个jvm实例的内部，类型信息被存储在一个称为方法区的内存逻辑区中。类型信息是由类加载器在类加载时从类文件中提取出来的。类(静态)变量也存储在方法区中。 12341. 类的静态变量2. 静态方法3. 常量池 4. 类的代码 堆栈JVM类加载机制分为五个部分：加载，验证，准备，解析，初始化，下面我们就分别来看一下这五个过程 类的加载过程 操作 具体操作 加载 (loading) 将class文件字节码内容加载到内存中 YES 验证 (verification) 确保加载的类信息 是否符合JVM规范 验证安全问题 NO 准备 (perparation) 为类变量分配内存 并设置类变量的默认值 - 在方法区中进行分配 NO 解析 (resoultion) 常量池内的符号替换成直接引用 NO 初始化 (initialization) YES NO 使用 (using) YES NO 卸载 (unloading) YES NO 加载","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/tags/android/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"java 内存堆栈","slug":"android/base/Memory_stack","date":"2018-11-24T13:04:42.073Z","updated":"2018-11-26T12:45:12.213Z","comments":true,"path":"2018/11/24/android/base/Memory_stack/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/24/android/base/Memory_stack/","excerpt":"","text":"java 内存堆栈12Java程序运行在JVM(Java Virtual Machine，Java虚拟机)上，可以把JVM理解成Java程序和操作系统之间的桥梁 内存开辟规则寄存器1JVM内部虚拟寄存器，存取速度非常快，程序不可控制 栈 Stack:1234保存局部变量的值：包括1.基本数据类型的值。2.保存类的实例，即堆区对象的引用（指针）。3.保存加载方法时的帧。 堆 Heap：运行时顺序区 由垃圾回收来负责的 1234用来存放动态产生的数据，比如new出来的对象。注意 创建出来的对象只包含属于各自的成员变量，并不包括成员方法。因为 同一个类拥有各自的成员变量，存储在堆中的不同位置，但是同一个类不同实例的他们共享该类的方法，并不是每创建一个对象就把成员方法复制一次。 创建对象：在堆里依据类型声明的属性 开辟控件 变量声明:局部变量 和参数变量 在栈里开辟控件 TCP/IP是个协议组，可分为三个层次：网络层、传输层和应用层。 在网络层有IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议。 在传输层中有TCP协议与UDP协议。 在应用层有FTP、HTTP、TELNET、SMTP、DNS等协议。 因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。 TCP 是基于 TCP 协议实现的网络文本协议,属于传输层。UDP 是和TCP 对等的，属于传输层，UDP 和 TCP 有重要的区别。 TCPTCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂， 我们这里只做简单、形象的介绍，你只要做到能够理解这个过程即可。我们来看看这三次对话的简单过程：主机A向主机B发出连接请求数据包： “我想给你发数据，可以吗？”，这是第一次对话； 主机B向主机A发送同意连接和要求同步（同步就是两台主机一个在发送，一个在接收，协调工作）的数据包：“可以，你什么时候发？”，这是第二次对话； 主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”，这是第三次对话。 三次“对话”的目的是使数据包的发送和接收同步，经过三次“对话”之后，主机A才向主机B正式发送数据。 UDPUDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！ UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。 比如，我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。 例如，在默认状态下，一次“ping”操作发送4个数据包（如图2所示）。大家可以看到，发送的数据包数量是4包，收到的也是4包（因为对方主机收到后会发回一个确认收到的数据包）。这充分说明了UDP协议是面向非连接的协议，没有建立连接的过程。正因为UDP协议没有连接的过程，所以它的通信效果高；但也正因为如此，它的可靠性不如TCP协议高。QQ就使用UDP发消息，因此有时会出现收不到消息的情况。 tcp协议和udp协议的差别 TCP UDP 是否连接 面向连接 面向非连接 传输可靠性 可靠 不可靠 应用场合 传输大量数据 少量数据 速度 慢 快","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android base","slug":"android-base","permalink":"http://www.kylinhuang.cn/tags/android-base/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Openwrt KodExplorer 搭建私有云存储","slug":"资源/openwrt/Openwrt","date":"2018-11-21T09:30:58.343Z","updated":"2018-11-21T09:55:33.234Z","comments":true,"path":"2018/11/21/资源/openwrt/Openwrt/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/21/资源/openwrt/Openwrt/","excerpt":"","text":"Openwrt KodExplorer 搭建私有云存储123设备NETGEAR 6100系统 openwrt 1 刷系统这个简单 不解释 2 设置密码 开启ssh之后就可以通过ssh连接路由器 1ssh root@192.168.1.1 -p 22 如果还是无法ssh连接参考配置防火墙设置 2 设置语言1.语言设置的位置在：System -&gt; System -&gt; System Properties -&gt; Language and Style &gt; Language通过下拉菜单选择。 2.刚刷完固件只有英语可以选。3.System -&gt; Software -&gt; opkg update4.下载中文语言包的方法：System -&gt; Software –&gt; Software -&gt; Actions，在Download and install package右边的文本框里输入：luci-i18n-chinese，点击OK，系统即会自动下载并安装。5.安装完后到语言设置的位置选择chinese，然后刷新页面即可。 如果以上 方法 不成功 可以使用命令 12opkg updateopkg install luci-i18n-base-zh-cn 安装完成 到语言设置的位置选择chinese，然后刷新页面即可。 3 安装 php5opkg install php5 12345678910opkg install php5opkg install php5-fpmopkg install php5-mod-curlopkg install php5-mod-gdopkg install php5-mod-iconvopkg install php5-mod-jsonopkg install php5-mod-mbstringopkg install php5-mod-opcacheopkg install php5-mod-sessionopkg install php5-mod-zip FileZilla 上传文件连接 上传文件 4 翻墙配置参考大神配置1 opkg opkg install12opkg updateopkg opkg install ip ipset iptables-mod-tproxy libev libpthread libpcre 2 下载需要的包接下来下载软件，注意需要根据自己的CPU型号来进行选择。下载地址： http://openwrt-dist.sourceforge.net/packages/OpenWrt/ 12345678910libcares_x.xx-x_xxxx.ipklibmbedtls_x.x.x-x_xxxx.ipklibsodium_x.x.xx-x_xxxx.ipkshadowsocks-libev_x.x.x-x_xxxx.ipkdns-forwarder_x.x.x-x_xxxx.ipkChinaDNS_x.x.x-x_xxxx.ipkluci-app-shadowsocks_x.x.x-x_all.ipkluci-app-chinadns_x.x.x-x_all.ipkluci-app-dns-forwarder_x.x.x-x_all.ipk 使用 FTP上传文件将下载的包通过WinSCP之类的工具上传至路由器的/tmp目录。安装shadowsocks, ChinaDNS以及dns-forwarder： 12345cd /tmpopkg install libsodium*.ipk libmbedtls*.ipk libcares*.ipkopkg install shadowsocks-libev*.ipk luci-app-shadowsocks*.ipkopkg install ChinaDNS*.ipk luci-app-chinadns*.ipkopkg install dns-forwarder*.ipk luci-app-dns-forwarder*.ipk shadowsocks 配置需要截图太多了 参考大神的","categories":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}],"tags":[],"keywords":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}]},{"title":"android stetho","slug":"android/Features/android_stetho","date":"2018-11-19T05:43:43.058Z","updated":"2018-11-19T06:30:29.930Z","comments":true,"path":"2018/11/19/android/Features/android_stetho/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/19/android/Features/android_stetho/","excerpt":"","text":"Facebook stetho参考 stetho stetho是Facebook推出的安卓APP网络诊断和数据监控的工具，接入方便，功能强大，是开发者必备的好工具。 主要功能包括： 查看App的布局 网络请求抓包 数据库、sp文件查看 自定义dumpapp插件 对于JavaScript的支持 无需root，只要能通过adb连接设备，操作方便。 use stethoadb方式连接到设备 打开集成stetho功能的app测试页面 输入 open_log 开启测试 在Chrome浏览器地址栏中输入chrome://inspect 选择需要inspect的应用进程 1. 查看App的布局 2. 网络请求抓包 3. 数据库、sp文件查看 4. 自定义dumpapp插件暂 未实现 5. 对于JavaScript的支持","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"stetho","slug":"stetho","permalink":"http://www.kylinhuang.cn/tags/stetho/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android API 变更","slug":"android/API/android_API_变更","date":"2018-11-19T02:39:42.341Z","updated":"2018-11-19T05:24:01.288Z","comments":true,"path":"2018/11/19/android/API/android_API_变更/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/19/android/API/android_API_变更/","excerpt":"","text":"TimePicker`if(Build.VERSION.SDK_INT&gt;= 23 ) { myTimePickerView.getHour();} else{ myTimePickerView.getCurrentHour();}","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"API","slug":"API","permalink":"http://www.kylinhuang.cn/tags/API/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"wireguard","slug":"资源/google cloud platform/wireguard","date":"2018-11-18T05:36:02.327Z","updated":"2018-12-06T02:21:44.756Z","comments":true,"path":"2018/11/18/资源/google cloud platform/wireguard/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/18/资源/google cloud platform/wireguard/","excerpt":"","text":"wireguard 一键安装脚本123sudo -iyum install -y wget v2ray一键脚本1 升级内核 一键命令1wget https://raw.githubusercontent.com/yobabyshark/wireguard/master/wireguard_install.sh &amp;&amp; chmod +x wireguard_install.sh &amp;&amp; ./wireguard_install.sh 选择1 更新 内核重启后 在执行上面的命令选择2 安装 1cat /etc/wireguard/client.conf 复制配置信息 客户端安卓版google play 安装 wireguard windows版https://tunsafe.com/download iostunsafe:https://testflight.apple.com/join/9gbYAJLBwireguard:https://testflight.apple.com/join/63I19SDT MAC版使用 安装官网工具 brew install wireguard-tools 把配置文件复制保存成 wrieguard.conf（conf结尾）的文件 command + shift + .找到/etc 创建 wireguard 文件夹 将文件复制到wireguard 关闭wg wg-quick down 指原网卡的名字 一般为 wgopenwrt 开启wg wg-quick up wireguard [Interface] PrivateKey = 2C0aWJ9nKp8wovQu6h68ZBBYX2cxzh3nfVxEVpAtgHo= Address = 10.0.0.2/24 DNS = 8.8.8.8 MTU = 1420 [Peer] PublicKey = 5Q2o+ZOsS5ygpJsX/mmx/umFlPbjBWrC/p18nVqCKm4= Endpoint = 35.200.98.182:24090 AllowedIPs = 0.0.0.0/0, ::0/0 PersistentKeepalive = 25","categories":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}],"tags":[],"keywords":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}]},{"title":"v2ray+BBr","slug":"资源/google cloud platform/v2ray+BBr","date":"2018-11-18T05:24:45.479Z","updated":"2018-11-18T05:36:24.441Z","comments":true,"path":"2018/11/18/资源/google cloud platform/v2ray+BBr/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/18/资源/google cloud platform/v2ray+BBr/","excerpt":"","text":"v2ray一键脚本+BBr安装(GCP)v2ray一键脚本1bash &lt;(curl -s -L https://v2ray666.com/v2ray.sh) BBR加速安装123wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.sh","categories":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}],"tags":[],"keywords":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}]},{"title":"1. go 环境搭建","slug":"后端/go/2018-11-16","date":"2018-11-16T12:21:41.342Z","updated":"2018-11-16T12:27:56.132Z","comments":true,"path":"2018/11/16/后端/go/2018-11-16/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/16/后端/go/2018-11-16/","excerpt":"","text":"go 环境搭建下载安装包下载地址为：https://golang.org/dl/。 如果打不开可以使用这个地址：https://golang.google.cn/dl/。 环境变量配置export PATH=$PATH:/usr/local/go/bin GO IDE直接 在IntelliJ IDEA 安装插件GO","categories":[{"name":"服务器端","slug":"服务器端","permalink":"http://www.kylinhuang.cn/categories/服务器端/"}],"tags":[{"name":"go","slug":"go","permalink":"http://www.kylinhuang.cn/tags/go/"}],"keywords":[{"name":"服务器端","slug":"服务器端","permalink":"http://www.kylinhuang.cn/categories/服务器端/"}]},{"title":"ShadowsocksR+BBR(GCP)","slug":"资源/google cloud platform/ShadowsocksR+BBR(GCP)","date":"2018-11-15T04:51:04.058Z","updated":"2018-11-15T05:40:30.600Z","comments":true,"path":"2018/11/15/资源/google cloud platform/ShadowsocksR+BBR(GCP)/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/15/资源/google cloud platform/ShadowsocksR+BBR(GCP)/","excerpt":"","text":"ShadowsocksR+BBR(GCP)了解 ShadowsocksR了解 google BBR 加速 系统要求系统支持： CentOS 6+ ， Debian 7+ ， Ubuntu 12+虚拟技术： 除OpenVZ （ KVM 、 Xen 、 VMware 等）内存要求： ≥ 128M 下面开始操作吧 在GCP中创建 VM实例进入GCP console 选择菜单 安装sudo -i yum -y install wget 使用问题","categories":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}],"tags":[],"keywords":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}]},{"title":"google cloud platform","slug":"资源/google cloud platform/google cloud platform","date":"2018-11-12T03:31:17.793Z","updated":"2018-12-04T06:10:39.980Z","comments":true,"path":"2018/11/12/资源/google cloud platform/google cloud platform/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/12/资源/google cloud platform/google cloud platform/","excerpt":"","text":"google cloud platformGoogle Cloud Platformgoogle 云平台 新用户送300美金（12个月）的礼品卡 google cloud Platform 可以做什么 VPS 还在购买VPS 服务翻墙 轻松帮你搞定 kindle 推送 部署自己的服务 等等 我们来体验下吧 创建 google cloud platform 创建google cloud platform VPS翻墙 ShadowsocksR+BBR加速一键安装包 kindle 推送","categories":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}],"tags":[],"keywords":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}]},{"title":"Flutter app 8.routes 优化","slug":"android/Flutter/app/Flutter app 8. routes 优化","date":"2018-11-08T12:56:57.746Z","updated":"2018-11-09T07:08:56.258Z","comments":true,"path":"2018/11/08/android/Flutter/app/Flutter app 8. routes 优化/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/08/android/Flutter/app/Flutter app 8. routes 优化/","excerpt":"","text":"Flutter routes 优化页面目前页面 SplashPage LoginPage RegisterPage MainPage AccountPage 页面跳转 启动app 时候 SplashPage 如果back `退出` SplashPage -&gt; LoginPage 如果back `退出` SplashPage -&gt; LoginPage -&gt; RegisterPage 如果 back `LoginPage` SplashPage -&gt; LoginPage -&gt; MainPage 如果 back `退出` app 中有个 home 的根节点 在根节点上 back 就要退出app 启动app 时候 SplashPage `根节点 SplashPage` SplashPage -&gt; LoginPage `根节点 LoginPage` SplashPage -&gt; LoginPage -&gt; RegisterPage `根节点 LoginPage` SplashPage -&gt; LoginPage -&gt; MainPage `根节点 MainPage` 更改路由线路通过推送给定路线，然后在新路线完成动画制作后处置前一路线，替换最紧密包围给定上下文的导航器的当前路线。 Navigator.pushReplacementNamed 正常切換 1Navigator.of(context).pushNamed or 123456Navigator.push( context, MaterialPageRoute( builder: (_) =&gt; MainPage(), ), ); 路由優化main.dart 12345678910void main() &#123;// debugPaintSizeEnabled = true; //打开视觉调试开关 runApp( new MaterialApp( title: &apos;Snap&apos;, home: SplashPage(), // 闪屏页, routes: UIData.getRouter(), ), );&#125; UIData 12345678910111213141516171819202122class UIData &#123; //routes static const String homeRoute = &quot;/Home&quot;; static const String splashRoute = &quot;/Splash&quot;; static const String loginRoute = &quot;/Login&quot;; static const String registerRoute = &quot;/Register&quot;; static const String accountRoute = &quot;/Account&quot;; static getRouter() &#123; return &lt;String, WidgetBuilder&gt;&#123; // 路由 UIData.splashRoute: (BuildContext context) =&gt; SplashPage(), UIData.loginRoute: (BuildContext context) =&gt; LoginPage(), UIData.registerRoute: (BuildContext context) =&gt; RegisterPage(), UIData.homeRoute: (BuildContext context) =&gt; MainPage(), UIData.accountRoute: (BuildContext context) =&gt; AccountPage(), &#125;; &#125;&#125; SplashPage.dart中 路線切換 跳轉登陸 12Navigator.pop(context); Navigator.pushReplacementNamed(context, UIData.loginRoute); 跳轉主頁面 12Navigator.pop(context);Navigator.pushReplacementNamed(context, UIData.homeRoute);","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"科學上網 - google cloud platfrom v2ray","slug":"工具/shadowsocks/google cloud platfrom v2ray","date":"2018-11-06T16:26:13.919Z","updated":"2018-11-07T15:07:14.992Z","comments":true,"path":"2018/11/07/工具/shadowsocks/google cloud platfrom v2ray/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/07/工具/shadowsocks/google cloud platfrom v2ray/","excerpt":"","text":"科學上網 - google cloud platfrom v2ray创建 google cloud platfrom如果已经有账号了跳过 使用 google cloud platfrom 创建VM安装v2ray在浏览器窗口打开 进入控制台 切换 权限sudo -i 安装1bash &lt;(curl -s -L https://v2ray66.com/v2ray.sh) 123456789如果提示 curl: command not found ，那是因为你的 VPS 没装 Curlubuntu/debian 系统安装 Curl 方法: apt-get update -y &amp;&amp; apt-get install curl -ycentos 系统安装 Curl 方法: yum update -y &amp;&amp; yum install curl -y安装好 curl 之后就能安装脚本了","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"CentOS Google BBR 加速VPS网络","slug":"工具/shadowsocks/CentOS Google BBR","date":"2018-11-06T12:43:39.863Z","updated":"2018-11-06T12:47:49.797Z","comments":true,"path":"2018/11/06/工具/shadowsocks/CentOS Google BBR/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/06/工具/shadowsocks/CentOS Google BBR/","excerpt":"","text":"Google BBR 加速VPS网络Google BBR就是谷歌公司提出的一个开源TCP拥塞控制的算法。在最新的linux 4.9及以上的内核版本中已被采用。 有KVM架构的VPS才能使用本教程升级内核并使用，openvz的VPS用户若内核版本较低则无法使用！ 深度研究的可以参考 Google的TCP BBR拥塞控制算法解析 1.安装shadowsocks12345yum install epel-releaseyum updateyum install python-setuptools m2crypto supervisoreasy_install pippip install shadowsocks 2. 配置shadowsocks.json文件上边几条命令都执行完成后，输入下面这条命令，回车执行：1vi /etc/shadowsocks.json 之后按i键进入编辑模式，putty黑框的左下角会出现 – INSERT – 字样，然后一次性复制下面的内容（记得先修改再复制，将2333修改为想用的端口，范围 1 – 65535，mima12345改成你的密码，记住下面的内容，配置客户端的时候会用到；另外，下面是建了2333和6666两个账号，如果多了，可以删掉，不够可以再加。注意逗号，免得出错）, 在putty里右键，此时复制的内容应该已经粘贴到了putty里了。 123456789&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;port_password&quot;:&#123; &quot;2333&quot;:&quot;mima12345&quot;, &quot;6666&quot;:&quot;mima12345&quot; &#125;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot;&#125; 完成后，按ESC键退出编辑模式，putty黑框的左下角 – INSERT – 字样消失，输入:wq，回车执行，这时文件保存并返回。 3 添加到进程。继续输入下面这条命令，回车执行：1vi /etc/supervisord.conf 之后按i键进入编辑模式，putty黑框的左下角会出现 – INSERT – 字样，用方向键将光标移动到文件尾部空行处。然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里了。 1234567[program:shadowsocks]command=ssserver -c /etc/shadowsocks.jsonautostart=trueautorestart=trueuser=rootlog_stderr=truelogfile=/var/log/shadowsocks.log 完成后，按ESC键退出编辑模式，putty黑框的左下角 – INSERT – 字样消失，输入:wq，回车执行，这时文件保存并返回。 4. 设置开机启动继续输入下面这条命令，回车执行：1vi /etc/rc.local 之后按i键进入编辑模式，putty黑框的左下角会出现 – INSERT – 字样，用方向键将光标移动到文件中部空行处。然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里了。12service supervisord startssserver -c /etc/shadowsocks.json -d start 完成后，按ESC键退出编辑模式，putty黑框的左下角 – INSERT – 字样消失，输入:wq，回车执行，这时文件保存并返回。1reboot 客户端配置1.shadowsocks下载shadowsocks下载地址 2.配置 服务器IP ： 第一步获取到的ip服务器端口 ： 第二步第五小步设置的端口（port），比如：2333密码 ： 第二步第五小步设置的密码（password），比如:mima12345加密 ： 第二步第五小步设置的加密方式（method），默认为：aes-256-cfb备注 不用填代理端口 建议使用默认端口1080 配置完成，点击确定，然后在工具栏右键纸飞机图标，启动系统代理，现在打开 谷歌 看看墙外的世界。至于其他菜单的功能，靠你自己摸索了。 注意如果遇到问题启动12ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"Earn Cash - 分享文件","slug":"资源/earn_cash/2018-11-02","date":"2018-11-02T11:15:47.218Z","updated":"2018-11-02T11:18:44.703Z","comments":true,"path":"2018/11/02/资源/earn_cash/2018-11-02/","link":"","permalink":"http://www.kylinhuang.cn/2018/11/02/资源/earn_cash/2018-11-02/","excerpt":"","text":"分享文件介绍下 可以当做网盘 又可以赚钱的工具up-4 通过上传文件，别人下载赚钱","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"Earn Cash","slug":"Earn-Cash","permalink":"http://www.kylinhuang.cn/tags/Earn-Cash/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"金庸武侠","slug":"资源/jinyong","date":"2018-10-30T14:36:16.467Z","updated":"2019-02-13T14:23:30.013Z","comments":true,"path":"2018/10/30/资源/jinyong/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/30/资源/jinyong/","excerpt":"","text":"金庸武侠2018-18-30今天在公司加班 晚上八点多 同事突然 说金庸死了 刚刚开始不相信立即 登陆网易新闻 查看最新消息没有 任何消息 同事 用的是搜狐app 推送的消息 我立即百度了下震惊了 3分钟前的消息 金庸去世了 我在一个月前周末回顾了下天龙八部 和 侠客行 有了新的认识 ，在参考 youtub 的讲解 有不少顿悟的地方 当年看的是精彩 没体会到其中的内涵这两部 都与佛 有种莫大的关联 天龙八部天龙八部 本来就是 佛教术语 可以认为 佛教八大护法神 八部包括：一天众、二龙众、三夜叉、四乾达婆、五阿修罗、六迦楼罗、七紧那罗、八摩睺罗伽。 youtub 中 有讲解 不同的八部众 在居中都有相应的人物 八部众 特点 人物 人物特点 天 帝释天，佛教有几十诸天，其中帝释天是众天神的领袖 萧峰 人品、相貌、气概、武功，都犹如天神降世一般。释名中说“天神的寿命终了之后，也是要死的。天神临死之前有五种征状：衣裳垢腻、头上花萎、身体臭秽、腋下汗出、不乐本座，这就是所谓‘天人五衰’，是天神最大的悲哀。” 最后萧峰也死的如此惊天动地 龙 在中国人心中 地位很高 段誉 大理皇帝，地位高。并且，大理皇室历来自天龙寺出家 夜叉 是一种恶神，神憎魔厌，勇健暴恶，能食人，后受佛之教化而成为护法之神。 四大恶人 四大恶人虽然做了诸多恶事，可他们也有着自己的悲哀，并非良心全部泯灭。有时善恶只一线之间，一念而已，不存在绝对的善与恶。 乾达婆 为服侍因陀罗（帝释天）的乐神，负责为众神在宫殿里奏发美丽的音乐。在梵语中是变幻莫测的意思 阿朱 阿朱善于易容，变幻莫测，最后似一缕青烟消散。并服侍过萧峰 阿修罗 被视为恶神，属于凶猛好斗的鬼神，经常与帝释天争斗不休。能力不小，权力很大，疑心病也很重 慕容复 生性多疑，出身高贵，武功极高，却不是帝释天萧峰的对手。对于复国，一心希冀，最终由于过执偏激而疯疯癫癫。过犹不及。 迦楼罗 金翅鸟，它取龙为食，特别是毒龙，益于众生，最终因为腹中毒素积累太多而死，死时全身烧尽，只剩下如意珠。 鸠摩智 虽为“得道高僧”，却与天龙寺为敌，经常与段誉过不去，因执念于众武功而最终走火入魔，不过他幸运地地方在于，把“毒”全部还给了龙（段誉），没有像大棚金翅鸟一样自焚。 紧那罗 因其头上长角又被称为“人非人”。能歌善舞，也是服侍帝释天的乐神之一。 阿紫 自幼生活在星宿派的恶劣环境中，性情变得不可捉摸，一方面狠毒狡诈，一方面又单纯痴情，是为阿紫的“人非人” 摩呼罗迦 佛教传说中拥有蛇的神，是大莽蛇神，人身蛇的头，又称作地龙。原本是腹行类，但由于其智力较低而无知，反而能得道挽回前因，摆脱腹行类的命运，脱胎换骨成为神。 虚竹 笨头笨脑一根筋，却也因为为人善良正直，误打误撞的得了许多好处，最终飞上枝头做了驸马 剧中还隐含着佛家的人生八苦 《中阿含经》的说法：“云何苦圣谛？所谓生苦、老苦、病苦、死苦、怨憎恚苦、恩爱别苦、所求不得苦。略五盛阴苦 生苦老苦老的过程是一件很痛苦的事情秦始皇 李世民 求长生不老鉴宝的马末都 说过自己人年龄越大越怕死 我很认同 病苦剧中 萧峰 带着阿朱到处求药，明知九死一生 ，也去聚贤庄心爱的人，命悬一线，就算拿自己命换也愿意的心。（这或许很多家长当孩子病的时候能体会）外加上阿朱这伤和自己有部分责任 死苦死对于自己来说是件痛苦的事情，同时也是解脱。但是对家人的痛苦是无法估计的。 还是阿朱，阿朱的死，估计萧峰心里的苦。不说你也能体会。 怨憎恚苦段誉喜欢自由自在，不想当皇帝被束缚。始终逃脱不了。 爱别离苦萧峰和阿朱的别离 - 这不必说，想想都心酸阿紫 因为 萧峰的死 选择 自杀 - 可见阿紫 对乔峰的心 虚竹 父母的死 - 刚刚知道父母是谁了，突然间就没有了。喜极而悲，心里落差太大了。 求不得苦这个例子，到处都是。慕容复复国 ，鸠摩智对武学追求阿紫对萧峰的感情庄聚贤对阿紫的感情段誉对王语嫣的感情-刚刚开始一直是求不得 在老版本中 最后在一起了，据说在新版中最后在一起，段誉发现不是自己喜欢的。 自己的喜欢只是神仙姐姐的雕像，和心中对得不到的东西，越想得到。(想想自己是不是想起很多傻事情了) 高中的时候我喜欢班上一个同学，高考完表白被拒绝，大学事情完全放不下对方，但是对方已经有男朋友了。对方的一个群发短信都能让你高兴很久很久 工作之后还是念念不忘，一个偶然的机会，QQ又联系上了。知道他们分手了，异地网聊了一个多月她要去深圳和姐姐做外贸。我并没有让她来北京，我只是说做你想住的。大不了过几个月我就去深圳。结果一个月后，她说分了，我被拉黑了，她和前男友又好了。我还想着离职去深圳。被领导约谈了6次。 人的执念太重了，不要高估自己的控制了。 贪污的永远贪不够，赌徒永远都说戒毒，永远解不了 五阴盛苦这个就复杂了说实话我不能完全理解 这里面还讲述了佛家的贪嗔痴 贪嗔痴贪段王爷的贪恋美色 嗔白夫人 - 小时候的花衣服，白副帮主的死，萧峰的陷害，段王爷的加害 痴鸠摩智 对武学的痴 金庸小说的改版金庸小说是不停的研磨出来的不得不佩服 天龙八部经历三个大的版本改动其中金庸自己草稿上改动就不知道多少了 现在的网络小说就不行了，定期更新，关注人多了，想停下来修改都难 逍遥门 - 前期写的不错，后面就不怎么样了三体 - 不错但是不是武侠了 不写了明天还要去医院做手术呢 缅怀这位武侠界的 泰山北斗小时候用黑白电视追剧 您的作品 是我们的回忆您的用心 是我们的回味您的离开 是我们的损失 感谢您，以及您的作品一路走好","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"share","slug":"share","permalink":"http://www.kylinhuang.cn/tags/share/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"下载资源 方法","slug":"资源/download/下载资源 方法","date":"2018-10-27T05:19:44.242Z","updated":"2018-12-01T03:35:16.349Z","comments":true,"path":"2018/10/27/资源/download/下载资源 方法/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/27/资源/download/下载资源 方法/","excerpt":"","text":"下载资源 方法电影资源pniao 审核高 基本没有抢先版 片源可靠 80s 更新快 含有抢先版 连接不太可靠 bt电影天堂 电影天堂 下载工具MAC破解版迅雷 mac/win链接: https://pan.baidu.com/s/1cAsHfulruF2fTCcpcOQ4hw 提取码: 65pv FOLX5 macFOLX5官网 proxyee-down mac/win百度云下载慢 proxyee-down 帮你解决 Proxyee Down 使用教程 speedpan winspeedpan官网：http://speedpan.com/ aria2 mac/winAria2是一款免费开源跨平台且不限速的多线程下载软件，Aria2的优点是速度快、体积小、资源占用少；支持 HTTP / FTP / BT / Magnet 磁力链接等类型的文件下载；支持 Win、Mac、Linux系统，甚至在树莓派、NAS、路由器等设备上都能安装它。 下载地址 敏感资源磁力搜索BT升级离线方式论坛黑科云http://lx.heikeyun.net/login.aspx","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"下载","slug":"下载","permalink":"http://www.kylinhuang.cn/tags/下载/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"android 编译问题 - Could not find play-services-basement.aar","slug":"android/problem/android 编译问题_play-services-basement","date":"2018-10-26T04:39:54.397Z","updated":"2019-02-19T03:12:48.120Z","comments":true,"path":"2018/10/26/android/problem/android 编译问题_play-services-basement/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/26/android/problem/android 编译问题_play-services-basement/","excerpt":"","text":"最近 要发布版本 遇到一个问题 1234Could not find play-services-basement.aar (com.google.android.gms:play-services-basement:15.0.1).Searched in the following locations: https://jcenter.bintray.com/com/google/android/gms/play-services-basement/15.0.1/play-services-basement-15.0.1.aar 无论是否开启vpn都是这样的 访问 https://jcenter.bintray.com/com/google/android/gms/play-services-basement/15.0.1/play-services-basement-15.0.1.aar 12345678&#123; errors: [ &#123; status: 404, message: &quot;Could not find resource&quot; &#125; ]&#125; 访问https://repo.jfrog.org/artifactory/libs-release-bintray/com/google/android/ 发现目录下 gcm 没有了 解决问题下载aar 文件下载地址mvnrepository 选择 版本点击 aar 下载到本地 引入 aar 文件arr 文件放入 项目中的lib目录下 在项目 build.gradle 添加引用aar 在 dependencies 下添加 1234dependencies &#123; compile(name: &apos;play-services-basement-15.0.1&apos;, ext: &apos;aar&apos;)&#125; 屏蔽 所有库中的 play-services-basement在项目 build.gradle 添加引用aar 在 build.gradle 根节点下添加 123configurations &#123; all*.exclude group: &apos;com.google.android.gms&apos;, module: &apos;play-services-basement&apos;&#125; 搞定了 文章部分连接采用 短连接需要等待几秒跳转 最近google 出现不少问题 google 欧洲反垄断罚金 android 系统 手机策略变革 看来 还是有个企业的内网仓库 比较好啊相关的库 先从内网仓库获取 速度快稳定","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"problem","slug":"problem","permalink":"http://www.kylinhuang.cn/tags/problem/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android 库依赖问题","slug":"android/base/android_lib_depend","date":"2018-10-25T09:52:09.963Z","updated":"2018-10-26T02:32:04.655Z","comments":true,"path":"2018/10/25/android/base/android_lib_depend/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/25/android/base/android_lib_depend/","excerpt":"","text":"android 库依赖问题原因 库版本不一致 com.android.support的包版本号要保持一致 ，google gcm 与 firebase不一致 重复库 开源库中 包含 本项目中的库 解决方法 修改自己项目中的com.android.support的版本号，与所依赖的库版本号一致，但是当我们依赖的库中的com.android.support版本号有好几个版本就不行了。（不推荐） 依赖第三方库时候排除掉对com.android.support包的依赖，这样自己的项目随便依赖什么版本都可以，但是这种方法需要你先找到哪些库存在冲突 通过groovy脚本强制修改冲突的依赖库版本号 （推荐） 解决问题查看依赖报告命令行 ./gradlew :app:dependencies 查看 项目库依赖关系 排除传递性依赖12345678910111213141516171819202122232425262728293031323334353637+--- com.android.support:support-v4:27.1.1| +--- com.android.support:support-compat:27.1.1| | +--- com.android.support:support-annotations:27.1.1| | \\--- android.arch.lifecycle:runtime:1.1.0| | +--- android.arch.lifecycle:common:1.1.0| | \\--- android.arch.core:common:1.1.0| +--- com.android.support:support-media-compat:27.1.1| | +--- com.android.support:support-annotations:27.1.1| | \\--- com.android.support:support-compat:27.1.1 (*)| +--- com.android.support:support-core-utils:27.1.1| | +--- com.android.support:support-annotations:27.1.1| | \\--- com.android.support:support-compat:27.1.1 (*)| +--- com.android.support:support-core-ui:27.1.1| | +--- com.android.support:support-annotations:27.1.1| | +--- com.android.support:support-compat:27.1.1 (*)| | \\--- com.android.support:support-core-utils:27.1.1 (*)| \\--- com.android.support:support-fragment:27.1.1| +--- com.android.support:support-compat:27.1.1 (*)| +--- com.android.support:support-core-ui:27.1.1 (*)| +--- com.android.support:support-core-utils:27.1.1 (*)| +--- com.android.support:support-annotations:27.1.1| +--- android.arch.lifecycle:livedata-core:1.1.0| | +--- android.arch.lifecycle:common:1.1.0| | +--- android.arch.core:common:1.1.0| | \\--- android.arch.core:runtime:1.1.0| | \\--- android.arch.core:common:1.1.0| \\--- android.arch.lifecycle:viewmodel:1.1.0+--- com.android.support:appcompat-v7:27.1.1| +--- com.android.support:support-annotations:27.1.1| +--- com.android.support:support-core-utils:27.1.1 (*)| +--- com.android.support:support-fragment:27.1.1 (*)| +--- com.android.support:support-vector-drawable:27.1.1| | +--- com.android.support:support-annotations:27.1.1| | \\--- com.android.support:support-compat:27.1.1 (*)| \\--- com.android.support:animated-vector-drawable:27.1.1| +--- com.android.support:support-vector-drawable:27.1.1 (*) 12345这里对gradle dependencies中的-&gt;、 (*)进行解释固定版本: 唯一的依赖固定版本(*):还存在该库其他版本的依赖或者间接依赖，并且默认选择(*)所标注的版本。这里rxjava版本就是使用rxbinding里的2.0.2版本1-&gt;版本2(*):还存在该库其他版本的依赖或者间接依赖，并且并且选择版本2。这里rxandroid版本就是使用2.0.1 强制制定一个版本 gradle会自动帮我们强制依赖最高版本的jar包 修改默认解决策略方法，不然很难发现版本冲突 取消gradle的默认高版本统一依赖，在bulid.gradle中添加： //取消gradle默认统一使用高版本依赖的策略（gradle默认依赖冲突解决策略） 12345configurations.all&#123; resolutionStrategy&#123; failOnVersionConflict() &#125; &#125; 排除传递性依赖的方法如下 1234compile(&apos;org.hibernate:hibernate-core:3.6.3.Final&apos;)&#123; exclude group:&quot;org.slf4j&quot;,module:&quot;slf4j-api&quot; //transitive=false &#125; 强制制定一个版本 123456configurations.all&#123; resolutionsStrategy&#123; force &apos;org.slf4j:slf4j-api:1.7.24&apos; &#125;&#125; 依赖方式 依赖类型 意义 Compile 默认配置，该依赖会参与编译并且打包到所有的build type以及flavors的apk中 Provided 对所有的build type以及flavors来说只在编译时使用，只参与编译并不打包到最终apk APK 只会打包到apk文件中而不参与编译，所以不能在代码中直接调用jar中的类或方法，否则在编译时会报错 - - - - Test compile 仅仅是针对单元测试代码编译以及最终打包测试apk时有效，而对正常的debug或者release apk包不起作用。 Debug compile 仅仅针对debug模式的编译和最终的debug打包时有效。 Release compile 仅仅针对release模式的编译和最终的release打包时有效 依赖远程文件compile &#39;io.reactivex.rxjava2:rxandroid:2.0.1&#39; 依赖本地文件当前模块下libs文件夹下的全部jar文件compile fileTree(include: [&#39;*.jar&#39;], dir: &#39;libs&#39;) 指定路径下的全部jar文件compile fileTree(dir: &#39;../librarymodule/libs&#39;, include: &#39;*.jar&#39;) 加载aar文件 在项目build.gradle中 添加 12345repositories &#123; flatDir &#123; dirs &apos;libs&apos; &#125;&#125; 这意味着系统将在libs目录下搜索依赖。同样的如果你愿意的话可以加入多个目录。这里系统直接加载libs文件夹下的aar文件 compile(name: &#39;aar的名字（不用加后缀）&#39;, ext: &#39;aar&#39;) 依赖本地库工程compile project(&#39;:librarymodule&#39;) 冲突的解决方法先来看看几种不同的写法对库的加载有何区别 // 下载包含该库在内的其他所依赖的所有库compile &#39;io.reactivex.rxjava2:rxandroid:2.0.1&#39; // 只下载该库，其他所依赖的所有库不下载compile ‘io.reactivex.rxjava2:rxandroid:2.0.1@aar’ // 在使用@aar的前提下还能下载其他依赖库，则需要添加transitive=true的条件compile (&quot;io.reactivex.rxjava2:rxandroid::2.0.1@aar&quot;) { transitive=true } // 去除某一个依赖库compile (&quot;io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroid&quot;) { transitive=true exclude group: &#39;io.reactivex.rxjava2&#39;, module: &#39;rxjava&#39; } configurationsconfigurations - 项目中的所有rxjava2引用都去除 configurations { all*.exclude group: &#39;io.reactivex.rxjava2&#39;, module: &#39;rxjava&#39; } 或者 configurations { compile.exclude module: &#39;rxjava&#39; } configurations DSL还可以通过Force强制约束某个库的版本，比如我这里将appcompat-v7包限定为25.1.0 12345configurations.all &#123; resolutionStrategy &#123; force &quot;com.android.support:appcompat-v7:25.1.0&quot; &#125;&#125; 外部配置依赖版本我们新建一个config.gradle作为配置文件 12345678910111213141516ext &#123; androidGradleVersion = &apos;2.3.1&apos; AndroidSupportVersion = &apos;25.3.1&apos; AndroidConstraintLayoutVerson = &apos;1.0.2&apos; compileSdkVersion = 25 buildToolsVersion = &apos;25.0.2&apos; defaultConfig = [ applicationId : &quot;com.renyu.gradledemo&quot;, minSdkVersion : 15, targetSdkVersion : 25, versionCode : 1, versionName : &quot;1.0&quot; ]&#125; 其中defaultConfig是一个map键值对，有别于上方的公共配置，这样看起来更清晰简洁 这里我们需要使用apply from来引用config.gradle。同理当你的gradle脚本太大的时候，你可以按照具体任务类型将一个大gradle脚本拆分成几个子脚本，然后分别apply from引入到主脚本中。 1234567891011121314151617181920212223242526// 这里的apply是为了让子模块使用apply from: &quot;config.gradle&quot;buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; // root下build.gradle使用 apply from: &quot;config.gradle&quot; classpath &quot;com.android.tools.build:gradle:$androidGradleVersion&quot; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; jcenter() &#125;&#125;task clean(type: Delete) &#123; delete rootProject.buildDir&#125; 再看看app模块下的build.gradle的配置 123456789101112131415161718192021222324252627282930apply plugin: &apos;com.android.application&apos;android &#123; compileSdkVersion rootProject.ext.compileSdkVersion buildToolsVersion rootProject.ext.buildToolsVersion defaultConfig &#123; applicationId rootProject.ext.defaultConfig.applicationId minSdkVersion rootProject.ext.defaultConfig.minSdkVersion targetSdkVersion rootProject.ext.defaultConfig.targetSdkVersion versionCode rootProject.ext.defaultConfig.versionCode versionName rootProject.ext.defaultConfig.versionName testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot; &#125; buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125;&#125;dependencies &#123; compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;]) androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, &#123; exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos; &#125;) compile &quot;com.android.support:appcompat-v7:$rootProject.ext.AndroidSupportVersion&quot; compile &quot;com.android.support.constraint:constraint-layout:$rootProject.ext.AndroidConstraintLayoutVerson&quot; testCompile &apos;junit:junit:4.12&apos;&#125; layout进行模块化分包对layout进行模块化分包 main模块与main2模块他们的布局是相互独立保存的，没有堆叠在一起。那么这个是怎么做到的呢？之前大家从eclipse直接转项目到Android Studio上的时候， 不知道有没有注意到在app模块下的build.gradle有一个DSL叫sourceSets，通过修改sourceSets中的属性，可以指定哪些源文件（或文件夹下的源文件）要被编译，哪些源文件要被排除。 Gradle就是通过它实现项目的布局定义。Android Studio插件默认实现了两个sourceSet：main和test。每个sourceSet都提供了一系列的属性，通过修改这些属性，可以定义该sourceSet所包含的源文件，比如java.srcDirs，res.srcDirs 12345678910sourceSets &#123; main &#123; java res &#125; test &#123; java res &#125;&#125; 实现 步骤 按照自己的项目需求建立layout目录，例如本文就是/alllayouts/main/layout与/alllayouts/main2/layout在module对应的build.gradle下添加sourceSets配置 123456789sourceSets &#123; main &#123; res.srcDirs = [ &apos;src/main/res/alllayouts/main&apos;, &apos;src/main/res/alllayouts/main2&apos;, &apos;src/main/res&apos; ] &#125; &#125; 多渠道打包NDK篇abiFilters可以优先适配需要适配的cpu，其他做兼容处理。如本例我们放置了armeabi、armeabi-v7a、x86三种类型CPU的so，其他的就让手机自己去做兼容处理去了 1234ndk &#123; //选择要添加的对应cpu类型的.so库。 abiFilters &apos;armeabi&apos;, &apos;armeabi-v7a&apos;, &apos;x86&apos; // 还可以添加 &apos;armeabi-v8a&apos;, &apos;x86_64&apos;, &apos;mips&apos;, &apos;mips64&apos;&#125; 编译出错查看详情输出较详细的信息gradlew compileDebug --stacktrace 后面加上-info或者-debug的选项得到更详细的信息 gradlew compileDebug --stacktrace -info 或者gradlew compileDebug --stacktrace -debug gradlew compileDebugSources --stacktrace -info","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android base","slug":"android-base","permalink":"http://www.kylinhuang.cn/tags/android-base/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"webview 与 JS 交互","slug":"android/base/webview_js_inferface","date":"2018-10-24T03:47:23.511Z","updated":"2019-02-13T14:18:45.240Z","comments":true,"path":"2018/10/24/android/base/webview_js_inferface/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/24/android/base/webview_js_inferface/","excerpt":"","text":"参考 webview 与 JS 交互Android与JS通过WebView互相调用方法，实际上是： 一 Android去调用JS的代码 通过WebView的loadUrl（） 通过WebView的evaluateJavascript（） 二 JS去调用Android的代码 通过WebView的addJavascriptInterface（）进行对象映射 通过 WebViewClient 的shouldOverrideUrlLoading()方法回调拦截 url 通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息 Android去调用JS的代码方式1：通过WebView的loadUrl（） 在js 中声明方法 1234567// JS代码&lt;script&gt; // Android需要调用的方法 function callJS()&#123; alert(&quot;Android调用了JS的callJS方法&quot;); &#125;&lt;/script&gt; 在android 中 调用 1234// 注意调用的JS方法名要对应上// 调用javascript的callJS()方法mWebView.loadUrl(&quot;javascript:callJS()&quot;); 特别注意：JS代码调用一定要在 onPageFinished（） 回调之后才能调用，否则不会调用。 onPageFinished()属于WebViewClient类的方法，主要在页面加载结束时调用 方式2：通过WebView的evaluateJavascript（）Android 4.4 后才可使用 在js 中声明方法 1234567// JS代码&lt;script&gt; // Android需要调用的方法 function callJS()&#123; alert(&quot;Android调用了JS的callJS方法&quot;); &#125;&lt;/script&gt; 在android 中 调用 12345678// 只需要将第一种方法的loadUrl()换成下面该方法即可mWebView.evaluateJavascript（&quot;javascript:callJS()&quot;, new ValueCallback&lt;String&gt;() &#123; @Override public void onReceiveValue(String value) &#123; //此处为 js 返回的结果 &#125; &#125;);&#125; WebView控件功能强大，除了具有一般View的属性和设置外，还可以对url请求、页面加载、渲染、页面交互进行强大的处理。 对比 调用方式 优点 缺点 使用场景 loadUrl() 方法简介 效率低 获取返回值麻烦 不需要返回值 ，对性能要求低时 evaluateJavascript() 效率高 兼容性差 android 4.4以上可用 android4.4+ 可用混合使用 12345678910111213// Android版本变量final int version = Build.VERSION.SDK_INT;// 因为该方法在 Android 4.4 版本才可使用，所以使用时需进行版本判断if (version &lt; 18) &#123; mWebView.loadUrl(&quot;javascript:callJS()&quot;);&#125; else &#123; mWebView.evaluateJavascript（&quot;javascript:callJS()&quot;, new ValueCallback&lt;String&gt;() &#123; @Override public void onReceiveValue(String value) &#123; //此处为 js 返回的结果 &#125; &#125;);&#125; JS通过WebView调用 Android 代码方式1：通过 WebView的addJavascriptInterface（）进行对象映射 定义一个与JS对象映射关系的Android类：AndroidtoJs 12345678910// 继承自Object类public class AndroidtoJs extends Object &#123; // 定义JS需要调用的方法 // 被JS调用的方法必须加入@JavascriptInterface注解 @JavascriptInterface public void hello(String msg) &#123; System.out.println(&quot;JS调用了Android的hello方法&quot;); &#125;&#125; 在Android里通过WebView设置Android类与JS代码的映射 123456789101112131415mWebView = (WebView) findViewById(R.id.webview);WebSettings webSettings = mWebView.getSettings();// 设置与Js交互的权限webSettings.setJavaScriptEnabled(true);// 通过addJavascriptInterface()将Java对象映射到JS对象//参数1：Javascript对象名//参数2：Java对象名mWebView.addJavascriptInterface(new AndroidtoJs(), &quot;test&quot;);//AndroidtoJS类对象映射到js的test对象// 加载JS代码 mWebView.loadUrl(&quot;&quot;); html 中设置 调用 1234567891011121314&lt;script&gt; function callAndroid()&#123; // 由于对象映射，所以调用test对象等于调用Android映射的对象 test.hello(&quot;js调用了android中的hello方法&quot;); &#125;&lt;/script&gt;&lt;body&gt; //点击按钮则调用callAndroid函数 &lt;button type=&quot;button&quot; id=&quot;button1&quot; onclick=&quot;callAndroid()&quot;&gt;&lt;/button&gt; &lt;/body&gt; 方式2：通过 WebViewClient 的方法shouldOverrideUrlLoading ()回调拦截 url 在JS约定所需要的Url协议 1234567891011&lt;script&gt; function callAndroid()&#123; /*约定的url协议为：js://webview?arg1=111&amp;arg2=222*/ document.location = &quot;js://webview?arg1=111&amp;arg2=222&quot;; &#125;&lt;/script&gt;&lt;!-- 点击按钮则调用callAndroid（）方法 --&gt; &lt;body&gt; &lt;button type=&quot;button&quot; id=&quot;button1&quot; onclick=&quot;callAndroid()&quot;&gt;点击调用Android代码&lt;/button&gt; &lt;/body&gt; 在android shou通过WebViewClient复写shouldOverrideUrlLoading （） 在android shouldOverrideUrlLoading 中可以监听到 加载的url 匹配参数 方式3：通过 WebChromeClient 的onJsAlert()、onJsConfirm()、onJsPrompt（）方法回调拦截JS对话框alert()、confirm()、prompt（） 消息","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/tags/android/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"TCP and UDP","slug":"android/base/TCP","date":"2018-10-24T02:31:15.953Z","updated":"2018-10-24T03:41:42.671Z","comments":true,"path":"2018/10/24/android/base/TCP/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/24/android/base/TCP/","excerpt":"","text":"TCP/IP是个协议组，可分为三个层次：网络层、传输层和应用层。 在网络层有IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议。 在传输层中有TCP协议与UDP协议。 在应用层有FTP、HTTP、TELNET、SMTP、DNS等协议。 因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。 TCP 是基于 TCP 协议实现的网络文本协议,属于传输层。UDP 是和TCP 对等的，属于传输层，UDP 和 TCP 有重要的区别。 TCPTCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来，其中的过程非常复杂， 我们这里只做简单、形象的介绍，你只要做到能够理解这个过程即可。我们来看看这三次对话的简单过程：主机A向主机B发出连接请求数据包： “我想给你发数据，可以吗？”，这是第一次对话； 主机B向主机A发送同意连接和要求同步（同步就是两台主机一个在发送，一个在接收，协调工作）的数据包：“可以，你什么时候发？”，这是第二次对话； 主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”，这是第三次对话。 三次“对话”的目的是使数据包的发送和接收同步，经过三次“对话”之后，主机A才向主机B正式发送数据。 UDPUDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！ UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。 比如，我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。 例如，在默认状态下，一次“ping”操作发送4个数据包（如图2所示）。大家可以看到，发送的数据包数量是4包，收到的也是4包（因为对方主机收到后会发回一个确认收到的数据包）。这充分说明了UDP协议是面向非连接的协议，没有建立连接的过程。正因为UDP协议没有连接的过程，所以它的通信效果高；但也正因为如此，它的可靠性不如TCP协议高。QQ就使用UDP发消息，因此有时会出现收不到消息的情况。 tcp协议和udp协议的差别 TCP UDP 是否连接 面向连接 面向非连接 传输可靠性 可靠 不可靠 应用场合 传输大量数据 少量数据 速度 慢 快","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android base","slug":"android-base","permalink":"http://www.kylinhuang.cn/tags/android-base/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"TCP","slug":"android/base/Http_Https","date":"2018-10-24T02:17:11.683Z","updated":"2018-10-24T03:12:35.297Z","comments":true,"path":"2018/10/24/android/base/Http_Https/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/24/android/base/Http_Https/","excerpt":"","text":"TCPTCP 建立连接三次握手 客户端发送一个带SYN标志的TCP报文到server。这是三次握手过程中的报文1。 server端回应client的，这是三次握手中的第2个报文。这个报文同一时候带ACK标志和SYN标志。因此它表示对刚才clientSYN报文的回应。同一时候又标志SYN给client，询问client是否准备好进行数据通讯。 客户必须再次回应服务段一个ACK报文，这是报文段3。 这个过程 很早在博客上有人这么解释 很生动 A 和 B 通话 A 询问 B 能不能听到 —- 第一次握手 B 听到 A的询问 回复 A 我能听到，你能不能听到 —- 第二次 A听到B的消息 通知B 我也能听到 —- 第三次 这样三次 才能保证 服务器 与客户端 连接正常 连接终止协议（四次挥手） TCP 客户端发送一个FIN。用来关闭客户到server的数据传送（报文段4）。 server收到这个FIN。它发回一个ACK，确认序号为收到的序号加1（报文段5）。 server关闭client的连接，发送一个FIN给client（报文段6）。 客户段发回ACK报文确认。并将确认序号设置为收到序号加1（报文段7）。 A 和 B 通话 挂断电话 A 通知 B 结束通话 挂断吧 —- 第一次握手 B 听到 A的挂断消息 回复A 收到挂断消息 挂了吧 —- 第二次 A 听到 B的消息 确认B接收到挂断消息 B挂断电话 系统发送提示音 —- 第三次 B 收到系统提示音 知道A已经挂端了 B也挂断了 —- 第四次","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android base","slug":"android-base","permalink":"http://www.kylinhuang.cn/tags/android-base/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Earn Cash - shorte.st","slug":"资源/earn_cash/Earn Cash - shorte.st","date":"2018-10-23T12:48:28.600Z","updated":"2018-10-23T13:41:37.398Z","comments":true,"path":"2018/10/23/资源/earn_cash/Earn Cash - shorte.st/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/23/资源/earn_cash/Earn Cash - shorte.st/","excerpt":"","text":"网赚 - shorte.st使用短连接 网赚 注册注册时候需要google 认证 需要翻墙 第一次注册 赠送 $3 赚钱方式Cash SurveysCash OffersEarn PointsPaidEmail® 邮件方式My Account &gt; Your Profile 选择查看邮件的钱数 好的 坐等邮件明天继续更新 兑换方式","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"云存储","slug":"云存储","permalink":"http://www.kylinhuang.cn/tags/云存储/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"Earn Cash - paid to read email","slug":"资源/earn_cash/Earn Cash - paid to read ","date":"2018-10-23T12:48:16.284Z","updated":"2018-11-02T11:11:16.331Z","comments":true,"path":"2018/10/23/资源/earn_cash/Earn Cash - paid to read /","link":"","permalink":"http://www.kylinhuang.cn/2018/10/23/资源/earn_cash/Earn Cash - paid to read /","excerpt":"","text":"网赚 - paid to read emailpaid to read email 注册注册时候需要google 认证 需要翻墙 第一次注册 赠送 $3 赚钱方式Cash SurveysCash OffersEarn PointsPaidEmail® 邮件方式My Account &gt; Your Profile 选择查看邮件的钱数 好的 坐等邮件明天继续更新 兑换方式","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"云存储","slug":"云存储","permalink":"http://www.kylinhuang.cn/tags/云存储/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"AnyChat","slug":"android/research/Android play","date":"2018-10-18T07:36:15.536Z","updated":"2018-10-18T07:38:51.734Z","comments":true,"path":"2018/10/18/android/research/Android play/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/18/android/research/Android play/","excerpt":"","text":"Android play1. mediaplay＋ surfaceView 2. VideoView 3. Jni play 4. 第三方 vitamio 5. 视频解码VLC ffmpeg MediaPlayer SurfaceView1 SurfaceView 用于显示SurfaceView 1采用双缓冲机制 ——－显示区 与缓冲区 这决定了它是播放器的最好选择2 SurfaceView 的独特支持 可以由子线程直接控制 但是必须由mainThread 创建 view 基本都是在mainThread控制 包括创建 与控制SurfaceView 的绘制可以在子线程完成 Code TestSurfaceView.Java SurfaceHolder可以把它当成surface的控制器，用来操纵surface mSurfaceView = (SurfaceView)this.findViewById(R.id.surfaceView_id); mSurfaceView.setZOrderOnTop(true); mSurHolder = mSurfaceView.getHolder(); mSurHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS); mSurHolder.addCallback(Callback); public interface Callback { /** 创建时被调用 */ public void surfaceCreated(SurfaceHolder holder); /**surface 改变的时候 */ public void surfaceChanged(SurfaceHolder holder, int format, int width, int height); /* 销毁 */ public void surfaceDestroyed(SurfaceHolder holder); } MediaPlayerAndroid的MediaPlayer包含了Audio和video的播放功能，在Android的界面上，Music和Video两个应用程序都是调用MediaPlayer实现的。MediaPlayer在底层是基于OpenCore(PacketVideo)的库实现的 private void playVideo() { try{ if(!isBusyPlay||count&gt;2){ Log.d(TAG, &quot;----------&gt;playVideo&quot;); count = 0; isBusyPlay = true; if(player != null){ player.reset(); }else{ player = new MediaPlayer(); ／／MediaPlayer mp = MediaPlayer.create(this, R.raw.test);//这时就不用调用setDataSource了 } ／／8 Listener player.setOnPreparedListener(this); player.setOnCompletionListener(this); player.setOnBufferingUpdateListener(this); player.setOnErrorListener(this); player.setDataSource(path); player.setDisplay(mSurHolder); player.setAudioStreamType(AudioManager.STREAM_MUSIC); player.setScreenOnWhilePlaying(true); player.prepareAsync(); }else{ count++; Log.d(TAG, &quot;----------&gt;busy playing&quot;); } //设置监听事件 }catch(Exception e){ Log.d(TAG, &quot;mediaplayer error: &quot;+e.getMessage()); } } OnInfoListener ——视频加载中的控制 需要地处协调701 702 player.setOnInfoListener(new OnInfoListener() { @Override public booleanonInfo(MediaPlayer mp, int what, int extra) { // TODO Auto-generated method stub return false; } }); VideoViewVideoView extends SurfaceView implements MediaPlayerControl 其实就是google 将surfaceView mediaplay 封装一层给开发者方便调用 使用android的VideoView任然存在有些不足，比如说系统带的控制条太难看，全屏播放时无法全屏。 MediaController mController = new MediaController(this); mVideoView.setMediaController(mController); // Play Video public void onStart() { mVideoView.setVideoURI(mUri); mVideoView.start(); super.onStart(); } Jni play在java成直接调用，C的播放底层直接控制播放器 与显示 底层控制其实更方便java成的Mediaplay 都是调用底层方法 private native final intnative_setMetadataFilter(Parcel request); private static native final void native_init(); private native final void native_setup(Object mediaplayer_this); private native final void native_finalize(); SurfaceView的核心其实SurfaceFlinger应用层对SurfaceView 很熟悉framework 层SurfaceFlinger很熟悉 对于SurfaceFlinger其实我也不太明白是知道由这么一回事 开机启动时候init 创建MediaServer SurfaceFinger而其他的Systrm server 是zygote vitamio感觉没什么多说的https://www.vitamio.org/en/农民伯伯： http://www.cnblogs.com/over140/ 最新版 把播放器设置为新的进程使用的时候要注意 视频解码VLChttp://www.videolan.org/vlc/ Github codehttp://git.oschina.net/cuiran/vlc-android http://xhc66.iteye.com/blog/797291http://www.dotblogs.com.tw/jaelys/archive/2012/06/20/72934.aspx ffmpeghttp://www.ffmpeg.org/https://github.com/havlenapetr/FFMpeghttps://github.com/appunite/AndroidFFmpeg http://3xin2yi.info/wwwroot/tech/doku.php/tech:multimedia:ffmpeghttp://blog.csdn.net/conowen/article/details/7255776 http://blog.csdn.net/gobitan/article/details/22750719","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"research","slug":"research","permalink":"http://www.kylinhuang.cn/tags/research/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"linphone","slug":"android/research/linphone","date":"2018-10-18T07:34:31.944Z","updated":"2018-10-22T07:55:17.950Z","comments":true,"path":"2018/10/18/android/research/linphone/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/18/android/research/linphone/","excerpt":"","text":"无意间发现 开源中国中有人回复 看见 以前的文章就想整理下 这是一份 2014年 研究视频通话 时候调研 的 文章 一直在有道笔记 linphone1 登陆 －－－ SetupActivity－saveCreatedAccount － native void setDefaultProxyConfig(long nativePtr,long proxyCfgNativePtr); 2 电话 －－－ ContactFragment－联系人LinphoneActivity.instance().setAddresGoToDialerAndCall(to, contact.getName(), contact.getPhotoUri());－－ CallManager.getInstance().inviteAddress(lAddress, false, isLowBandwidthConnection);－ native Object inviteAddressWithParams(long nativePtrLc,long to, long nativePtrParam); LinphoneActivity.instance().setAddresGoToDialerAndCall(to, contact.getName(), contact.getPhotoUri());5000250002null newOutgoingCall (String to, String displayName)50002null 3 电话监听 －－－LinphoneCore lc = LinphoneManager.getLcIfManagerNotDestroyedOrNull(); lc.addListener(mListener);LinphoneCoreListenerBase callState refreshCallList 声音 传输—??? 4 视频电话LinphoneManager.getInstance().addVideo();— native void enableCamera(long nativePtr, boolean enabled); native int updateCall(long ptrLc, long ptrCall, long ptrParams); 接受／取消 InCallActivity.instance().acceptCallUpdate(true);－－ nativevoid acceptCallUpdate(long nativePtr, long aCall, long params); AndroidVideoWindowImpl (SurfaceView renderingSurface, SurfaceView previewSurface, VideoWindowListener listener) VideoWindowListener—void onVideoRenderingSurfaceReady(AndroidVideoWindowImpl vw, SurfaceView surface); LinphoneManager.getLc().setVideoWindow(vw); mVideoView = surface;—void onVideoRenderingSurfaceDestroyed(AndroidVideoWindowImpl vw);—void onVideoPreviewSurfaceReady(AndroidVideoWindowImpl vw, SurfaceView surface); mCaptureView = surface; LinphoneManager.getLc().setPreviewWindow(mCaptureView);—void onVideoPreviewSurfaceDestroyed(AndroidVideoWindowImpl vw); native void setPreviewWindowId(long nativePtr, Object wid);LinphoneService switchCameraLinphoneManager.getLc().setVideoDevice(videoDeviceId);CallManager.getInstance().updateCall(); //LinphoneManager.getLc().setPreviewWindow(mCaptureView); AndroidVideoApi9JniWrapper - startRecording - onPreviewFrame － AndroidVideoApi5JniWrapper.putImage(nativePtr, data); nativevoid putImage(long nativePtr, byte[] buffer); Java_org_linphone_mediastream_video_capture_AndroidVideoApi5JniWrapper_putImageAndroidReaderContext camera.addCallbackBuffer(data); 聊天displayChatChatFragment sendTextMessage - native void sendChatMessage(long ptr, Object message, long messagePtr); C call java1 — globalStateClass = (jclass)env-&gt;NewGlobalRef(env-&gt;FindClass(“org/linphone/core/LinphoneCore$GlobalState”)); 账户1 创建 登陆 GenericLoginFragmentlogIn (String username, String password, String domain, boolean sendEcCalibrationResult)500015000150001@192.168.100.102false saveCreatedAccountString identity = “sip:” + username + “@” + domain;sip:50001@50001@192.168.100.102 AccountBuilder builder = new AccountBuilder(LinphoneManager.getLc()).setUsername(username)50001.setDomain(domain) 50001@192.168.100.102.setPassword(password);50001 saveNewAccountString identity = “sip:” + tempUsername + “@” + tempDomain; －sip:50001@50001@192.168.100.102 proxy += tempDomain; － sip:50001@192.168.100.102 addProxyConfig","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"research","slug":"research","permalink":"http://www.kylinhuang.cn/tags/research/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"AnyChat","slug":"android/research/Anycha","date":"2018-10-18T05:41:30.391Z","updated":"2018-10-22T07:55:12.836Z","comments":true,"path":"2018/10/18/android/research/Anycha/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/18/android/research/Anycha/","excerpt":"","text":"无意间发现 开源中国中有人回复 看见 以前的文章就想整理下 这是一份 2014年 研究视频通话 时候调研 的 文章 一直在有道笔记 与最新版本 AnyChat SDK 有差异 请谅解 不更新 AnyChat跨平台的音视频即时通讯解决方案，基于先进的H.264视频编码标准、AAC音频编码标准与P2P技术， 支持高清视频，整合了佰锐科技在音视频编码、多媒体通讯 Android2.3以上版本 音视频即时通讯：提供语音、视频一对一、一对多的实时通讯，支持高清视频和高品质音频效果。 音视频即时通讯：提供语音、视频一对一、一对多的实时通讯，支持高清视频和高品质音频效果。 录像：支持针对单个人的音视频录制、整个视频通话过程内容的合成音视频录制以及集中服务器保存录制 抓拍：可对本地视频和正在视频的对象进行抓拍； 文字聊天：支持多用户之间的文字交流； 透明通道：提供客户端之间、客户端跟服务器之间的数据通讯能力； 文件传输：支持客户端直接、客户端跟服务器之间的文件传输功能，支持断点续传； 动态设置音视频参数：提供音视频参数设置的接口，可以根据需要动态设置分辨率、码率、帧率等视频参数，满足各种应用场景的需求； 外部音视频输入：支持非标准采集设备以外的音视频源输入，满足更多的应用场景； 集成第三方外部音视频编解码器：可集成第三方音视频编解码器，满足特殊环境下面的硬件编解码要求 AnyChatBaseEvent public void OnAnyChatConnectMessage(boolean bSuccess);连接服务器消息, bSuccess表示是否连接成功 public void OnAnyChatLoginMessage(int dwUserId, int dwErrorCode);用户登录消息，dwUserId表示自己的用户ID号，dwErrorCode表示登录结果：0 成功，否则为出错代码 public void OnAnyChatEnterRoomMessage(int dwRoomId, int dwErrorCode);用户进入房间消息，dwRoomId表示所进入房间的ID号，dwErrorCode表示是否进入房间：0成功进入，否则为出错代码 public void OnAnyChatOnlineUserMessage(int dwUserNum, int dwRoomId);房间在线用户消息，进入房间后触发一次，dwUserNum表示在线用户数（包含自己），dwRoomId表示房间ID public void OnAnyChatUserAtRoomMessage(int dwUserId, boolean bEnter);用户进入/退出房间消息，dwUserId表示用户ID号，bEnter表示该用户是进入（TRUE）或离开（FALSE）房间 public void OnAnyChatLinkCloseMessage(int dwErrorCode);网络断开消息，该消息只有在客户端连接服务器成功之后，网络异常中断之时触发，dwErrorCode表示连接断开的原因 功能1 视频通话anychatcallcenter —— 上线下线通知 视频通话提醒 视频终端处理 2 认证 - 上传照片 视频AnyChatSelfRecord— 3 AnyChatFeatures 1 音视频互动 —简单功能实现 ok 详细问题解决 参考anychatcallcenter 2 文字聊天—功能ok 问题 1.消息过滤— OnAnyChatTextMessage获取的是所有的消息 同时接收到多人信息 2.消息记录// 文字聊天通知接口public interface AnyChatTextMsgEvent { // 文字消息通知,dwFromUserid表示消息发送者的用户ID号，dwToUserid表示目标用户ID号，可能为-1，表示对大家说，bSecret表示是否为悄悄话 public void OnAnyChatTextMessage(int dwFromUserid, int dwToUserid, boolean bSecret, String message);} 3 透明通道 －－－文字聊天 // 数据传输通知接口public interface AnyChatTransDataEvent { // 文件传输回调函数定义 public void OnAnyChatTransFile(int dwUserid, String FileName, String TempFilePath, int dwFileLength, int wParam, int lParam, int dwTaskId); // 透明通道数据回调函数定义 public void OnAnyChatTransBuffer(int dwUserid, byte[] lpBuf, int dwLen); // 扩展透明通道数据回调函数定义 public void OnAnyChatTransBufferEx(int dwUserid, byte[] lpBuf, int dwLen, int wparam, int lparam, int taskid); // SDK Filter 通信数据回调函数定义 public void OnAnyChatSDKFilterData(byte[] lpBuf, int dwLen);} 4 文件传输 －－－anyChatSDK.TransFile(mUserID, strFilePath, 0, 0, 0, mAnyChatOutParam); // 文件传输接受@Overridepublic void OnAnyChatTransFile(int dwUserid, String FileName,String TempFilePath, int dwFileLength, int wParam, int lParam, int dwTaskId) ｛｝ http://www.anychat.cn/faq/index.php?action=artikel&amp;cat=2&amp;id=175&amp;artlang=zh 关于视频帧率与关键帧间隔的参数设置可参考如下原则： 1、帧率越高，视频越流畅（最大值为25fps），同时帧率也会对码率和CPU资源占用产生一定的影响，通常的建议是互联网应用（8-12fps），局域网应用（18-25fps）； 2、关键帧间隔是指在编码的过程中，两个关键帧之间非关键帧的数量，值越大，码率越小，但会降低视频的质量，值越小，码率越大，视频质量较好，但不宜过小，通常的建议是互联网应用（帧率的3、4倍），局域网应用（等于帧率），不要小于帧率； 关于本地视频编码的预设参数：BRAC_SO_LOCALVIDEO_PRESETCTRL，其取值范围为1-5，主要用来控制CPU资源占用率和画面细节，值越小，编码时的CPU占用率越低，但会损失对画面细节的处理；值越大，编码时的CPU占用率越高，但对画面细节的处理会更细腻，该参数主要针对高码率有效，低码率时由于码率的限制，视频画面细节无法表现出来，所以低码率模式下，可以将该参数调节低一些，以降低CPU的利用率。 关于本地视频编码的码率参数：BRAC_SO_LOCALVIDEO_BITRATECTRL，单位为bps，码率越小，视频质量越差；码率越高，视频质量越好，同时该参数还与视频画面的分辩率有关，不同的分辨率有不同的取值范围，如在互联网应用状态下，分辩率是176x144典型的取值范围是（10kbps ~ 60kbps），分辨率是320x240典型的取值范围是50kbps ~ 120kbps，如果是局域网应用，则码率可适当提高。 关于本地视频编码的质量因子参数：BRAC_SO_LOCALVIDEO_QUALITYCTRL，取值范围为1-6，值越小，画面质量越低，输出码率也越低，值越大，画面质量越高，输出码率也越高。 关于“平均码率模式”和“质量因子模式”两种视频质量控制模式的区别和应用，可参考如下原则： 1、“平均码率模式”：视频编码时以输出码率为优先考虑条件，当画面静止时，输出的码率较低，动态画面码率会较高，瞬时码率可能会超过设置的参数（最高不会超过10%），但是其输出的视频数据平均码率将会维持在设置的参数附近，当画面运动量过大时，编码器为了维持平均码率，将会损失画面的质量，通常互联网应用可采用该模式； 2、“质量因子模式”：当码率参数设置为0时，该模式生效，视频编码时以视频质量为优先考虑条件，静止的画面和动态画面将会用不同的量化因子进行编码，维持在一个固定的画面质量下，当画面静止时，码率较低，当画面运动时，码率较高，通常局域网应用可采用该模式。由于该模式下没有限制码率，所以大运动量画面时，为了保持固定的画面质量，码率的变化将会比较大，所以该模式不适合于互联网应用。 3、如果希望在互联网的环境下获得较高质量的视频效果（在网络带宽许可的情况下），建议采用“平均码率模式”，只是可以适当提高视频质量参数（VideoQuality）的值，视频码率参数根据需要进行设置。低码率，配置较低的视频质量，高码率就需要配置较高的视频质量。 注：“AnyChat Platform Core SDK” V4.0版本开始支持每个用户单独设置视频采集分辩率，当上层应用程序没有设置视频采集分辨率以及视频质量控制相关参数时，客户端将采用服务器默认配置参数。 http://www.anychat.cn/faq/index.php?action=artikel&amp;cat=2&amp;id=243&amp;artlang=zh 目前常见的网络主要有四种类型：ADSL拨号接入方式、光纤接入方式、3G拨号接入方式、局域网。 ADSL拨号接入方式是一种非对称的网络接入，下行流量通常有2Mbps、4Mbps、6Mbps等，而上行流量通常都是512kbps，即上行速率和下行速率是不对称的。此时如果需要使用AnyChat进行音视频的交互，则上传流量只能用512kbps作为参考值，适合的分辨率有：QVGA（320x240）、CIF（352x288）、VGA（640x480）。 光纤接入方式是一种对称的网络接入，通常上行速率和下行速率相同。光纤接入的网络通常非常稳定，适合传输较高质量的视频，当网络带宽允许的情况下，适合的分辩率有：QVGA（320x240）、CIF（352x288）、VGA（640x480）、SVGA（800x600）、720P（1280x720）。 3G拨号接入方式也是一种非对称的网络接入，不同的网络运营商所提供的网络带宽各不相同，而且和ADSL一样上行网络带宽远远低于下行网络带宽，如联通的3G宣传的7.2Mbps网络带宽便是指下行带宽，而且3G的网络带宽质量与位置相关，如离信号基站越近，质量就越好，同一个基站下使用3G的用户越少，质量也就越好。在这种接入方式下，适合上传的分辨率有：QVGA（320x240）、CIF（352x288）。 局域网，或是专网网络带宽都非常充裕，选择多大的分辨率主要根据PC的性能来决定，通常局域网可以选择CIF（352x288）、VGA（640x480）、SVGA（800x600）、720P（1280x720）等分辨率。 AnyChat质量模式分辨率、码率对应表（单位：kbps） Static—静态画面， motion—运动图像峰值， agv—平均码率 AnyChat的视频质量分为“码率控制模式”和“质量控制模式”，在“码率控制模式”下，视频流的目标码率会在设定码率的上下浮动，而在“质量控制模式”下，目标码率会根据视频图像的运动场景自动进行调节，静态画面时输出较低的码率，而运动画面时，会输出较高的码率，以保障视频的细节得到展现。通常来说，光纤接入方式、局域网等网络带宽比较充裕的场合可使用“质量控制模式”，而ADSL拨号接入和3G拨号接入则采用“码率控制模式”比较合适。 关于视频的帧率，帧率越高，视频越流畅，同时给网络的压力也会增大，输出的码率也会增加，通常来说，光纤接入方式、局域网等网络带宽比较充裕的场合可使用高帧率，如20fps、25fps，而ADSL拨号接入和3G拨号接入则采用低帧率比较合适，如8fps、12fps等 总结手机用户 网络情况 有wifi 3G 4G 2G 分辨率 建议 QVGA（320x240）、CIF（352x288）帧率 建议8-12fps 码率分辩率是176x144典型的取值范围是10kbps ~ 60kbps，－－－no分辨率是320x240典型的取值范围是50kbps ~ 120kbps，－－no 默认分辨率 320-240 码率在100-500都比较合适－－－wifi 模式下 实际测试的 视频质量参数public static final int VIDEO_QUALITY_GOOD = 3; // 中等视频质量// 设置本地视频编码的质量AnyChatCoreSDK.SetSDKOptionInt(AnyChatDefine.BRAC_SO_LOCALVIDEO_QUALITYCTRL, configEntity.videoQuality);关于本地视频编码的质量因子参数：BRAC_SO_LOCALVIDEO_QUALITYCTRL，取值范围为1-6，值越小，画面质量越低，输出码率也越低，值越大，画面质量越高，输出码率也越高。 预设参数：默认3 （3-4）BRAC_SO_LOCALVIDEO_PRESETCTRL，其取值范围为1-5，主要用来控制CPU资源占用率和画面细节，值越小，编码时的CPU占用率越低，但会损失对画面细节的处理；值越大，编码时的CPU占用率越高，但对画面细节的处理会更细腻，该参数主要针对高码率有效，低码率时由于码率的限制，视频画面细节无法表现出来，所以低码率模式下，可以将该参数调节低一些，以降低CPU的利用率。","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"research","slug":"research","permalink":"http://www.kylinhuang.cn/tags/research/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android 监听 支付宝微信 消息","slug":"android/pay/android 监听支付宝微信转账消息","date":"2018-10-18T05:12:09.906Z","updated":"2019-04-18T06:17:07.391Z","comments":true,"path":"2018/10/18/android/pay/android 监听支付宝微信转账消息/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/18/android/pay/android 监听支付宝微信转账消息/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}],"tags":[],"keywords":[{"name":"pay","slug":"pay","permalink":"http://www.kylinhuang.cn/categories/pay/"}]},{"title":"android shadowsocksr-android","slug":"android/Open source project/shadowsocksr-android","date":"2018-10-11T06:18:25.310Z","updated":"2018-10-12T05:06:09.684Z","comments":true,"path":"2018/10/11/android/Open source project/shadowsocksr-android/","link":"","permalink":"http://www.kylinhuang.cn/2018/10/11/android/Open source project/shadowsocksr-android/","excerpt":"","text":"参考 shadowsocksr-androidJDK 1.8SBT 0.13.0+Android SDK Build Tools 25+ Android Support Repository and Google Repository (see build.sbt for version)Android NDK r12b+GO [error] sbt.librarymanagement.ResolveException: unresolved dependency: org.scala-android#sbt-android;1.6.10: not found[error] unresolved dependency: com.timushev.sbt#sbt-updates;0.1.10: not found[error] unresolved dependency: net.virtual-void#sbt-dependency-graph;0.8.2: not found[error] at sbt.internal.librarymanagement.IvyActions$.resolveAndRetrieve(IvyActions.scala:332)","categories":[{"name":"Open source project","slug":"Open-source-project","permalink":"http://www.kylinhuang.cn/categories/Open-source-project/"}],"tags":[{"name":"shadowsocksr-android","slug":"shadowsocksr-android","permalink":"http://www.kylinhuang.cn/tags/shadowsocksr-android/"}],"keywords":[{"name":"Open source project","slug":"Open-source-project","permalink":"http://www.kylinhuang.cn/categories/Open-source-project/"}]},{"title":"Flutter app 7.Me","slug":"android/Flutter/app/Flutter app 7.Me","date":"2018-09-28T05:14:07.207Z","updated":"2018-10-23T08:26:50.846Z","comments":true,"path":"2018/09/28/android/Flutter/app/Flutter app 7.Me/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/28/android/Flutter/app/Flutter app 7.Me/","excerpt":"","text":"Flutter app 7.Me1.修改UI创建启动页pages/MyTabPage.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168class MyTabPage extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new MyTabPageState(); &#125;&#125;class MyTabPageState extends State&lt;MyTabPage&gt; &#123; static const double IMAGE_ICON_WIDTH = 30.0; static const double ARROW_ICON_WIDTH = 16.0; var titleTextStyle = new TextStyle(fontSize: 16.0); // 箭头 var rightArrowIcon = new Image.asset( &apos;images/ic_arrow_right.png&apos;, width: ARROW_ICON_WIDTH, height: ARROW_ICON_WIDTH, ); @override void initState() &#123; super.initState(); &#125; @override Widget build(BuildContext context) &#123; return new ListView( children: &lt;Widget&gt;[ _buildAvatar(), new Divider( height: 1.0, ), _buildMessages(), new Divider( height: 1.0, ), _buildCoupons(), new Divider( height: 1.0, ), ], ); &#125; _buildAvatar() &#123; User user = new UserHelper().getUser(); var avatarContainer = new Container( color: const Color(0xFFF39B63), height: 200.0, child: new Center( child: new Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ new Image.asset(&quot;images/ic_avatar_default.png&quot;, width: 60.0 ), new Padding( padding: new EdgeInsets.only(top:5.0, bottom: 5.0), child: new Text( user.account, style: new TextStyle( fontSize: 18.0, color: const Color(0xffFFFFFF), ), ), ), new Padding( padding: new EdgeInsets.only(top:5.0, bottom: 5.0), child: new Text( &quot; Manage Account &quot;, style: new TextStyle( fontSize: 23.0, color: const Color(0xffFFFFFF), ), ), ), ], ), ) ); return new GestureDetector( onTap: () &#123;// DataUtils.isLogin().then((isLogin) &#123;// if (isLogin) &#123;// // 已登录，显示用户详细信息// _showUserInfoDetail();// &#125; else &#123;// // 未登录，跳转到登录页面// _login();// &#125;// &#125;); &#125;, child: avatarContainer, ); &#125; _buildMessages() &#123; var listItemContent = new Padding( padding: const EdgeInsets.fromLTRB(10.0, 15.0, 10.0, 15.0), child: new Row( children: &lt;Widget&gt;[ new Padding( padding: const EdgeInsets.fromLTRB(0.0, 0.0, 10.0, 0.0), child: new Image.asset(&quot;images/ic_my_message.png&quot;, width: IMAGE_ICON_WIDTH, height: IMAGE_ICON_WIDTH), ), new Expanded( child: new Text( &quot;Message&quot;, style: titleTextStyle, )), rightArrowIcon ], ), ); return new InkWell( child: listItemContent, onTap: () &#123;// _handleListItemClick(title);// Navigator// .of(context)// .push(new MaterialPageRoute(builder: (context) =&gt; new CommonWebPage(title: &quot;Test&quot;, url: &quot;https://my.oschina.net/u/815261/blog&quot;))); &#125;, ); &#125; _buildCoupons() &#123; var listItemContent = new Padding( padding: const EdgeInsets.fromLTRB(10.0, 15.0, 10.0, 15.0), child: new Row( children: &lt;Widget&gt;[ new Divider( height: 2.0, ), new Padding( padding: const EdgeInsets.fromLTRB(0.0, 0.0, 10.0, 0.0), child: new Image.asset(&quot;images/ic_my_message.png&quot;, width: IMAGE_ICON_WIDTH, height: IMAGE_ICON_WIDTH), ), new Expanded( child: new Text( &quot;Coupons&quot;, style: titleTextStyle, )), rightArrowIcon ], ), ); return new InkWell( child: listItemContent, onTap: () &#123;// _handleListItemClick(title);// Navigator// .of(context)// .push(new MaterialPageRoute(builder: (context) =&gt; new CommonWebPage(title: &quot;Test&quot;, url: &quot;https://my.oschina.net/u/815261/blog&quot;))); &#125;, ); &#125;&#125; UI 布局 没什么好解释的 第一看见这样的UI 布局 就想骂人 万马崩腾与心中瞬间想放弃 写多了 就习惯了 虽然 还是很生疏 感觉用的不爽 底部添加版本信息在 https://pub.dartlang.org/ 中找到 get_versionhttps://pub.dartlang.org/packages/get_version#-installing-tab- 不知道 好不好用 get_version 1234Package get_version has no versions that match &gt;=0.0.6 &lt;0.1.0 derived from:- flutter_snap depends on version ^0.0.6pub upgrade failed (1)main.dart 这个找不到","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"简介","slug":"工具/kylinhuang","date":"2018-09-27T16:38:13.961Z","updated":"2018-09-27T18:08:21.068Z","comments":true,"path":"2018/09/28/工具/kylinhuang/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/28/工具/kylinhuang/","excerpt":"","text":"简介kylinhuang 黄文志android 工程师(2012-)Mobil:153 1379 2723QQ:1029755440微信:kylinhuang1029facebook:Kylin HuangGithub：https://github.com/kylinhuangE-Mail:kylinhuang1029755440@gmail.com 工作经验 深圳市麒麟花园网络有限公司 时间 工作 职位 2011/2-2011/5 只是协助完成相关的文档编写和完成用户的登陆，注册，验证码，模板的编写等。 java实习 2011/8—2012/4 在项目前期与客户进行需求分析，确定系统功能，参与系统设计以及功能模块的详细设计开发阶段 责功能模块的实现。项目后期主要负责用户使用文档的编写。 java工程师 2012/4—2012/12 绘制，UI产品维护，新增功能实现，改bug兼测试。 android工程师 北京家视天下科技有限公司2013/3—2014/2android研发工程师大麦电视 机顶盒的研发，分析需求搭建框架，维护爱奇艺GITV浙江广东项目。 北京创维海通数字技术有限公司2014/2—2015/4android研发工程师 1.android 机顶盒的研发，分析需求搭建框架，2.与C的对接播放器 CA卡认证,3.多平台统计SDK and 云自定义Launcher4.烟草项目 北京数字家园科技有限公司2015/4—2016/6android研发工程师android 社交软件WithU的开发1.主要负责虾米音乐SDK集成播放2.第三方分享模块maven库管理3.群相册模块， Voip视频通话 rtmp 视频直播 等功能 北京生迪科技有限公司2016/6—：android研发工程师1.维护智能灯snap android 客户端 包含组网 直播 回看 对讲等2.参与 Home 项目中 cordova 开发 与 cordova 插件开发(直播 回看 小视频插件)3.Snap Settings 网页开发 项目经验 Snap（带摄像头智能灯）2016/5—项目描述：智能家居 安防类 单独负责 snap 项目android 端维护 重构网络请求 播放器模块 替换以及优化 Snap Settings 网页开发 以及集成 WithU(原 亲见 )2015/4—2016/6项目描述：社交类应用，聊天，feed动态，图片标签，Voip视频通话，音乐，视频直播主要负责1 虾米音乐SDK集成播放 - 音乐播放模块2 第三方分享模块maven库管理 - 分享模块3 群相册模块4 voip 视频/语音电话5 群直播模块 负责 直播功能 永新高安CA认证2014/12—2015/1开发工具：x86 ADT 歌华主板项目描述：实现搜台，硬件信息获取，邮件，指纹，OSD等功能个人职责：android这边一个人负责，主要是与C组工程师配合玩，完成与C的对接，实现功能。 信息采集2014/11–2014/12开发工具：x86 ADT 歌华主板项目描述：采集功能包，实现用户的行为与设备信息的采集与提交，功能包的实现，在STB/OTT/android phone/android pad 不同的设备不同的项目上都可以使用个人职责：此项目本人负责，共3人开放，包括需求分析，框架结构。模块划分，任务分配。 歌华项目(android STB机顶盒)2014 /9–2014 /11开发工具：x86 ADT 歌华主板项目描述：歌华与百事通合作推出的盒子，百事通提供Launcher，我方提供设置，回看，直播。个人职责：负责歌华设置，以及提供百事通相应的jar包，实现播放。 重庆一体机4K 智能电视 项目2014 /7–2014 /9开发工具：x86 ADT 酷开一体机项目描述：带直播，回看的应用，添加收藏，历史记录，预定等功能个人职责：负责Home 模块，用户的收藏，预定，历史观看，小视屏窗口的直播；数据的整体重构；http 请求 的封装；contentprovider 数据库的封装。 赣州OTT项目 (android OTT机顶盒)2014 /5–2014 /7开发工具：x86 ADT Skyworth A300项目描述：江西赣州酒店 机顶盒 整个项目包括 Launcher ，stbPlay,个人职责：本人负责Launcher的开放，包括小屏幕的直播观看，应用后门控制。 STBSearchLauncher (android STB机顶盒 nagra CA认证)2014 /2–2014 /4开发工具：x86 ADT Skyworth 开发板项目描述：StbLauncher研发STB机顶盒 3C认证的Launcher Android这边我一人负责；配合C工程师们完成功能，通过电视线 进行单频点搜索，全频点搜索，以及视频播放；CA卡用户认证，邮件等功能；主要采用JNI调用，Socket 获取数据，以及CA卡信息，及用户邮件。个人职责：Android这边我一人负责,与C开发组协同完成整个项目；采用jni调用实现播放，搜台，以及待机的逻辑 ；采用socket 解析数据，获取搜台结果，CA卡信息，用户邮件； Gitv浙江项目，Gitv广东项目(android机顶盒)2013 /11–2014/2开发工具： ADT 浙江浪潮盒子，浙江Bell鸟巢盒子项目描述：Gitv 银河开发，我们公司负责维护，Gitv 和hiveviewTV 很相似，支持直播（银河有直播牌照），点播（电视剧，电影，综艺）个人职责：DomyBoxLauncher结束后， 负责维护银河Gitv浙江项目， 江苏项目的技术难点的突破,保证浙江项目上线， 广东项目新功能的开发 ，以及广东项目质量的把关 DomyBoxLauncher（android机顶盒）2013 /8–2013 /10开发工具：x86 ADT 大麦盒子（鹏博士）项目描述：2013.10.30 鹏博士Domybox 新闻发布会,DomyBoxLauncher绑定盒子开发与广东厂商定制ROM，免费赠送给鹏博士的百兆用户DomyBoxLauncher —-支持天气，应用市场，嵌入银河gitv，蜂巢tv简介版（改蓝光极清），技术点（应用市场中应用的升级，系统组件升级，DomyBoxLauncher的升级）个人职责：本项目基本上，两个人开发，主要我负责这个项目 1.框架的搭建，首页的双层动画的嵌套—UI中难点 2.应用模块—包括应用的升级，系统组件的升级，DomyBoxLauncher的升级 3.与硬件厂商，交涉ROM问题（前期我负责—10.1项目经理负责 蜂巢TV1.0-1.5（android机顶盒）2013 /3–2013 /8开发工具：x86 ADT 三菱凯天机顶盒项目描述：开发我们自己的产品—hiveviewTV。 支持在线直播，点播，新闻整个项目三大技术难点1，viewpager列表页加载卡顿显现2，直播换台anr3，遥控器（手机控制盒子）个人职责：搜索模块，所有的列表模块，用户模块（除直播提醒EPG），详情页，升级，等 列表页异步加载图片滑动时出现卡顿情况 后期维护倒影的增加，获得焦点的放大等等新功能的实现 深圳书城（android客户端）开发工具：x86 Eclipse Moto XT316项目描述：完成深圳书城的图书查询，及南山书城，中心书城，罗湖书城的图书相关的库存信息，编号，位置等；图片的双缓冲，本地保存图片，使用软引用实现收藏功能，收藏的图书，返回服务器，在其他地方登陆获取相关的数据，个人职责：本人主要负责排行榜板块，图书详情、查询模块等模块的开发。 UncaughtExceptionHandler捕获异常的异常，上传服务器 旋转动画的制作 友谊书城软件环境：Struts+Spring+Hibernate+Lucene+WebSerivce开发工具：Eclipse项目描述：包含用户模块，购书模块，购买支付模块，搜索模块，图书收藏模块等。用户模块：主要负责用户的注册登录以及在支付时使用filter进行拦截判断用户是否登录，套用模板；搜索模块：完成数据的查询，图书的搜索，图书的详细信息等等。图书收藏模块：实现图书的收藏功能；购买支付模块：实现购物车，实现网上支付的接口。个人职责：实习期间，只是协助完成相关的文档编写和完成用户的登陆，注册。后期负责模板的编写，过滤器拦截。 个人项目：softwareManager （个人项目 应用汇已上线）个人项目：kylinPlayer （个人项目 应用汇已上线） 教育背景 2008.9—2011.7 九江职业技术学院 机械工程学院 模具设计与制造专业 大专在校三年连续三年获得奖学金","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"简历","slug":"简历","permalink":"http://www.kylinhuang.cn/tags/简历/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"Flutter app 6.下拉刷新","slug":"android/Flutter/app/Flutter app 6.下拉刷新","date":"2018-09-27T02:49:24.013Z","updated":"2018-10-23T08:30:23.055Z","comments":true,"path":"2018/09/27/android/Flutter/app/Flutter app 6.下拉刷新/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/27/android/Flutter/app/Flutter app 6.下拉刷新/","excerpt":"","text":"Flutter app 6.下拉刷新 1.添加 下拉刷新创建启动页pages/SnapTabPage.dart 123456789101112131415161718192021222324@override Widget build(BuildContext context) &#123; print(&quot; build &quot;); if (listData == null ) &#123; return new Center( child: new CircularProgressIndicator(), ); &#125; else &#123; print(&quot; listData &quot; + listData.toString()); var refreshIndicator = new RefreshIndicator( key: _refreshIndicatorKey, onRefresh: _pullToRefresh, // onRefresh 参数是一个 Future&lt;Null&gt; 的回调 child: new ListView.builder( // 这句是在list里面的内容不足一屏时，list可能会滑不动，加上就一直都可以滑动 physics: const AlwaysScrollableScrollPhysics(), itemCount: this.listData.length, itemBuilder: (_, int index) =&gt; _createItem(listData[index]), ), ); return refreshIndicator; &#125; &#125; 完整代码main.dart123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142class SnapTabPage extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new SnapTabPageState(); &#125;&#125;class SnapTabPageState extends State&lt;SnapTabPage&gt; &#123; // 这个key用来在不是手动下拉，而是点击某个button或其它操作时，代码直接触发下拉刷新 final GlobalKey&lt;RefreshIndicatorState&gt; _refreshIndicatorKey = new GlobalKey&lt;RefreshIndicatorState&gt;(); var listData; ScrollController _controller = new ScrollController(); @override void initState() &#123; super.initState(); print(&quot; initState &quot;); getList(false); &#125; SnapTabPageState() &#123; print(&quot; SnapTabPageState &quot;); &#125; @override Widget build(BuildContext context) &#123; print(&quot; build &quot;); if (listData == null ) &#123; return new Center( child: new CircularProgressIndicator(), ); &#125; else &#123; print(&quot; listData &quot; + listData.toString()); var refreshIndicator = new RefreshIndicator( key: _refreshIndicatorKey, onRefresh: _pullToRefresh, // onRefresh 参数是一个 Future&lt;Null&gt; 的回调 child: new ListView.builder( // 这句是在list里面的内容不足一屏时，list可能会滑不动，加上就一直都可以滑动 physics: const AlwaysScrollableScrollPhysics(), itemCount: this.listData.length, itemBuilder: (_, int index) =&gt; _createItem(listData[index]), ), ); return refreshIndicator; &#125; &#125; getList(bool isLoadMore) async &#123; var session = await new DataHelper().getSession(); String url = Api.queryAll + Api.session + session.toString(); print(&quot;queryAll : $url&quot;); NetUtils.get(url).then((data) &#123; if (data != null) &#123; Map&lt;String, dynamic&gt; map = json.decode(data); print(&quot;map : $map&quot;); if (map[&apos;messageCode&apos;] == 200 || &apos;ok&apos; == map[&apos;message&apos;]) &#123; var data = map[&apos;data&apos;]; setState(() &#123; if (null != data )&#123; List list1 = new List(); list1.addAll(data); listData = list1 ; &#125; &#125;); &#125; &#125; &#125;); &#125; Future&lt;Null&gt; _pullToRefresh() async &#123; getList(false); return null; &#125; Widget renderRow(i) &#123; var layout = new Column( children: &lt;Widget&gt;[ new Text(&apos;Deliver features faster&apos;), new Text(&apos;Craft beautiful UIs&apos;), new Expanded( child: new FittedBox( fit: BoxFit.contain, // otherwise the logo will be tiny child: const FlutterLogo(), ), ), ], ); return new InkWell( child: layout, onTap: () &#123; Navigator.of(context).push(new MaterialPageRoute( builder: (ctx) =&gt; null )); &#125;, ); &#125; _createItem(listData) &#123; print(&quot; _createItem &quot;+ listData.toString() ); return new Column( children: &lt;Widget&gt;[ new Container( height: 24.0, margin: const EdgeInsets.all(10.0), alignment: Alignment.center, child: new Text(listData[&quot;name&quot;]), ), new Container( height: 200.0, ), new Divider( height: 0.5, ) ], ); &#125;&#125; UI 布局1.开启 视觉调试开关 1布局控件也是可以模拟显示的，通常用于调试布局样式时用到的网格线、标尺、动画帧等。启用方式： 在main.dart中，引入包：1import &apos;package:flutter/rendering.dart&apos; show debugPaintSizeEnabled; 打开视觉调试开关12345678910111213void main() &#123; debugPaintSizeEnabled = true; //打开视觉调试开关 runApp( new MaterialApp( title: &apos;Snap&apos;, home: new SplashPage(), // 闪屏页, routes: &lt;String, WidgetBuilder&gt;&#123; // 路由 &apos;/LoginPage&apos;: (BuildContext context) =&gt; new LoginPage(), &apos;/HomePage&apos;: (BuildContext context) =&gt; new MainPage(), &#125;, ), );&#125; 开启后效果 调整UI123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566_createItem(listData) &#123; print(&quot; _createItem &quot;+ listData.toString() ); print(&quot; thumbUrl &quot;+ listData[&quot;thumbUrl&quot;] ); var imgUrl = listData[&apos;thumbUrl&apos;]; return new Column( children: &lt;Widget&gt;[// title new Container( height: 24.0, margin: const EdgeInsets.all(10.0), alignment: Alignment.center, child: new Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: &lt;Widget&gt;[ new Text(listData[&quot;name&quot;]), new Row( children: &lt;Widget&gt;[ new Container( decoration: new BoxDecoration(// color: const Color(0xfffce5cd), border: new Border.all( color: Colors.grey, width: 1.0), borderRadius: new BorderRadius.circular(50.0), ), child: new Row( children: &lt;Widget&gt;[ new Padding( padding: new EdgeInsets.only(top:2.0, bottom: 2.0, left: 2.0), child: new Image.asset(&quot;images/brightness_selected.png&quot;, width: 30.0 , height: 30.0, fit: BoxFit.contain, ), ), new Padding( padding: new EdgeInsets.only(right: 5.0), child: new Text(&quot;OFF&quot;), ), ], ), ), new Image.asset(&quot;images/btn_settings_enable.png&quot;, width: 60.0), ], ), ], ), ), new Container( child: new AspectRatio( aspectRatio:16/9, //横纵比 长宽比 3:2 child: new Image.network(imgUrl),//项目资源文件 ), ), new Divider( height: 0.5, ) ], ); &#125; 顶部 左右对齐使用 1mainAxisAlignment: MainAxisAlignment.spaceBetween, 圆角 1234567new Container( decoration: new BoxDecoration( // color: const Color(0xfffce5cd), border: new Border.all( color: Colors.grey, width: 1.0), borderRadius: new BorderRadius.circular(50.0), ),&#125; padding只好这么写了 12345678new Padding( padding: new EdgeInsets.only(top:2.0, bottom: 2.0, left: 2.0), child: new Image.asset(&quot;images/brightness_selected.png&quot;, width: 30.0 , height: 30.0, fit: BoxFit.contain, ),), 宽高比 1234new AspectRatio( aspectRatio:3/2, //横纵比 长宽比 3:2 child: new Image(image: new AssetImage(&apos;images/img1.jpg&apos;)),//项目资源文件), 虽然 对 flutter 的UI 有各种怨言 但是 还是强忍着 学吧","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter app 5.添加启动页","slug":"android/Flutter/app/Flutter app 5.添加启动页","date":"2018-09-26T13:07:45.024Z","updated":"2018-09-27T12:56:52.659Z","comments":true,"path":"2018/09/26/android/Flutter/app/Flutter app 5.添加启动页/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/26/android/Flutter/app/Flutter app 5.添加启动页/","excerpt":"","text":"Flutter app 5.添加启动页 1.创建启动页创建启动页pages/SplashPage.dart 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576class SplashPage extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new _SplashPageState(); &#125;&#125;class _SplashPageState extends State&lt;SplashPage&gt; &#123; @override Widget build(BuildContext context) &#123; return new Container( color: Colors.white, child: new Center( child: new Image.asset(&quot;images/snap_icon_launcher.png&quot;, width: 60.0) ), ); &#125; @override Future initState() &#123; super.initState(); initData(); &#125; Future getUserInfo() async &#123; Map map = &#123;&#125;; String result = await NetUtils.apiRequest(Api.getUserInfo, map); Map&lt;String, dynamic&gt; resultMap = json.decode(result); print(resultMap); if( null != resultMap )&#123; if( 200 == resultMap[&apos;messageCode&apos;] || &quot;ok&quot; == resultMap[&apos;message&apos;])&#123; var data = resultMap[&apos;data&apos;]; if ( null != data )&#123; num id = data[&apos;id&apos;]; var account = data[&apos;account&apos;]; var nickName = data[&apos;nickName&apos;]; var profile = data[&apos;profile&apos;]; var sengledWebsite = data[&apos;sengledWebsite&apos;]; var privacyPolicyStatus = data[&apos;privacyPolicyStatus&apos;]; var upgradeAppType = data[&apos;upgradeAppType&apos;]; User userInfo = new User( id:id, name:nickName, avatar:profile, account:account); new UserHelper().setUser(userInfo) ; DataUtils.saveUserInfo(userInfo); Navigator.of(context).pushReplacementNamed(&apos;/HomePage&apos;); &#125; &#125; else &#123; Navigator.of(context).pushReplacementNamed(&apos;/LoginPage&apos;); &#125; &#125; &#125; Future initData() async &#123; String session = await new DataHelper().getSession(); if (null != session)&#123; getUserInfo(); &#125;else &#123; Navigator.of(context).pushReplacementNamed(&apos;/LoginPage&apos;); &#125; &#125;&#125; 主页面 设置路由main.dart123456789101112void main() &#123; runApp( new MaterialApp( title: &apos;Snap&apos;, home: new SplashPage(), // 闪屏页, routes: &lt;String, WidgetBuilder&gt;&#123; // 路由 &apos;/LoginPage&apos;: (BuildContext context) =&gt; new LoginPage(), &apos;/HomePage&apos;: (BuildContext context) =&gt; new MainPage(), &#125;, ), );&#125; 问题 同步 异步问题123String session = new DataHelper().getSession();没有 await 第一次 session 一直 获取不到","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android app App事故 解决方案","slug":"android/android app App事故 解决方案","date":"2018-09-26T02:17:35.254Z","updated":"2019-04-18T03:25:23.188Z","comments":true,"path":"2018/09/26/android/android app App事故 解决方案/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/26/android/android app App事故 解决方案/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/tags/android/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Flutter app 4.添加主页面","slug":"android/Flutter/app/Flutter app 4.添加主页面","date":"2018-09-21T17:06:37.312Z","updated":"2018-09-21T18:02:58.266Z","comments":true,"path":"2018/09/22/android/Flutter/app/Flutter app 4.添加主页面/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/22/android/Flutter/app/Flutter app 4.添加主页面/","excerpt":"","text":"Flutter app 4.添加主页面 1.创建主页面创建主页面pages/MainPage.dart 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104import &apos;package:flutter/cupertino.dart&apos;;import &apos;package:flutter/material.dart&apos;;class MainPage extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new _MainPageState(); &#125;&#125;class _MainPageState extends State&lt;MainPage&gt; &#123; int _tabIndex = 0; final tabTextStyleNormal = new TextStyle(color: const Color(0xff969696)); final tabTextStyleSelected = new TextStyle(color: const Color(0xFFf39b63)); var tabImages; var _body; var appBarTitles = [&apos;MySnap&apos;, &apos;Security&apos;, &apos;Me&apos;]; Image getTabImage(path) &#123; return new Image.asset(path, width: 20.0, height: 20.0); &#125; void initData() &#123; if (tabImages == null) &#123; tabImages = [ [ getTabImage(&apos;images/tab_icon_snap_0.png&apos;), getTabImage(&apos;images/tab_icon_snap_1.png&apos;) ], [ getTabImage(&apos;images/tab_icon_security_0.png&apos;), getTabImage(&apos;images/tab_icon_security_1.png&apos;) ], [ getTabImage(&apos;images/tab_icon_me_0.png&apos;), getTabImage(&apos;images/tab_icon_me_1.png&apos;) ] ]; &#125; _body = new IndexedStack( children: &lt;Widget&gt;[ new MyTabPage(), new MyTabPage(), new MyTabPage() ], index: _tabIndex, ); &#125; TextStyle getTabTextStyle(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabTextStyleSelected; &#125; return tabTextStyleNormal; &#125; Image getTabIcon(int curIndex) &#123; if (curIndex == _tabIndex) &#123; return tabImages[curIndex][1]; &#125; return tabImages[curIndex][0]; &#125; Text getTabTitle(int curIndex) &#123; return new Text(appBarTitles[curIndex], style: getTabTextStyle(curIndex)); &#125; @override Widget build(BuildContext context) &#123; initData(); return new MaterialApp( theme: new ThemeData( primaryColor: const Color(0xFFf39b63) ), home: new Scaffold( appBar: new AppBar( title: new Text(appBarTitles[_tabIndex], style: new TextStyle(color: Colors.white)), iconTheme: new IconThemeData(color: Colors.white) ), body: _body, bottomNavigationBar: new CupertinoTabBar( items: &lt;BottomNavigationBarItem&gt;[ new BottomNavigationBarItem( icon: getTabIcon(0), title: getTabTitle(0)), new BottomNavigationBarItem( icon: getTabIcon(1), title: getTabTitle(1)), new BottomNavigationBarItem( icon: getTabIcon(2), title: getTabTitle(2)), ], currentIndex: _tabIndex, onTap: (index) &#123; setState(()&#123; _tabIndex = index; &#125;); &#125;, ), ), ); &#125;&#125; 2.添加图片资源目录images/ 图片 放在 images/ 下 在 pubspec.yaml 中 修改 添加123456789assets: - images/tab_icon_snap_0.png - images/tab_icon_snap_1.png - images/tab_icon_security_0.png - images/tab_icon_security_1.png - images/tab_icon_me_0.png - images/tab_icon_me_1.png 创建 /pages/MyTabPage.dart1234567891011121314151617181920212223import &apos;package:flutter/material.dart&apos;;class MyTabPage extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new MyTabPageState(); &#125;&#125;class MyTabPageState extends State&lt;MyTabPage&gt; &#123; @override void initState() &#123; super.initState(); &#125; @override Widget build(BuildContext context) &#123; return new Center( child: new Text(&apos;提示&apos;), ); &#125;&#125; 3.启动主页面管理多个用户界面有两个核心概念和类：路由（Route）和导航器（Navigator）， 路由（Route）是应用程序的“屏幕”或“页面”的抽象，导航器（Navigator）是管理路由的控件。 导航器（Navigator）可以推送（push）和弹出（pop）路由来帮助用户从当前屏幕移动到另一个屏幕。 Navigator的跳转有两种，一种是显示跳转，需要我们在MaterialPageRoute中指定widget1234Navigator.of(context).push(new MaterialPageRoute(builder: (context) &#123; //指定跳转的页面 return new Demo1(); &#125;,)); 另一种是隐身跳转，这种跳转需要先定义，后使用，跳转方式就像Arouter一样的路径方式，定义部分需要在MaterialApp下定义routes，routes就跟一个Map&lt;path,Page&gt;集合一样，定义好了path对应的page，那么下次跳转，我们就可以针对path去跳转了 1234567891011@overrideWidget build(BuildContext context) &#123; return new MaterialApp( home: new Scaffold( body: new Center(child: new RaisedButton(onPressed: _pushPage,child: new Text(&quot;跳转&quot;))), ), //定义路由 routes: &lt;String,WidgetBuilder&gt;&#123; &quot;/demo1&quot;:(BuildContext context)=&gt;new Demo1(), &#125;, ); 跳转使用1Navigator.of(context).pushNamed(&quot;/demo1&quot;); 注意 context 表示 不对跳转 效果也不对 参考 https://blog.csdn.net/u013000152/article/details/80940682 在 LoginPage.dart 登陆完成 启动主页面 123Navigator.of(context).push(new MaterialPageRoute( builder: (ctx) =&gt; new MainPage() ));","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter app 3.添加 loading toast","slug":"android/Flutter/app/Flutter app 3.添加loading toast提示","date":"2018-09-19T13:21:16.260Z","updated":"2018-09-19T13:44:38.937Z","comments":true,"path":"2018/09/19/android/Flutter/app/Flutter app 3.添加loading toast提示/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/19/android/Flutter/app/Flutter app 3.添加loading toast提示/","excerpt":"","text":"Flutter app 3.添加 loading toast1.添加loading创建 Loading WidgetLoginPage.dart 中123456789101112131415Widget _buildBody()&#123; if (_isLoading) &#123; return _buildLoading(); &#125; else &#123; return new ListView( children: &lt;Widget&gt;[ _buildCustomBar(), _buildAccountEdit(), _buildPWDEdit(), _buildLogin(), _buildTips(), ], ); &#125; &#125; loading12345678910Widget _buildLoading() &#123; return new Container( padding: const EdgeInsets.all(32.0), child: new Center( child: new CircularProgressIndicator(), ), ); &#125; 1var _isLoading = false ; 更新 状态123456void showLoading(bool isshowLoading) &#123; setState( () &#123; _isLoading = isshowLoading; &#125;, ); &#125;&#125; 显示1showLoading(true); 2. Toast参考https://pub.dartlang.org/packages/fluttertoast#-installing-tab- 1. Depend itAdd this to your package’s pubspec.yaml file:12dependencies: fluttertoast: ^2.0.7 2. Install itYou can install packages from the command line: with Flutter: 1$ flutter packages get Alternatively, your editor might support flutter packages get. Check the docs for your editor to learn more. 使用 util/ToastUtils.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344import &apos;package:fluttertoast/fluttertoast.dart&apos;;class ToastUtils &#123; static void showLongToast(String msg) &#123; Fluttertoast.showToast( msg: msg, toastLength: Toast.LENGTH_LONG, ); &#125; static void showColoredToast(String msg,String bgcolor,String textcolor) &#123; Fluttertoast.showToast( msg: msg, toastLength: Toast.LENGTH_SHORT, bgcolor: bgcolor, textcolor: textcolor ); &#125; static void showShortToast(String msg) &#123; Fluttertoast.showToast( msg: msg, toastLength: Toast.LENGTH_SHORT, timeInSecForIos: 1 ); &#125; static void showTopShortToast(String msg) &#123; Fluttertoast.showToast( msg: msg, toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.TOP, timeInSecForIos: 1 ); &#125; static void showCenterShortToast(String msg) &#123; Fluttertoast.showToast( msg: msg, toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.CENTER, timeInSecForIos: 1 ); &#125;&#125; LoginPage.dart 1ToastUtils. showShortToast(&quot;登陆成功&quot;) ;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter app 2.save session","slug":"android/Flutter/app/Flutter app 2.save session","date":"2018-09-19T02:57:05.537Z","updated":"2018-09-19T13:06:12.920Z","comments":true,"path":"2018/09/19/android/Flutter/app/Flutter app 2.save session/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/19/android/Flutter/app/Flutter app 2.save session/","excerpt":"","text":"Flutter app 2.save session本地保存 方式 使用shared_preferences 参考 https://flutter.io/cookbook/persistence/key-value/ 1. Add the dependency 添加依赖https://pub.dartlang.org/ 中查找最新版本 Add this to your package’s pubspec.yaml file: 12dependencies: shared_preferences: ^0.4.2 更新 flutter packages get 2. 使用 shared_preferences 保存引入1import &apos;package:shared_preferences/shared_preferences.dart&apos;; 创建 util/DataUtils.dart12345678910111213141516import &apos;package:shared_preferences/shared_preferences.dart&apos;;import &apos;dart:async&apos;;class DataUtils &#123; static final String SP_SESSION = &quot;SESSION&quot;; static Future&lt;String&gt; getAccessToken() async &#123; SharedPreferences sp = await SharedPreferences.getInstance(); return sp.getString(SP_SESSION); &#125; static Future&lt;bool&gt; setAccessToken(String session) async &#123; SharedPreferences sp = await SharedPreferences.getInstance(); return await sp.setString(SP_USER_NAME, session); &#125;&#125; 3. LoginPage.dart 中使用 保存用户信息 以及session1. 登陆完成保存 session创建单例 保存 app 缓存数据 session /helper/DataHelper.dart123456789101112131415161718192021222324252627282930313233343536373839import &apos;package:flutter_snap/util/DataUtils.dart&apos;;class DataHelper &#123; static final DataHelper _singleton = new DataHelper._internal(); factory DataHelper() &#123; return _singleton; &#125; DataHelper._internal(); String session; void setSession(String session)&#123; print(session); if (session != this.session)&#123; this.session = session ; var result = DataUtils.setAccessToken(session); print(&quot;setSession&quot;); print(result); &#125; &#125; String getSession()&#123; if (null == this.session)&#123; var jsession = DataUtils.getAccessToken(); print(&quot;getSession&quot;); print(jsession); this.session = jsession.toString(); &#125; return session ; &#125;&#125; LoginPage.dart 123456789101112131415161718192021222324252627282930313233343536373839404142showTips() async &#123; //TODO loading setState( () &#123; _isLoading = true; &#125;, ); Map map = &#123; &apos;user&apos;: &apos;las@sengled.com&apos;, &apos;pwd&apos;: &apos;123456&apos;, &apos;osType&apos;:&apos;android&apos;, &apos;uuid&apos;:&apos;4CC09670-0623-497B-AB82-F48611FA4C42&apos;, &apos;appCode&apos;:&apos;snap&apos;, &apos;productCode&apos;:&apos;snap&apos; &#125;; print(Api.AuthenCross); print(json.encode(map)); String result = await apiRequest(Api.AuthenCross, map); Map&lt;String, dynamic&gt; resultMap = json.decode(result); if( null != resultMap )&#123; if( 0 == resultMap[&apos;ret&apos;] || &quot;success&quot; == resultMap[&apos;msg&apos;])&#123; var jsessionId = resultMap[&apos;jsessionId&apos;]; print(jsessionId) ; if( jsessionId.length &gt; 0 )&#123; new DataHelper().setSession(jsessionId); &#125; getUserInfo(); &#125; else &#123; &#125; &#125; &#125; LoginPage login 调用DataHelper 保存 session在 调用 getUserInfo 获取用户信息 2. 获取用户信息 在 head 中添加 sessionhttp 代码 util/NetUtils.dart http headers 添加 session 123456789101112131415161718192021222324class NetUtils &#123; static Future&lt;String&gt; apiRequest(String url, Map jsonMap) async &#123; String session = new DataHelper().getSession(); print(session); print(url); print(json.encode(jsonMap)); HttpClient httpClient = new HttpClient(); HttpClientRequest request = await httpClient.postUrl(Uri.parse(url)); request.headers.set(&apos;content-type&apos;, &apos;application/json&apos;); if (null != session)&#123; request.headers.add(&apos;Cookie&apos;, &apos;JSESSIONID=&apos; + session.toString()); &#125; request.add(utf8.encode(json.encode(jsonMap))); HttpClientResponse response = await request.close(); // todo - you should check the response.statusCode String reply = await response.transform(utf8.decoder).join(); httpClient.close(); return reply; &#125;&#125; LoginPage.dart12345678910111213141516171819202122232425262728293031Future getUserInfo() async &#123; Map map = &#123;&#125;; String result = await NetUtils.apiRequest(Api.getUserInfo, map); Map&lt;String, dynamic&gt; resultMap = json.decode(result); print(resultMap); if( null != resultMap )&#123; if( 200 == resultMap[&apos;messageCode&apos;] || &quot;ok&quot; == resultMap[&apos;message&apos;])&#123; var data = resultMap[&apos;data&apos;]; if ( null != data )&#123; num id = data[&apos;id&apos;]; var account = data[&apos;account&apos;]; var nickName = data[&apos;nickName&apos;]; var profile = data[&apos;profile&apos;]; User userInfo = new User( id:id, name:nickName, avatar:profile, account:account); new UserHelper().setUser(userInfo) ; DataUtils.saveUserInfo(userInfo); &#125; &#125; else &#123; &#125; &#125; &#125; model/User.dart12345678910111213141516171819202122class User &#123; num id; String account; String name; String avatar; User( &#123;this.id, this.name, this.avatar, this.account&#125; ); User.fromJson(Map&lt;String, dynamic&gt; json) : id = json[&apos;id&apos;], account = json[&apos;account&apos;], name = json[&apos;name&apos;], avatar = json[&apos;avatar&apos;] ; Map&lt;String, dynamic&gt; toJson() =&gt; &#123; &apos;id&apos;: id, &apos;account&apos;: account, &apos;name&apos;: name, &apos;avatar&apos;: avatar, &#125;;&#125; helper/UserHelper.dart1234567891011121314151617class UserHelper &#123; static final UserHelper _singleton = new UserHelper._internal(); factory UserHelper() &#123; return _singleton; &#125; UserHelper._internal(); User user; setUser(User u)&#123; this.user = u; &#125; User getUser()&#123; return user; &#125;&#125; 总结 shared_preferences 存储 http请求 添加 session","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter app 1.login","slug":"android/Flutter/app/Flutter app 1.login","date":"2018-09-18T13:19:42.551Z","updated":"2018-09-19T02:55:53.431Z","comments":true,"path":"2018/09/18/android/Flutter/app/Flutter app 1.login/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/18/android/Flutter/app/Flutter app 1.login/","excerpt":"","text":"Flutter app 1.login1.创建新项目2. 创建 login1. 创建目录pages 在 pages 目录下创建 LoginPage.dart 1234567891011121314151617181920class LoginPage extends StatefulWidget &#123; @override State&lt;StatefulWidget&gt; createState() &#123; return new _LoginPageState(); &#125;&#125;class _LoginPageState extends State&lt;LoginPage&gt; &#123; @override Widget build(BuildContext context) &#123; return new Scaffold( body: new Center( child: new Text( &apos;hello &apos;, ), ), ); &#125;&#125; main.dart12345678910111213import &apos;package:flutter/material.dart&apos;;import &apos;package:flutter_snap/pages/LoginPage.dart&apos;;void main() &#123; runApp( new MaterialApp( title: &apos;Flutter教程&apos;, home: new LoginPage(), ), );&#125; 3.添加 登录UItitle bar12345678910@override Widget build(BuildContext context) &#123; return new Material( child: new Scaffold( key: registKey, backgroundColor: Colors.white, body: _buildBody(), ), ); &#125; 1234567Widget _buildBody()&#123; return new ListView( children: &lt;Widget&gt;[ _buildCustomBar(), ], ); &#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344// title Bar Widget _buildCustomBar() &#123; return new Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, //子组件的排列方式为主轴两端对齐 children: &lt;Widget&gt;[ new InkWell( child: new Padding( padding: const EdgeInsets.all(12.0), child: new Icon( Icons.chevron_left, size: 26.0, color: Colors.grey[700], )), onTap: () &#123; Navigator.pop(context); &#125;, ), new InkWell( child: new Padding( padding: const EdgeInsets.all(12.0), child: new Text( &quot;Create account&quot;, style: new TextStyle(fontSize: 18.0, color: Colors.grey[900]), )), onTap: () &#123; showTips(); &#125;, ), new InkWell( child: new Padding( padding: const EdgeInsets.all(12.0), child: new Text( &quot;Login&quot;, style: new TextStyle(fontSize: 16.0, color: Colors.grey[700]), )), onTap: () &#123; showTips(); &#125;, ), ], ); &#125; Account 输入框123456789101112Widget _buildBody()&#123; if (_isLoading) &#123; return _buildLoading(); &#125; else &#123; return new ListView( children: &lt;Widget&gt;[ _buildCustomBar(), _buildAccountEdit(), ], );; &#125; &#125; 123456789101112131415161718192021222324252627Widget _buildAccountEdit() &#123; var node = new FocusNode(); return new Padding( padding: const EdgeInsets.only(left: 40.0, right: 40.0), child: new TextField( onChanged: (str) &#123; _email = str; setState(() &#123;&#125;); &#125;, decoration: new InputDecoration( hintText: &apos;Email address&apos;, ), maxLines: 1, //行数 maxLength: 50, // //键盘展示为号码 keyboardType: TextInputType.emailAddress, //只能输入数字// inputFormatters: &lt;TextInputFormatter&gt;[// WhitelistingTextInputFormatter.digitsOnly,// ], onSubmitted: (text) &#123; print(&quot;onSubmitted&quot;); FocusScope.of(context).reparentIfNeeded(node); &#125;, ), ); &#125; 密码 输入框12345678910111213Widget _buildBody()&#123; if (_isLoading) &#123; return _buildLoading(); &#125; else &#123; return new ListView( children: &lt;Widget&gt;[ _buildCustomBar(), _buildAccountEdit(), _buildPWDEdit(), ], );; &#125; &#125; 123456789101112131415161718192021Widget _buildPWDEdit() &#123; var node = new FocusNode(); Widget verifyCodeEdit = new TextField( onChanged: (str) &#123; _pwd = str; setState(() &#123;&#125;); &#125;, decoration: new InputDecoration( hintText: &apos;请输入密码&apos;, ), maxLines: 1, maxLength: 50, //键盘展示为数字 keyboardType: TextInputType.text,// inputFormatters: &lt;TextInputFormatter&gt;[// WhitelistingTextInputFormatter.digitsOnly,// ], onSubmitted: (text) &#123; FocusScope.of(context).reparentIfNeeded(node); &#125;, ); 登录按钮1234567891011121314Widget _buildBody()&#123; if (_isLoading) &#123; return _buildLoading(); &#125; else &#123; return new ListView( children: &lt;Widget&gt;[ _buildCustomBar(), _buildAccountEdit(), _buildPWDEdit(), _buildLogin(), ], );; &#125; &#125; 1234567891011121314151617Widget _buildLogin() &#123; return new Padding( padding: const EdgeInsets.only(left: 40.0, right: 40.0, top: 20.0), child: new RaisedButton( color: Colors.blue, textColor: Colors.white, disabledColor: Colors.blue[100], onPressed: (_email.isEmpty || _pwd.length &lt; 8 ) ? null : () &#123; showTips(); &#125;, child: new Text( &quot;登 录&quot;, style: new TextStyle(fontSize: 16.0), ), ), ); &#125; 忘记密码 注册123456789101112131415Widget _buildBody()&#123; if (_isLoading) &#123; return _buildLoading(); &#125; else &#123; return new ListView( children: &lt;Widget&gt;[ _buildCustomBar(), _buildAccountEdit(), _buildPWDEdit(), _buildLogin(), _buildTips(), ], ); &#125; &#125; 123456789101112131415161718Widget _buildTips() &#123; return new Padding( padding: const EdgeInsets.only(left: 40.0, right: 40.0, top: 20.0), child: new Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, //子组件的排列方式为主轴两端对齐 children: &lt;Widget&gt;[ new Text( &quot;注册&quot;, style: new TextStyle(fontSize: 14.0, color: Colors.blue), ), new Text( &quot;忘记密码&quot;, style: new TextStyle(fontSize: 14.0, color: Colors.blue), ), ], ), ); &#125; 4.添加 登录功能点击登陆执行 showTips() 方法 添加网络请求pubspec.yaml 文件中添加 http: &apos;&gt;=0.11.3+12&apos; 添加请求业务12345showTips() async &#123; var httpClient = createHttpClient(); var response = await httpClient.post(Api.AuthenCross, body: &#123;&apos;user&apos;: &apos;las@sengled.com&apos;, &apos;pwd&apos;: &apos;123456&apos;,&apos;osType&apos;:&apos;android&apos;,&apos;appCode&apos;:&apos;snap&apos;,&apos;productCode&apos;:&apos;snap&apos; &#125;); print(&apos;Response status: $&#123;response.body&#125;&apos;); &#125; 返回数据不对 存在问题 HTTP Status 415 不知道什么原因 1234567891011121314151617181920212223242526272829303132333435showTips() async &#123; //TODO loading setState( () &#123; _isLoading = true; &#125;, ); Map map = &#123; &apos;user&apos;: &apos;las@sengled.com&apos;, &apos;pwd&apos;: &apos;123456&apos;, &apos;osType&apos;:&apos;android&apos;, &apos;uuid&apos;:&apos;4CC09670-0623-497B-AB82-F48611FA4C42&apos;, &apos;appCode&apos;:&apos;snap&apos;, &apos;productCode&apos;:&apos;snap&apos; &#125;; print(Api.AuthenCross); print(json.encode(map)); print(await apiRequest(Api.AuthenCross, map)); &#125; Future&lt;String&gt; apiRequest(String url, Map jsonMap) async &#123; HttpClient httpClient = new HttpClient(); HttpClientRequest request = await httpClient.postUrl(Uri.parse(url)); request.headers.set(&apos;content-type&apos;, &apos;application/json&apos;); request.add(utf8.encode(json.encode(jsonMap))); HttpClientResponse response = await request.close(); // todo - you should check the response.statusCode String reply = await response.transform(utf8.decoder).join(); httpClient.close(); return reply; &#125; 返回结果123 I/flutter ( 8344): &#123;&quot;user&quot;:&quot;las@sengled.com&quot;,&quot;pwd&quot;:&quot;123456&quot;,&quot;osType&quot;:&quot;android&quot;,&quot;uuid&quot;:&quot;4CC09670-0623-497B-AB82-F48611FA4C42&quot;,&quot;appCode&quot;:&quot;snap&quot;,&quot;productCode&quot;:&quot;snap&quot;&#125;I/flutter ( 8344): &#123;&quot;ret&quot;:0,&quot;msg&quot;:&quot;success&quot;,&quot;customerId&quot;:168","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter 控件 FittedBox","slug":"android/Flutter/Flutter 控件 FittedBox","date":"2018-09-04T16:15:48.372Z","updated":"2018-09-04T16:30:04.801Z","comments":true,"path":"2018/09/05/android/Flutter/Flutter 控件 FittedBox/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/05/android/Flutter/Flutter 控件 FittedBox/","excerpt":"","text":"Flutter FittedBoxScales and positions its child within itself according to fit. 简介按照其官方的介绍，它主要做了两件事情，缩放（Scale）以及位置调整（Position）。 FittedBox 会在自己的尺寸范围内缩放并且调整child位置，使得child适合其尺寸。做过移动端的，可能会联想到ImageView控件，它是将图片在其范围内，按照规则，进行缩放位置调整。FittedBox跟ImageView是有些类似的，可以猜测出，它肯定有一个类似于ScaleType的属性。 布局行为FittedBox的布局行为还算简单，官方没有给出说明，我在这里简单说一下。由于FittedBox是一个容器，需要让其child在其范围内缩放，因此其布局行为分两种情况： 如果外部有约束的话，按照外部约束调整自身尺寸，然后缩放调整child，按照指定的条件进行布局； 如果没有外部约束条件，则跟child尺寸一致，指定的缩放以及位置属性将不起作用。 继承关系1Object &gt; Diagnosticable &gt; DiagnosticableTree &gt; Widget &gt; RenderObjectWidget &gt; SingleChildRenderObjectWidget &gt; FittedBox 从继承关系可以看出，FittedBox控件是一个基础控件。 示例代码12345678910111213new Container( color: Colors.amberAccent, width: 300.0, height: 300.0, child: new FittedBox( fit: BoxFit.contain, alignment: Alignment.topLeft, child: new Container( color: Colors.red, child: new Text(&quot;FittedBox&quot;), ), ),) 写了一个很简单的例子，加入Container是为了加颜色显示两个区域，读者可以试着修改fit以及alignment查看其不同的效果。 源码解析123456const FittedBox(&#123;Key key,this.fit: BoxFit.contain,this.alignment: Alignment.center,Widget child,&#125;) 属性解析fit：缩放的方式，默认的属性是BoxFit.contain，child在FittedBox范围内，尽可能的大，但是不超出其尺寸。这里注意一点，contain是保持着child宽高比的大前提下，尽可能的填满，一般情况下，宽度或者高度达到最大值时，就会停止缩放。 BoxFit布局表现 alignment：对齐方式，默认的属性是Alignment.center，居中显示child。 源码构造函数如下：12345678@overrideRenderFittedBox createRenderObject(BuildContext context) &#123;return new RenderFittedBox( fit: fit, alignment: alignment, textDirection: Directionality.of(context),);&#125; FittedBox具体实现是由RenderFittedBox进行的。不知道读者有没有发现，目前的一些基础控件，继承自RenderObjectWidget的，widget本身都只是存储了一些配置信息，真正的绘制渲染，则是由内部的createRenderObject所调用的RenderObject去实现的。 RenderFittedBox具体的布局代码如下：123456789if (child != null) &#123; child.layout(const BoxConstraints(), parentUsesSize: true); // 如果child不为null，则按照child的尺寸比率缩放child的尺寸 size = constraints.constrainSizeAndAttemptToPreserveAspectRatio(child.size); _clearPaintData();&#125; else &#123; // 如果child为null，则按照最小尺寸进行布局 size = constraints.smallest;&#125; 场景FittedBox在目前的项目中还未用到过。对于需要缩放调整位置处理的，一般都是图片。笔者一般都是使用Container中的decoration属性去实现相应的效果。对于其他控件需要缩放以及调整位置的，目前还没有遇到使用场景，大家只需要知道有这么一个控件，可以实现这个功能即可。","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter 控件 Center","slug":"android/Flutter/Flutter 控件 Center","date":"2018-09-04T15:33:44.077Z","updated":"2018-09-04T15:34:57.094Z","comments":true,"path":"2018/09/04/android/Flutter/Flutter 控件 Center/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/04/android/Flutter/Flutter 控件 Center/","excerpt":"","text":"Flutter 控件 CenterCenter继承自Align，只不过是将alignment设置为Alignment.center， 其他属性例如widthFactor、heightFactor，布局行为，都与Align完全一样，在这里就不再单独做介绍了。 Center源码如下，没有设置alignment属性，是因为Align默认的对齐方式就是居中。 12345class Center extends Align &#123; /// Creates a widget that centers its child. const Center(&#123; Key key, double widthFactor, double heightFactor, Widget child &#125;) : super(key: key, widthFactor: widthFactor, heightFactor: heightFactor, child: child);&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter 控件 Align","slug":"android/Flutter/Flutter 控件 Align","date":"2018-09-04T15:16:49.658Z","updated":"2018-09-04T15:33:23.874Z","comments":true,"path":"2018/09/04/android/Flutter/Flutter 控件 Align/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/04/android/Flutter/Flutter 控件 Align/","excerpt":"","text":"Flutter 控件 Align在其他端的开发，Align一般都是当做一个控件的属性，并没有拿出来当做一个单独的控件。 Align本身实现的功能并不复杂，设置child的对齐方式，例如居中、居左居右等，并根据child尺寸调节自身尺寸 布局行为Align的布局行为分为两种情况： 当widthFactor和heightFactor为null的时候，当其有限制条件的时候，Align会根据限制条件尽量的扩展自己的尺寸，当没有限制条件的时候，会调整到child的尺寸； 当widthFactor或者heightFactor不为null的时候，Aligin会根据factor属性，扩展自己的尺寸，例如设置widthFactor为2.0的时候，那么，Align的宽度将会是child的两倍。 Align为什么会有这样的布局行为呢？原因很简单，设置对齐方式的话，如果外层元素尺寸不确定的话，内部的对齐就无法确定。因此，会有宽高因子、根据外层限制扩大到最大尺寸、外层不确定时调整到child尺寸这些行为。 继承关系1Object &gt; Diagnosticable &gt; DiagnosticableTree &gt; Widget &gt; RenderObjectWidget &gt; SingleChildRenderObjectWidget &gt; Align 可以看出，Align跟Padding一样，也是一个非常基础的组件，Container中的align属性，也是使用Align去实现的。 例子123456new Align( alignment: Alignment.center, widthFactor: 2.0, heightFactor: 2.0, child: new Text(&quot;Align&quot;),) 例子依旧很简单，设置一个宽高为child两倍区域的Align，其child处在正中间。 源码1234567const Align(&#123; Key key, this.alignment: Alignment.center, this.widthFactor, this.heightFactor, Widget child &#125;) Align的构造函数基本上就是宽高因子、对齐方式属性。 日常使用中，宽高因子属性基本上用的不多。 如果是复杂的布局，Container内部的align属性也可以实现相同的效果。 alignment：对齐方式，一般会使用系统默认提供的9种方式，但是并不是说只有这9种，例如如下的定义。系统提供的9种方式只是预先定义好的。 12/// The top left corner.static const Alignment topLeft = const Alignment(-1.0, -1.0); Alignment实际上是包含了两个属性的，其中第一个参数，-1.0是左边对齐，1.0是右边对齐，第二个参数，-1.0是顶部对齐，1.0是底部对齐。根据这个规则，我们也可以自定义我们需要的对齐方式，例如12/// 居右高于底部1/4处.static const Alignment rightHalfBottom = alignment: const Alignment(1.0, 0.5), widthFactor：宽度因子，如果设置的话，Align的宽度就是child的宽度乘以这个值，不能为负数。 heightFactor：高度因子，如果设置的话，Align的高度就是child的高度乘以这个值，不能为负数。 源码解析123456789@override RenderPositionedBox createRenderObject(BuildContext context) &#123; return new RenderPositionedBox( alignment: alignment, widthFactor: widthFactor, heightFactor: heightFactor, textDirection: Directionality.of(context), ); &#125; Align的实际构造调用的是RenderPositionedBox。 RenderPositionedBox的布局表现如下： 123456789101112131415// 根据_widthFactor、_heightFactor以及限制因素来确定宽高final bool shrinkWrapWidth = _widthFactor != null || constraints.maxWidth == double.infinity;final bool shrinkWrapHeight = _heightFactor != null || constraints.maxHeight == double.infinity;if (child != null) &#123; // 如果child不为null，则根据规则设置Align的宽高，如果需要缩放，则根据_widthFactor是否为null来进行缩放，如果不需要，则尽量扩展。 child.layout(constraints.loosen(), parentUsesSize: true); size = constraints.constrain(new Size(shrinkWrapWidth ? child.size.width * (_widthFactor ?? 1.0) : double.infinity, shrinkWrapHeight ? child.size.height * (_heightFactor ?? 1.0) : double.infinity)); alignChild();&#125; else &#123; // 如果child为null，如果需要缩放，则变为0，否则就尽量扩展 size = constraints.constrain(new Size(shrinkWrapWidth ? 0.0 : double.infinity, shrinkWrapHeight ? 0.0 : double.infinity));&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter 控件 Padding","slug":"android/Flutter/Flutter 控件 Padding","date":"2018-09-04T14:44:56.940Z","updated":"2018-09-04T15:16:17.916Z","comments":true,"path":"2018/09/04/android/Flutter/Flutter 控件 Padding/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/04/android/Flutter/Flutter 控件 Padding/","excerpt":"","text":"PaddingPadding的布局分为两种情况： 当child为空的时候，会产生一个宽为left+right，高为top+bottom的区域； 当child不为空的时候，Padding会将布局约束传递给child，根据设置的padding属性，缩小child的布局尺寸。然后Padding将自己调整到child设置了padding属性的尺寸，在child周围创建空白区域。 集成关系1Object &gt; Diagnosticable &gt; DiagnosticableTree &gt; Widget &gt; RenderObjectWidget &gt; SingleChildRenderObjectWidget &gt; Padding 从继承关系可以看出，Padding控件是一个基础控件，不像Container这种组合控件。Container中的margin以及padding属性都是利用Padding控件去实现的。 关于SingleChildRenderObjectWidgetSingleChildRenderObjectWidget是RenderObjectWidgets的一个子类，用于限制只能有一个子节点。它只提供child的存储，而不提供实际的更新逻辑。 关于RenderObjectWidgetsRenderObjectWidgets为RenderObjectElement提供配置，而RenderObjectElement包含着（wrap）RenderObject，RenderObject则是在应用中提供实际的绘制（rendering）的元素。 示例代码实例代码直接上官方的例子，非常的简单： 1234new Padding( padding: new EdgeInsets.all(8.0), child: const Card(child: const Text(&apos;Hello World!&apos;)),) 例子中对Card设置了一个宽度为8的内边距。 源码12345const Padding(&#123; Key key, @required this.padding, Widget child, &#125;) padding：padding的类型为EdgeInsetsGeometry，EdgeInsetsGeometry是EdgeInsets以及EdgeInsetsDirectional的基类。在实际使用中不涉及到国际化，例如适配阿拉伯地区等，一般都是使用EdgeInsets。EdgeInsetsDirectional光看命名就知道跟方向相关，因此它的四个边距不限定上下左右，而是根据方向来定的。 1.5.2 源码1234567@override RenderPadding createRenderObject(BuildContext context) &#123; return new RenderPadding( padding: padding, textDirection: Directionality.of(context), );&#125; Padding的创建函数，实际上是由RenderPadding来进行的。 关于RenderPadding的实际布局表现，当child为null的时候： 1234567if (child == null) &#123; size = constraints.constrain(new Size( _resolvedPadding.left + _resolvedPadding.right, _resolvedPadding.top + _resolvedPadding.bottom )); return;&#125; 返回一个宽为_resolvedPadding.left+_resolvedPadding.right，高为_resolvedPadding.top+_resolvedPadding.bottom的区域。 当child不为null的时候，经历了三个过程，即调整child尺寸、调整child位置以及调整Padding尺寸，最终达到实际的布局效果。 12345678910111213// 调整child尺寸final BoxConstraints innerConstraints = constraints.deflate(_resolvedPadding);child.layout(innerConstraints, parentUsesSize: true);// 调整child位置final BoxParentData childParentData = child.parentData;childParentData.offset = new Offset(_resolvedPadding.left, _resolvedPadding.top);// 调整Padding尺寸size = constraints.constrain(new Size( _resolvedPadding.left + child.size.width + _resolvedPadding.right, _resolvedPadding.top + child.size.height + _resolvedPadding.bottom)); 到此处，上面介绍的padding布局行为就解释的通了。","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android 第三方登陆 Firebase","slug":"android/Features/android 第三方登陆 firebase","date":"2018-09-03T10:00:03.485Z","updated":"2018-10-23T08:37:18.995Z","comments":true,"path":"2018/09/03/android/Features/android 第三方登陆 firebase/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/03/android/Features/android 第三方登陆 firebase/","excerpt":"","text":"第三方登陆 Firebase参考 Firebase 参考 Firebase Android 代码Firebase Android github 注意 app/src/main/res/values/ids.xml 中 添加 对应的id Firebase 中的UID 问题 并非 google Facebook 的uid 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566this.facebookLoginButton.setReadPermissions(&quot;email&quot;, &quot;public_profile&quot;); this.facebookLoginButton.registerCallback(mCallbackManager, new FacebookCallback&lt;LoginResult&gt;() &#123; @Override public void onSuccess(LoginResult loginResult) &#123; LogUtils.d(&quot;facebook:onSuccess:&quot; + loginResult); handleFacebookAccessToken(loginResult.getAccessToken()); &#125; &#125; private void handleFacebookAccessToken(final AccessToken token) &#123; Log.d(TAG, &quot;handleFacebookAccessToken:&quot; + token.getUserId()); // [START_EXCLUDE silent] loadingProgressDialog = UIHelper.showLoading(mActivity, false, loadingProgressDialog); // [END_EXCLUDE] AuthCredential credential = FacebookAuthProvider.getCredential(token.getToken()); FirebaseAuth.getInstance().signInWithCredential(credential) .addOnCompleteListener(this, new OnCompleteListener&lt;AuthResult&gt;() &#123; @Override public void onComplete(@NonNull Task&lt;AuthResult&gt; task) &#123; if (task.isSuccessful()) &#123; // Sign in success, update UI with the signed-in user&apos;s information LogUtils.e(&quot;signInWithCredential:success&quot;); FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser(); LogUtils.e(user.getEmail()); LogUtils.e(user.getPhoneNumber()); LogUtils.e(user.getUid()); LogUtils.e(user.getPhotoUrl().toString()); LogUtils.e(user.getDisplayName()); String photoUrl = user.getPhotoUrl().toString() ; if (!TextUtils.isEmpty(photoUrl))&#123; photoUrl = photoUrl + &quot;?width=300&amp;height=300&quot;; &#125; IUserManager userManager = new IUserManager(-1, user.getEmail(), user.getDisplayName(), photoUrl, token.getUserId(), Common.LoginPlatform.facebookLoginPlatform); userManager.token = token.getToken(); thirdPlatFormLogin(userManager); LogUtils.e(user.toString());// updateUI(user); &#125; else &#123; // If sign in fails, display a message to the user. UIHelper.dismissLoading(loadingProgressDialog); String hint = UIUtils.getString(R.string.ActivityLogin_Authentication_Failed, Common.LoginPlatform.facebookLoginPlatform); ToastUtils.showShort(hint); Log.w(TAG, &quot;signInWithCredential:failure&quot;, task.getException());// Toast.makeText(mActivity, &quot;Authentication failed.&quot;,// Toast.LENGTH_SHORT).show();// updateUI(null); &#125; // [START_EXCLUDE]// hideProgressDialog(); // [END_EXCLUDE] &#125; &#125;); &#125; user.getUid() 是否 Firebase 的 正确获取方式token.getUserId()","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android 第三方登陆","slug":"android-第三方登陆","permalink":"http://www.kylinhuang.cn/tags/android-第三方登陆/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android 第三方登陆 google","slug":"android/Features/android 第三方登陆 google","date":"2018-09-03T09:20:11.648Z","updated":"2018-09-03T09:50:16.688Z","comments":true,"path":"2018/09/03/android/Features/android 第三方登陆 google/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/03/android/Features/android 第三方登陆 google/","excerpt":"","text":"第三方登陆 google参考 google 控制台配置 参考","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android 第三方登陆","slug":"android-第三方登陆","permalink":"http://www.kylinhuang.cn/tags/android-第三方登陆/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android 第三方登陆 FaceBook","slug":"android/Features/android 第三方登陆 Facebook登陆","date":"2018-09-03T09:10:36.862Z","updated":"2018-09-03T09:19:12.570Z","comments":true,"path":"2018/09/03/android/Features/android 第三方登陆 Facebook登陆/","link":"","permalink":"http://www.kylinhuang.cn/2018/09/03/android/Features/android 第三方登陆 Facebook登陆/","excerpt":"","text":"第三方登陆 FaceBook参考 Facebook 用户信息参考 Facebook 官方文档 很全","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android 第三方登陆","slug":"android-第三方登陆","permalink":"http://www.kylinhuang.cn/tags/android-第三方登陆/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Dart 入门基础 函数与运算符","slug":"android/Flutter/dart/Dart 入门基础 函数与运算符","date":"2018-08-26T05:30:20.849Z","updated":"2018-09-04T13:52:05.231Z","comments":true,"path":"2018/08/26/android/Flutter/dart/Dart 入门基础 函数与运算符/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/26/android/Flutter/dart/Dart 入门基础 函数与运算符/","excerpt":"","text":"Dart 入门基础 函数与运算符函数基本语法123456789101112131415161718void main()&#123; printNameA(&quot;XiaoMing&quot;); printNameB(&quot;XiaoMing&quot;); printNameC(&quot;XiaoMing&quot;);&#125;// 规范语法void printNameA(String name)&#123; print(&quot;My name is $name.&quot;);&#125;// 通俗语法printNameB(name)&#123; print(&quot;My name is $name.&quot;);&#125;// 速写语法void printNameC(String name) =&gt; print(&quot;My name is $name.&quot;); 主函数main() 函数，作为程序的入口，返回值是void，还有一个可选参数1234void main(List&lt;String&gt; arguments) &#123; print(arguments); print(arguments.length);&#125; 可选参数命名参数123456789void main() &#123; printName(name:&quot;XiaoMing&quot;, age:14);&#125;// 用 &#123; &#125; 把参数包装起来，就能标识命名参数// 用 : 指定默认值void printName(&#123;String name, int age, String sex:&quot;female&quot;&#125;)&#123; print(&quot;My name is $name, $age years old, gender $sex.&quot;);&#125; 位置参数 1234567891011121314151617main(List&lt;String&gt; arguments) &#123; print(say(&quot;Bob&quot;, &quot;Howdy&quot;)); print(say(&quot;Bob&quot;, &quot;Howdy&quot;, &quot;smoke signal&quot;));&#125;// 用 [ ] 把参数包装起来，就能标识位置参数// 用 = 指定默认值String say(String from, String msg, [String device, String mood = &quot;good&quot;])&#123; String result = &quot;$from says $msg.&quot;; if (device != null) &#123; result = &quot;$result with a $device.&quot;; &#125; if (mood != null) &#123; result = &apos;$result (in a $mood mood)&apos;; &#125; return result;&#125; 高阶函数将函数作为参数传递给另一个函数 12345678void main() &#123; List list = [1, 2, 3]; list.forEach(printElement);&#125;printElement(element)&#123; print(element);&#125; 将一个函数分配给一个变量 1234void main() &#123; var loudify = (msg) =&gt; &quot;!!! $&#123;msg.toUpperCase()&#125; !!!&quot;; print(loudify(&quot;hello&quot;));&#125; 闭包dart的闭包就是函数对象，其实跟JavaScript的闭包函数差不多，理论请参考JavaScript的闭包函数 12345678910111213141516void main() &#123; // 创建一个函数add2，返回加2 Function add2 = makeAdder(2); // 创建一个函数add4，返回加4 Function add4 = makeAdder(4); // 2 + 3 = 5 print(add2(3)); // 4 + 3 = 7 print(add4(3));&#125;// 返回一个函数对象，功能是返回累加的数字Function makeAdder(int addBy)&#123; return (int i) =&gt; addBy + i;&#125; 函数判断1234567891011121314151617181920212223242526272829void main() &#123; var x; // 比较高阶函数 x = foo; print(foo == x); // 比较静态方法 x = SomeClass.bar; print(SomeClass.bar == x); // 比较实例方法 var v = new SomeClass(); var w = new SomeClass(); var y = w; x = w.baz; print(y.baz == x); print(v.baz != w.baz);&#125;// 一个高阶函数foo()&#123;&#125;class SomeClass&#123; // 一个静态方法 static void bar()&#123;&#125; // 一个实例方法 void baz()&#123;&#125;&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Dart 入门基础 集合","slug":"android/Flutter/dart/Dart 入门基础 集合","date":"2018-08-26T04:56:53.689Z","updated":"2018-09-04T13:52:15.709Z","comments":true,"path":"2018/08/26/android/Flutter/dart/Dart 入门基础 集合/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/26/android/Flutter/dart/Dart 入门基础 集合/","excerpt":"","text":"Dart 入门基础 集合Dart核心库提供了List（列表）、Map（映射）、Set（集）三种集合类型 List（列表）固定长度的列表，一旦定义就无法改变长度 1234List&lt;int&gt; fixedLengthList = new List(5);fixedLengthList[0] = 87;print(fixedLengthList);print(fixedLengthList[0]); 可改变长度的列表，可以根据需要改变长度 1234567891011List&lt;int&gt; growableList = [1, 2];print(growableList);growableList.length = 0;print(growableList);growableList.add(499);print(growableList);growableList[0] = 87;print(growableList); 构造函数List([int length])123456789101112// 创建固定长度的列表List fixedLengthList = new List(3);print(fixedLengthList.length);// 创建可改变长度的列表List growableListA = new List();print(growableListA.length);growableListA.length = 3;print(growableListA.length);// 创建可在固定范围内改变长度的列表List growableListB = new List()..length = 500; List.unmodifiable(Iterable elements)123// 创建包含所有元素的固定长度列表List fixedLengthListB = new List.unmodifiable([1, 2, 3]);print(fixedLengthListB.length); List.from(Iterable elements, {bool growable: true})12345// 创建包含所有元素的可改变长度列表List growableListC = new List.from([1, 2, 3]);print(growableListC.length);growableListC.add(4);print(growableListC.length); List.filled(int length, E fill, {bool growable: false})123// 为所有元素统一赋值List fixedLengthList = new List&lt;int&gt;.filled(3, 0);print(fixedLengthList); List.generate(int length, E generator(int index), {bool growable: true})12345// 用生成器给所有元素赋初始值List fixedLengthList = new List&lt;int&gt;.generate(4, (int index) &#123; return index * index;&#125;);print(fixedLengthList); 所有属性1234567891011121314151617181920212223List fixedLengthList = new List&lt;int&gt;.generate(4, (int index) &#123; return index * index;&#125;);// 返回第一个元素print(fixedLengthList.first);// 返回最后一个元素print(fixedLengthList.last);// 返回列表的哈希码print(fixedLengthList.hashCode);// 列表是否为空print(fixedLengthList.isEmpty);// 列表是否不为空print(fixedLengthList.isNotEmpty);// 返回一个新的迭代器print(fixedLengthList.iterator);// 列表中多少个元素print(fixedLengthList.length);// 返回相反顺序的列表print(fixedLengthList.reversed);// 返回对象运行时的类型print(fixedLengthList.runtimeType);// 列表是否只有一个元素，则否报错print(fixedLengthList.single); 常用方法返回多种类型的输出123456789List growableList = new List.from([1, 2, 3]);// 返回列表的字符串表示print(growableList.toString());// 返回列表的集表示print(growableList.toSet());// 返回列表的列表表示print(growableList.toList());// 用指定字符连接列表元素print(growableList.join(&quot;,&quot;)); 给列表增加元素12345678910111213List growableList = new List();// 增加一个元素到列表末尾growableList.add(10);print(growableList);// 增加一个元素到指定下标growableList.insert(1, 20);print(growableList);// 增加一个列表到列表末尾growableList.addAll([30, 60]);print(growableList);// 增加一个列表到指定下标growableList.insertAll(3, [40, 50]);print(growableList); 各种删除操作的方法123456789101112131415161718192021222324252627282930313233343536373839List growableList = new List.from([1, 2, 3, 3, 3, 4]);// 移除列表中匹配的第一个元素growableList.remove(3);print(growableList);// 移除列表中第几个元素growableList.removeAt(0);print(growableList);// 移除列表中最后一个元素growableList.removeLast();print(growableList);// 移除列表的所有元素growableList.clear();print(growableList);List&lt;int&gt; listB = [1, 2, 3, 4, 5];// 移除开始下标（不包括）至结束下标（包括）内的元素listB.removeRange(1, 4);print(listB);List&lt;int&gt; listA = [1, 2, 3, 4, 5];// 移除并替换开始下标（不包括）至结束下标（包括）内的元素listA.replaceRange(1, 4, [6, 7]);print(listA);List&lt;String&gt; numbersA = [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;, &apos;four&apos;];/* 移除所有满足条件的元素，此为Dart的一种速写语法 numbersA.removeWhere((item) =&gt; item.length == 3); */numbersA.removeWhere((item)&#123; return item.length == 3;&#125;);print(numbersA);List&lt;String&gt; numbersB = [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;, &apos;four&apos;];/* 移除所有不满足条件的元素，此为Dart的一种速写语法 numbersB.retainWhere((item) =&gt; item.length == 3); */numbersB.retainWhere((item)&#123; return item.length == 3;&#125;);print(numbersB); 按顺序迭代列表1234List&lt;String&gt; names = [&quot;Alice&quot;, &quot;Daphne&quot;, &quot;Elizabeth&quot;, &quot;Joanna&quot;];names.forEach((name)&#123; print(name);&#125;); 各种查询输出方法123456789101112131415List&lt;String&gt; names = [&apos;Abbey&apos;, &apos;Fallon&apos;, &apos;Xenia&apos;, &apos;Callie&apos;, &apos;Callie&apos;];// 列表中是否包含指定元素print(names.contains(&apos;Fallon&apos;));// 返回列表中的第几个元素print(names.elementAt(2));// 返回列表中第一个匹配元素的下标print(names.indexOf(&apos;Callie&apos;));// 返回列表中最后一个匹配元素的下标print(names.lastIndexOf(&apos;Callie&apos;));List&lt;String&gt; colors = [&apos;red&apos;, &apos;green&apos;, &apos;blue&apos;, &apos;orange&apos;, &apos;pink&apos;];// 返回从开始下标（包括）到结束下标（不包括）元素的列表print(colors.sublist(1, 3));// 返回从开始下标（包括）到最后一个元素的列表print(colors.sublist(1)); 对列表元素做一些改动1234567891011121314List&lt;String&gt; listA = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];// 从第几个元素开始覆盖原列表listA.setAll(1, [&apos;bee&apos;, &apos;sea&apos;]);print(listA);List&lt;int&gt; listB = [1, 2, 3, 4, 5];// 对列表进行随机排序listB.shuffle();print(listB);List&lt;int&gt; listC = [1, 2, 3, 4, 5];// 对列表进行顺序排序listC.sort();print(listC); Map（映射）映射也就是键值对，每个键都有与之相关联的一个值 构造函数Map()12Map&lt;String, int&gt; map = &#123;&quot;a&quot;:1, &quot;b&quot;:2, &quot;c&quot;:3&#125;;print(map[&quot;a&quot;]); Map.fromIterable(Iterable iterable, {K key(element), V value(element)})123456789List&lt;int&gt; list = [1, 2, 3];// 以下代码用到了速写语法，后面会详细讲解Map&lt;String, int&gt; map = new Map.fromIterable(list, key: (item) =&gt; item.toString(), value: (item) =&gt; item * item);// 1 + 4 = 5print(map[&apos;1&apos;] + map[&apos;2&apos;]);// 9 - 4 = 5print(map[&apos;3&apos;] - map[&apos;2&apos;]); Map.fromIterables(Iterable keys, Iterable values)12345List&lt;String&gt; letters = [&apos;b&apos;, &apos;c&apos;];List&lt;String&gt; words = [&apos;bad&apos;, &apos;cat&apos;];Map&lt;String, String&gt; map = new Map.fromIterables(letters, words);// bad + cat = badcatprint(map[&apos;b&apos;] + map[&apos;c&apos;]); 所有属性123456789101112131415Map&lt;String, int&gt; map = &#123;&quot;a&quot;:1, &quot;b&quot;:2, &quot;c&quot;:3&#125;;// 返回映射的哈希码print(map.hashCode);// 映射上是否没有键值对print(map.isEmpty);// 映射上是否有键值对print(map.isNotEmpty);// 返回映射的所有键print(map.keys);// 返回映射的所有值print(map.values);// 返回映射上键值对的数目print(map.length);// 返回对象运行时的类型print(map.runtimeType); 常用方法1234567891011121314151617181920212223242526Map&lt;String, int&gt; map = &#123;&quot;a&quot;:1, &quot;b&quot;:2, &quot;c&quot;:3&#125;;// 返回映射的字符串表示print(map.toString());// 按顺序迭代映射map.forEach((key, value)&#123; print(key + &quot; : &quot; + value.toString());&#125;);// 添加其他键值对到映射中map.addAll(&#123;&quot;d&quot;:4, &quot;e&quot;:5&#125;);// 映射是否包含指定键print(map.containsKey(&quot;d&quot;));// 映射是否包含指定值print(map.containsValue(5));// 删除指定键值对map.remove(&quot;a&quot;);// 删除所有键值对map.clear();Map&lt;String, int&gt; scores = &#123;&apos;Bob&apos;: 36&#125;;for (var key in [&apos;Bob&apos;, &apos;Rohan&apos;, &apos;Sophena&apos;]) &#123; // 查找指定键，如果不存在就添加 scores.putIfAbsent(key, () =&gt; key.length);&#125;print(scores[&apos;Bob&apos;]);print(scores[&apos;Rohan&apos;]);print(scores[&apos;Sophena&apos;]); Set（集）集的每个对象只能出现一次，不能重复 1234Set villains = new Set();villains.add(&apos;Joker&apos;);villains.addAll( [&apos;Lex Luther&apos;, &apos;Voldemort&apos;] );print(villains); 所有属性12345678910111213141516171819Set villains = new Set.from([&apos;Joker&apos;, &apos;Lex Luther&apos;, &apos;Voldemort&apos;]);// 返回第一个元素print(villains.first);// 返回最后一个元素print(villains.last);// 返回元素的数量print(villains.length);// 集只有一个元素就返回元素，否则异常//print(villains.single);// 集是否没有元素print(villains.isEmpty);// 集是否有元素print(villains.isNotEmpty);// 返回集的哈希码print(villains.hashCode);// 返回对象运行时的类型print(villains.runtimeType);// 返回集的可迭代对象print(villains.iterator); 常用方法123456789101112131415161718192021222324Set villains = new Set.from([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]);// 添加一个值villains.add(&quot;D&quot;);print(villains);// 添加一些值villains.addAll([&quot;E&quot;, &quot;F&quot;]);print(villains);// 以字符串输出集print(villains.toString());// 将集的值用指定字符连接，以字符串输出print(villains.join(&quot;,&quot;));// 集是否包含指定值print(villains.contains(&quot;C&quot;));// 集是否包含一些值print(villains.containsAll([&quot;E&quot;, &quot;F&quot;]));// 返回集的第几个值print(villains.elementAt(1));// 删除集的指定值，成功则返回trueprint(villains.remove(&quot;A&quot;));// 删除集的一些值villains.removeAll([&quot;B&quot;, &quot;C&quot;]);// 删除集的所有值villains.clear();","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Dart 入门基础 正则表达式","slug":"android/Flutter/dart/Dart 入门基础 正则表达式","date":"2018-08-26T04:52:05.963Z","updated":"2018-09-04T13:52:12.403Z","comments":true,"path":"2018/08/26/android/Flutter/dart/Dart 入门基础 正则表达式/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/26/android/Flutter/dart/Dart 入门基础 正则表达式/","excerpt":"","text":"Dart 入门基础 正则表达式部分属性1234567891011RegExp exp = new RegExp(r&quot;(\\w+)&quot;);// 返回正则表达式的哈希码print(exp.hashCode);// 正则表达式是否区分大小写print(exp.isCaseSensitive);// 正则表达式是否匹配多行print(exp.isMultiLine);// 返回源正则表达式字符串print(exp.pattern);// 返回对象运行时的类型print(exp.runtimeType); 常用方法12345678910111213RegExp exp = new RegExp(r&quot;(\\w+)&quot;);// 返回正则表达式匹配项的可迭代对象print(exp.allMatches(&quot;abc def ghi&quot;));// 搜索并返回第一个匹配项，没有则返回nullprint(exp.firstMatch(&quot;&quot;));// 正则表达式是否找到匹配项print(exp.hasMatch(&quot;as&quot;));// 从第几个字符开始匹配正则表达式print(exp.matchAsPrefix(&quot;ab cd&quot;, 3));// 返回正则表达式的第一个匹配字符串print(exp.stringMatch(&quot;abc de&quot;));// 返回正则表达式的字符串表示print(exp.toString()); 例子验证邮政编码的正则，返回是否匹配的布尔值 12RegExp postalcode = new RegExp(r&apos;(\\d&#123;6&#125;)&apos;);print(postalcode.hasMatch(&quot;518000&quot;)); 验证手机号码的正则，以Iterable&lt; Match &gt;返回所有匹配项 123456RegExp mobile = new RegExp(r&quot;(0|86|17951)?(13[0-9]|15[0-35-9]|17[0678]|18[0-9]|14[57])[0-9]&#123;8&#125;&quot;);Iterable&lt;Match&gt; mobiles = mobile.allMatches(&quot;13812345678 12345678901 17012345678&quot;);for (Match m in mobiles) &#123; String match = m.group(0); print(match);&#125; 验证网址URL的正则，如果匹配成功以Match返回匹配项，否则返回null 12RegExp url = new RegExp(r&quot;^((https|http|ftp|rtsp|mms)?:\\/\\/)[^\\s]+&quot;);print(url.firstMatch(&quot;http://www.google.com&quot;)); 验证身份证号码的正则，返回第一个匹配的字符串 12RegExp identity = new RegExp(r&quot;\\d&#123;17&#125;[\\d|x]|\\d&#123;15&#125;&quot;);print(identity.stringMatch(&quot;My id number is 35082419931023527x&quot;));","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Dart 入门基础 基础类型","slug":"android/Flutter/dart/Dart 入门基础 基础类型","date":"2018-08-26T04:30:14.489Z","updated":"2018-09-18T07:49:37.224Z","comments":true,"path":"2018/08/26/android/Flutter/dart/Dart 入门基础 基础类型/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/26/android/Flutter/dart/Dart 入门基础 基础类型/","excerpt":"","text":"dart 语言 https://www.dartlang.org Dart 入门基础 基础类型变量 Variables12345 var name = &apos;Bob&apos;;// dynamic name = &apos;Bob&apos;;// Object name = &apos;Bob&apos;;// name = new Object(); 常量 Final and const12345678910111213final name = &apos;Bob&apos;; // Without a type annotationfinal String nickname = &apos;Bobby&apos;;const bar = 1000000; // Unit of pressure (dynes/cm2)const double atm = 1.01325 * bar; // Standard atmosphere var foo = const [1]; final bar = const [1,2,3]; const baz = const [5]; // Equivalent to `const []` Built-in types numbers strings booleans lists (also known as arrays) maps runes (for expressing Unicode characters in a string) symbols Numbers int double 12345int x = 1;int hex = 0xDEADBEEF;double y = 1.1;double exponents = 1.42e5; 数字与布尔值部分属性12345678910111213141516171819202122232425262728293031323334353637int figureA = -93;// figureA是否为负数print(figureA.isNegative);// figureA是否是有限的print(figureA.isFinite);// figureA是否正无穷大或负无穷大print(figureA.isInfinite);double figureB = 64.742;// 返回figureB的符号，-1.0:值小于0、+1.0:值大于0、-0.0/0.0/NaN:值是其本身print(figureB.sign);// 返回figureB运行时的类型print(figureB.runtimeType);// 返回figureB的哈希码print(figureB.hashCode);int figureC = 13;// figureC是否为奇数print(figureC.isOdd);// figureC是否为偶数print(figureC.isEven);// 返回figureC所占存储位print(figureC.bitLength); 常用方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849int figureA = -93;// 返回figureA的绝对值print(figureA.abs());// 返回figureA的字符串print(figureA.toString());double figureB = 64.742;// 返回figureB的整数值print(figureB.toInt());// 返回figureB的双精度值print(figureB.toDouble());// 返回大于figureB的双精度值print(figureB.ceilToDouble());// 返回小于figureB的双精度值print(figureB.floorToDouble());// 返回figureB四舍五入的双精度值print(figureB.roundToDouble());// 返回figureB保留几位小数的字符串print(figureB.toStringAsFixed(2));// 返回figureB保留几位小数后精确结果的字符串print(figureB.toStringAsPrecision(3));int figureC = 31;// figureC对比其他整数，0:相同、1:大于、-1:小于print(figureC.compareTo(20));// 将figureC控制在指定区间的整数print(figureC.clamp(20, 25));// 返回figureC转换成指定基数(进制)的字符串print(figureC.toRadixString(16));int figureD = 12;// 返回figureD与其他整数的最大公约数print(figureD.gcd(18));// 返回figureDg与其他整数的截取余数print(figureD.remainder(18));// 返回figureD几次幂值的字符串print(figureD.toStringAsExponential(2)); 字符串常量与变量字符串常量String是一成不变的，一旦定义就不能改变 1234567String name = &quot;XiaoMing say : \\n&quot;;String say = &quot;&quot;&quot;Keep on going ...never give up ...never say die ...&quot;&quot;&quot;;print(name + say); 部分属性123456789101112131415String str = &quot;Hello world!&quot;;// 返回字符串的UTF-16代码单元列表print(str.codeUnits);// 返回根据代码单元生成的哈希码print(str.hashCode);// 字符串是否为空print(str.isEmpty);// 字符串是否不为空print(str.isNotEmpty);// 字符串的长度print(str.length);// 返回字符串Unicode代码的可迭代对象print(str.runes);// 返回对象运行时的类型print(str.runtimeType); 常用方法返回对象的字符串表示 12String str = &quot;Hello world!&quot;;print(str.toString()); 截取字符串123String str = &apos;Dart is fun&apos;;String newStr = str.substring(0, 4);print(newStr); 在字符串中插入字符串12String name = &quot;XiaoMing&quot;;print(&quot;My name is $&#123;name&#125;&quot;); 输出字符串的Unicode编码123String str = &quot;Dart&quot;;print(str.codeUnitAt(0));print(str.codeUnits); 去掉字符串前后空格1234String str = &quot;\\tDart is fun\\n&quot;;print(str.trimLeft());print(str.trimRight());print(str.trim()); 字符串的大小写转换123String str = &quot;ABCdef&quot;;print(str.toLowerCase());print(str.toUpperCase()); 拆分字符串12345String strA = &quot;Hello world!&quot;;print(strA.split(&quot; &quot;));String strB = &quot;abba&quot;;print(strB.split(new RegExp(r&quot;b*&quot;))); 是否包含其他字符串12345String str = &apos;Dart strings&apos;;print(str.contains(&apos;D&apos;));print(str.contains(new RegExp(r&apos;[A-Z]&apos;)));print(str.contains(&apos;D&apos;, 0));print(str.contains(new RegExp(r&apos;[A-Z]&apos;), 0)); 在字符串前后补占位符123String str = &quot;86&quot;;print(str.padLeft(4, &apos;0&apos;));print(str.padRight(4, &apos;0&apos;)); 获取指定字符出现的位置1234567String str = &apos;Dartisans&apos;;print(str.indexOf(&apos;art&apos;));print(str.indexOf(new RegExp(r&apos;[A-Z][a-z]&apos;)));print(str.lastIndexOf(&apos;a&apos;));print(str.lastIndexOf(new RegExp(r&apos;a(r|n)&apos;))); 替换字符串中所有匹配字符12String str = &quot;resume&quot;;print(str.replaceAll(new RegExp(r&apos;e&apos;), &apos;é&apos;)); 字符串变量StringBuffer是可改变的，定义后还可以再修改 1234StringBuffer xiaomingSaid = new StringBuffer();xiaomingSaid.write(&quot;All the world&apos;s a stage ... &quot;);xiaomingSaid.write(&quot;And all the men and women merely players ...&quot;);print(xiaomingSaid); 部分属性123456789101112StringBuffer strBuf = new StringBuffer();strBuf.write(&quot;Sow nothing, reap nothing.&quot;);// 返回字符串缓冲区的哈希码print(strBuf.hashCode);// 字符串缓冲区是否为空print(strBuf.isEmpty);// 字符串缓冲区是否不为空print(strBuf.isNotEmpty);// 返回字符串缓冲区累积内容的长度print(strBuf.length);// 返回对象运行时的类型print(runtimeType); 常用方法1234567StringBuffer strBuf = new StringBuffer();// 添加字符串到字符串缓冲区内strBuf.write(&quot;Do one thing at a time, and do well.&quot;);// 返回字符串缓冲区的所有内容print(strBuf.toString());// 清除字符串缓冲区strBuf.clear();","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter 简介","slug":"android/Flutter/Flutter 简介","date":"2018-08-26T03:58:40.090Z","updated":"2018-09-04T13:53:23.440Z","comments":true,"path":"2018/08/26/android/Flutter/Flutter 简介/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/26/android/Flutter/Flutter 简介/","excerpt":"","text":"FlutterFlutter 官网Flutter 中文网 Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。 Flutter目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。 应用程序是用Dart语言编写的 Flutter优势 提高开发效率 同一份代码开发iOS和Android 用更少的代码做更多的事情 轻松迭代 在应用程序运行时更改代码并重新加载（通过热重载） 修复崩溃并继续从应用程序停止的地方进行调试 创建美观，高度定制的用户体验 受益于使用Flutter框架提供的丰富的Material Design和Cupertino（iOS风格）的widget 实现定制、美观、品牌驱动的设计，而不受原生控件的限制 参考","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter 控件 Text","slug":"android/Flutter/Flutter 控件 Text","date":"2018-08-24T11:00:07.386Z","updated":"2018-12-16T06:10:22.095Z","comments":true,"path":"2018/08/24/android/Flutter/Flutter 控件 Text/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/24/android/Flutter/Flutter 控件 Text/","excerpt":"","text":"Flutter 控件 TextText 文本Text控件，是一个常用的控件，下面的实例有7个不同样式的文本控件 Properties type 含义 example width double 宽 width: 128.0 height double 高 height: 128.0 alignment AlignmentGeometry child Widget constraints BoxConstraints decoration Decoration foregroundDecoration Decoration margin EdgeInsetsGeometry padding EdgeInsetsGeometry transform Matrix4 demo 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879import &apos;package:flutter/material.dart&apos;;class ContainerDemo extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new Scaffold( appBar: new AppBar( title: new Text(&apos;文本控件&apos;), ), body: new Column( children: &lt;Widget&gt;[ new Text( &apos;红色+黑色删除线+25号&apos;, style: new TextStyle( color: const Color(0xffff0000), decoration: TextDecoration.lineThrough, decorationColor: const Color(0xff000000), fontSize: 25.0, ), ), new Text( &apos;橙色+下划线+24号&apos;, style: new TextStyle( color: const Color(0xffff9900), decoration: TextDecoration.underline, fontSize: 24.0, ), ), new Text( &apos;虚线上划线+23号+倾斜&apos;, style: new TextStyle( decoration: TextDecoration.overline, decorationStyle: TextDecorationStyle.dashed, fontSize: 23.0, fontStyle: FontStyle.italic, ), ), new Text( &apos;serif字体+24号&apos;, style: new TextStyle( fontFamily: &apos;serif&apos;, fontSize: 26.0, ), ), new Text( &apos;monospace字体+24号+加粗&apos;, style: new TextStyle( fontFamily: &apos;monospace&apos;, fontSize: 24.0, fontWeight: FontWeight.bold, ), ), new Text( &apos;天蓝色+25号+2行跨度&apos;, style: new TextStyle( color: const Color(0xff4a86e8), fontSize: 25.0, height: 2.0, ), ), new Text( &apos;24号+2个字母间隔&apos;, style: new TextStyle( fontSize: 24.0, letterSpacing: 2.0, ), ), ] ), ); &#125;&#125;void main() &#123; runApp( new MaterialApp( title: &apos;Flutter教程&apos;, home: new ContainerDemo(), ), );&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter 控件 Container","slug":"android/Flutter/Flutter 控件 Container","date":"2018-08-24T10:05:05.010Z","updated":"2018-09-04T14:18:15.395Z","comments":true,"path":"2018/08/24/android/Flutter/Flutter 控件 Container/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/24/android/Flutter/Flutter 控件 Container/","excerpt":"","text":"Flutter 控件 ContainerContainer的组成如下： 最里层的是child元素； child元素首先会被padding包着； 然后添加额外的constraints限制； 最后添加margin。 Container的绘制的过程如下： 首先会绘制transform效果； 接着绘制decoration； 然后绘制child； 最后绘制foregroundDecoration。 Container自身尺寸的调节分两种情况： Container在没有子节点（children）的时候，会试图去变得足够大。除非constraints是unbounded限制，在这种情况下，Container会试图去变得足够小。 带子节点的Container，会根据子节点尺寸调节自身尺寸，但是Container构造器中如果包含了width、height以及constraints，则会按照构造器中的参数来进行尺寸的调节。 Container 容器1234567891011121314Container(&#123; Key key, this.alignment, this.padding, Color color, Decoration decoration, this.foregroundDecoration, double width, double height, BoxConstraints constraints, this.margin, this.transform, this.child, &#125;) Properties 含义 Key Container唯一标识符，用于查找更新。 alignment 控制child的对齐方式，如果container或者container父节点尺寸大于child的尺寸，这个属性设置会起作用，有很多种对齐方式。 padding decoration内部的空白区域，如果有child的话，child位于padding内部。padding与margin的不同之处在于，padding是包含在content内，而margin则是外部边界，设置点击事件的话，padding区域会响应，而margin区域不会响应。 color 用来设置container背景色，如果foregroundDecoration设置的话，可能会遮盖color效果。 decoration 绘制在child后面的装饰，设置了decoration的话，就不能设置color属性，否则会报错，此时应该在decoration中进行颜色的设置。 foregroundDecoration 绘制在child前面的装饰。 width container的宽度，设置为double.infinity可以强制在宽度上撑满，不设置，则根据child和父节点两者一起布局。 height container的高度，设置为double.infinity可以强制在高度上撑满。 constraints 添加到child上额外的约束条件。 margin 围绕在decoration和child之外的空白区域，不属于内容区域。 transform 设置container的变换矩阵，类型为Matrix4。 child container中的内容widget。 demo 1234567891011121314151617181920212223import &apos;package:flutter/material.dart&apos;;class ContainerDemo extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new Center( child: new Container( width: 128.0, height: 128.0, decoration: new BoxDecoration( color: Colors.lightBlueAccent[100], ), ), ); &#125;&#125;void main() &#123; runApp( new MaterialApp( title: &apos;Flutter教程&apos;, home: new ContainerDemo(), ), );&#125; demo1 12345678910111213141516171819202122232425262728import &apos;package:flutter/material.dart&apos;;class ContainerDemo extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new Center( child: new Container( width: 300.0, height: 400.0, decoration: new BoxDecoration( color: const Color(0xfffce5cd), border: new Border.all( color: const Color(0xff6d9eeb), width: 3.0, ), ), child: new Text(&apos;容器演示&apos;), ), ); &#125;&#125;void main() &#123; runApp( new MaterialApp( title: &apos;Flutter教程&apos;, home: new ContainerDemo(), ), );&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter widgets","slug":"android/Flutter/Flutter wight","date":"2018-08-24T08:47:02.521Z","updated":"2018-09-04T13:53:06.892Z","comments":true,"path":"2018/08/24/android/Flutter/Flutter wight/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/24/android/Flutter/Flutter wight/","excerpt":"","text":"Flutter widgets- 有些widgets是有状态的, 有些是无状态的 - 如果用户与widget交互，widget会发生变化，那么它就是有状态的. - widget的状态（state）是一些可以更改的值, 如一个slider滑动条的当前值或checkbox是否被选中. - widget的状态保存在一个State对象中, 它和widget的布局显示分离。 - 当widget状态改变时, State 对象调用setState(), 告诉框架去重绘widget. stateless widget 没有内部状态. Icon、 IconButton, 和Text 都是无状态widget, 他们都是 StatelessWidget的子类。 stateful widget 是动态的. 用户可以和其交互 (例如输入一个表单、 或者移动一个slider滑块),或者可以随时间改变 (也许是数据改变导致的UI更新). Checkbox, Radio, Slider, InkWell, Form, and TextField 都是 stateful widgets, 他们都是 StatefulWidget的子类。 创建一个有状态的widget- 要创建一个自定义有状态widget，需创建两个类：StatefulWidget和State - 状态对象包含widget的状态和build() 方法。 - 当widget的状态改变时，状态对象调用setState()，告诉框架重绘widget 实现一个自定义的有状态widget需要创建两个类: 定义一个widget类，继承自StatefulWidget. 包含该widget状态并定义该widget build()方法的类，它继承自State. Step 1: 决定哪个对象管理widget的状态Widget的状态可以通过多种方式进行管理，但在我们的示例中，widget本身（FavoriteWidget）将管理自己的状态。 在这个例子中，切换星形图标是一个独立的操作，不会影响父窗口widget或其他用户界面，因此该widget可以在内部处理它自己的状态。 在管理状态中了解更多关于widget和状态的分离以及如何管理状态的信息。 Step 2: 创建StatefulWidget子类FavoriteWidget类管理自己的状态，因此它重写createState()来创建状态对象。 框架会在构建widget时调用createState()。在这个例子中，createState()创建_FavoriteWidgetState的实例，您将在下一步中实现该实例。 1234class FavoriteWidget extends StatefulWidget &#123; @override _FavoriteWidgetState createState() =&gt; new _FavoriteWidgetState();&#125; 注意: 以下划线（_）开头的成员或类是私有的。有关更多信息，请参阅Dart语言参考中的库和可见性部分 。 Step 3: 创建State子类自定义State类存储可变信息 - 可以在widget的生命周期内改变逻辑和内部状态。 当应用第一次启动时，用户界面显示一个红色实心的星星形图标，表明该湖已经被收藏，并有41个“喜欢”。状态对象存储这些信息在_isFavorited和_favoriteCount变量。 状态对象也定义了build方法。此build方法创建一个包含红色IconButton和Text的行。 该widget使用IconButton（而不是Icon）， 因为它具有一个onPressed属性，该属性定义了处理点击的回调方法。IconButton也有一个icon的属性，持有Icon。 按下IconButton时会调用_toggleFavorite()方法，然后它会调用setState()。 调用setState()是至关重要的，因为这告诉框架，widget的状态已经改变，应该重绘。 _toggleFavorite在: 1）实心的星形图标和数字“41” 和 2）虚心的星形图标和数字“40”之间切换UI。 12345678910111213141516171819202122232425262728293031323334353637383940414243class _FavoriteWidgetState extends State&lt;FavoriteWidget&gt; &#123; bool _isFavorited = true; int _favoriteCount = 41; void _toggleFavorite() &#123; setState(() &#123; // If the lake is currently favorited, unfavorite it. if (_isFavorited) &#123; _favoriteCount -= 1; _isFavorited = false; // Otherwise, favorite it. &#125; else &#123; _favoriteCount += 1; _isFavorited = true; &#125; &#125;); &#125; @override Widget build(BuildContext context) &#123; return new Row( mainAxisSize: MainAxisSize.min, children: [ new Container( padding: new EdgeInsets.all(0.0), child: new IconButton( icon: (_isFavorited ? new Icon(Icons.star) : new Icon(Icons.star_border)), color: Colors.red[500], onPressed: _toggleFavorite, ), ), new SizedBox( width: 18.0, child: new Container( child: new Text(&apos;$_favoriteCount&apos;), ), ), ], ); &#125;&#125; 案例二12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import &apos;package:flutter/material.dart&apos;;void main() &#123; runApp( new MaterialApp( title: &apos;Flutter实例&apos;, home: new Counter(), ), );&#125;class CounterDisplay extends StatelessWidget &#123; CounterDisplay(&#123;this.count&#125;); final int count; @override Widget build(BuildContext context) &#123; return new Center( child: new Text(&apos;按钮点击 $count 次&apos;), ); &#125;&#125;class CounterIncrementor extends StatelessWidget &#123; CounterIncrementor(&#123;this.onPressed&#125;); final VoidCallback onPressed; @override Widget build(BuildContext context) &#123; return new FloatingActionButton( onPressed: onPressed, tooltip: &apos;增加&apos;, child: new Icon(Icons.add), ); &#125;&#125;class Counter extends StatefulWidget &#123; @override _CounterState createState() =&gt; new _CounterState();&#125;class _CounterState extends State&lt;Counter&gt; &#123; int _count = 0; void _increment() &#123; setState( () &#123; _count += 1; &#125; ); &#125; @override Widget build(BuildContext context) &#123; return new Scaffold( appBar: new AppBar( title: new Text(&apos;Flutter实例&apos;), ), body: new CounterDisplay(count: _count), floatingActionButton: new CounterIncrementor(onPressed: _increment), ); &#125;&#125; 案例二 中 不同空间中状态 floatingActionButton 点击 点击次数增加CounterDisplay 中显示 点击 数量 所有 Counter 管理状态","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter 手势交互","slug":"android/Flutter/Flutter 手势交互","date":"2018-08-24T06:38:56.300Z","updated":"2018-09-04T13:53:11.150Z","comments":true,"path":"2018/08/24/android/Flutter/Flutter 手势交互/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/24/android/Flutter/Flutter 手势交互/","excerpt":"","text":"Flutter 手势交互参考 Pointers指针(Pointer)代表用户与设备屏幕交互的原始数据。有四种类型的指针事 PointerDownEvent 指针接触到屏幕的特定位置 PointerMoveEvent 指针从屏幕上的一个位置移动到另一个位置 PointerUpEvent 指针停止接触屏幕 PointerCancelEvent 指针的输入事件不再针对此应用（事件取消） 在指针按下时，框架对您的应用程序执行命中测试，以确定指针与屏幕相接的位置存在哪些widget。 指针按下事件（以及该指针的后续事件）然后被分发到由命中测试发现的最内部的widget。 从那里开始，这些事件会冒泡在widget树中向上冒泡，这些事件会从最内部的widget被分发到到widget根的路径上的所有小部件（译者语：这和web中事件冒泡机制相似）， 没有机制取消或停止冒泡过程(译者语：这和web不同，web中的时间冒泡是可以停止的)。 To listen to pointer events directly from the widgets layer, use a Listener widget. However, generally, consider using gestures (as discussed below) instead. 要直接从widget层监听指针事件，可以使用Listenerwidget。 但是，通常，请考虑使用手势（如下所述） 手势手势表示可以从多个单独的指针事件（甚至可能是多个单独的指针）识别的语义动作（例如，轻敲，拖动和缩放）。 完整的一个手势可以分派多个事件，对应于手势的生命周期（例如，拖动开始，拖动更新和拖动结束）： Tap onTapDown 指针已经在特定位置与屏幕接触 onTapUp 指针停止在特定位置与屏幕接触 onTap tap事件触发 onTapCancel 先前指针触发的onTapDown不会在触发tap事件 双击 onDoubleTap 用户快速连续两次在同一位置轻敲屏幕. 长按 onLongPress 指针在相同位置长时间保持与屏幕接触 垂直拖动 onVerticalDragStart 指针已经与屏幕接触并可能开始垂直移动 onVerticalDragUpdate 指针与屏幕接触并已沿垂直方向移动. onVerticalDragEnd 先前与屏幕接触并垂直移动的指针不再与屏幕接触，并且在停止接触屏幕时以特定速度移动 水平拖动 onHorizontalDragStart 指针已经接触到屏幕并可能开始水平移动 onHorizontalDragUpdate 指针与屏幕接触并已沿水平方向移动 onHorizontalDragEnd 先前与屏幕接触并水平移动的指针不再与屏幕接触，并在停止接触屏幕时以特定速度移动要从widget层监听手势，请使用 GestureDetector. 如果您使用的是Material Components，那么大多数widget已经对tap或手势做出了响应。 例如 IconButton和 FlatButton 响应presses（taps），ListView响应滑动事件触发滚动。 如果您不使用这些widget，但想要在点击时上出现“墨水飞溅”效果，可以使用InkWell。 手势消歧在屏幕上的指定位置，可能会有多个手势检测器。所有这些手势检测器在指针事件流经过并尝试识别特定手势时监听指针事件流。 GestureDetectorwidget决定是哪种手势。 当屏幕上给定指针有多个手势识别器时，框架通过让每个识别器加入一个“手势竞争场”来确定用户想要的手势。“手势竞争场”使用以下规则确定哪个手势胜出 在任何时候，识别者都可以宣布失败并离开“手势竞争场”。如果在“竞争场”中只剩下一个识别器，那么该识别器就是赢家 在任何时候，识别者都可以宣布胜利，这会导致胜利，并且所有剩下的识别器都会失败 例如，在消除水平和垂直拖动的歧义时，两个识别器在接收到指针向下事件时进入“手势竞争场”。识别器观察指针移动事件。 如果用户将指针水平移动超过一定数量的逻辑像素，则水平识别器将声明胜利，并且手势将被解释为水平拖拽。 类似地，如果用户垂直移动超过一定数量的逻辑像素，垂直识别器将宣布胜利。 当只有水平（或垂直）拖动识别器时，“手势竞争场”是有益的。在这种情况下，“手势竞争场”将只有一个识别器，并且水平拖动将被立即识别，这意味着水平移动的第一个像素可以被视为拖动，用户不需要等待进一步的手势消歧。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798import &apos;package:flutter/material.dart&apos;;void main() &#123; runApp(new MaterialApp( title: &apos;Flutter教程&apos;, home: new MyButton(), ));&#125;class MyButton extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new GestureDetector( //Tap // onTapDown 指针已经在特定位置与屏幕接触 onTapDown: (tapDownDetails) &#123; print(&apos;MyButton被监听了！ onTapDown&apos; + tapDownDetails.toString()); &#125;, // onTapUp 指针停止在特定位置与屏幕接触 onTapUp: (tapDownDetails) &#123; print(&apos;MyButton被监听了！ onTapUp&apos; + tapDownDetails.toString()); &#125;, // onTap tap事件触发 onTap: () &#123; print(&apos;MyButton被监听了！ onTap&apos;); &#125;, // onTapCancel 先前指针触发的onTapDown不会在触发tap事件 onTapCancel: () &#123; print(&apos;MyButton被监听了！ onTapCancel&apos;); &#125;,// 双击// onDoubleTap 用户快速连续两次在同一位置轻敲屏幕. onDoubleTap: () &#123; print(&apos;MyButton被监听了！ onDoubleTap&apos;); &#125;, // 长按 // onLongPress 指针在相同位置长时间保持与屏幕接触 onLongPress: () &#123; print(&apos;MyButton被监听了！ onLongPress&apos;); &#125;,// 垂直拖动// onVerticalDragStart 指针已经与屏幕接触并可能开始垂直移动 onVerticalDragStart: (tapDownDetails) &#123; print(&apos;MyButton被监听了！ onVerticalDragStart&apos;); &#125;,// onVerticalDragUpdate 指针与屏幕接触并已沿垂直方向移动. onVerticalDragUpdate: (tapDownDetails) &#123; print(&apos;MyButton被监听了！ onVerticalDragUpdate&apos;); &#125;,// onVerticalDragEnd 先前与屏幕接触并垂直移动的指针不再与屏幕接触，并且在停止接触屏幕时以特定速度移动 onVerticalDragEnd: (tapDownDetails) &#123; print(&apos;MyButton被监听了！ onVerticalDragEnd&apos;); &#125;,// 水平拖动// onHorizontalDragStart 指针已经接触到屏幕并可能开始水平移动 onHorizontalDragStart: (tapDownDetails) &#123; print(&apos;MyButton被监听了！ onHorizontalDragStart&apos;); &#125;,// onHorizontalDragUpdate 指针与屏幕接触并已沿水平方向移动 onHorizontalDragUpdate: (tapDownDetails) &#123; print(&apos;MyButton被监听了！ onHorizontalDragUpdate&apos;); &#125;,// onHorizontalDragEnd 先前与屏幕接触并水平移动的指针不再与屏幕接触，并在停止接触屏幕时以特定速度移动 onHorizontalDragEnd: (tapDownDetails) &#123; print(&apos;MyButton被监听了！ onHorizontalDragEnd&apos;); &#125;, child: new Container( height: 36.0, padding: const EdgeInsets.all(8.0), margin: const EdgeInsets.symmetric(horizontal: 8.0), decoration: new BoxDecoration( borderRadius: new BorderRadius.circular(5.0), color: Colors.lightGreen[500], ), child: new Center( child: new Text(&apos;点击监听&apos;), ), ), ); &#125;&#125; Log 1234567891011121308-24 16:18:00.106 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onVerticalDragUpdate08-24 16:18:00.189 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onVerticalDragUpdate08-24 16:18:00.199 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onVerticalDragEnd08-24 16:25:52.034 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onTapCancel08-24 16:25:52.038 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onVerticalDragStart MyButton被监听了！ onVerticalDragUpdate08-24 16:25:52.134 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onVerticalDragUpdate08-24 16:25:52.145 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onVerticalDragEnd08-24 16:25:52.789 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onTapCancel08-24 16:25:52.793 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onVerticalDragStart MyButton被监听了！ onVerticalDragUpdate08-24 16:25:52.881 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onVerticalDragUpdate08-24 16:25:52.891 15230-15255/com.yourcompany.flutterdemo I/flutter: MyButton被监听了！ onVerticalDragEnd","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter 目录","slug":"android/Flutter/Flutter目录","date":"2018-08-24T03:03:04.232Z","updated":"2018-09-07T13:04:35.118Z","comments":true,"path":"2018/08/24/android/Flutter/Flutter目录/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/24/android/Flutter/Flutter目录/","excerpt":"","text":"Flutter 目录1 Flutter 简介 1 Flutter 简介 2 Dart 入门基础 2.1 Dart 入门基础 基础类型 2.2 Dart 入门基础 正则表达式 2.3 Dart 入门基础 集合 2.4 Dart 入门基础 函数与运算符 1 Flutter 环境配置 1.1 Flutter 环境配置 2 Flutter 基础 2.1 创建app 2.2 使用使用外部包 3 Native项目 集成 Flutter 运营平台广告优惠券","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 国际化","slug":"android/Flutter/android Flutter 国际化","date":"2018-08-18T16:32:11.247Z","updated":"2018-09-05T01:50:44.724Z","comments":true,"path":"2018/08/19/android/Flutter/android Flutter 国际化/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/19/android/Flutter/android Flutter 国际化/","excerpt":"","text":"android Flutter 国际化国际化 Flutter 应用 一 本地环境配置1. 下载1.1 下载压缩包flutter_macos_v0.3.1-beta.zip 解压即可 1.2 git 下载如果你是第一次在你机器上安装 Flutter ，克隆 beta 分支的仓库然后添加 flutter 工具到你的路径 git clone -b beta https://github.com/flutter/flutter.git export PATH=`pwd`/flutter/bin:$PATH 2. 设置环境变量.bash_profile中添加 以下代码 [PATH_TO_FLUTTER_GIT_DIRECTORY] 为本地路径 export PATH=[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin:$PATH 刷新 文件 source $HOME/.bash_profile check wherther the installation is successful flutter doctor 二 工具 环境配置1. android Studio 环境配置参考 官方文档https://flutter.io/get-started/editor/#androidstudio android Studio 安装 flutter 插件(Plugins &gt; Browserepositories &gt; 搜索 Flutter 选择安装) 安装完成出出现Start a new Flutter project创建 Flutter项目 2. IOS 环境配置mac 中 安装 Xcode命令行sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer sudo xcodebuild -license 创建ios模拟器open -a Simulator 3. idea 环境配置idea 可以运行 android IOS 平台先安装插件 Filtter 重启idea 创建项目选择Flutter运行 三 问题1 idea Please configure Android SDKhttps://stackoverflow.com/questions/21070268/intellij-idea-13-error-please-select-android-sdk 2 idea Dart SDK is not configured下载https://www.dartlang.org/tools/sdk/archive 配置 运行成功","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 编译正式版本","slug":"android/Flutter/Flutter android编译正式版本","date":"2018-08-18T14:50:59.665Z","updated":"2018-09-04T13:53:03.928Z","comments":true,"path":"2018/08/18/android/Flutter/Flutter android编译正式版本/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/18/android/Flutter/Flutter android编译正式版本/","excerpt":"","text":"android Flutter 编译正式版本参考 检查应用的 Manifest 清单目录 &lt;app dir&gt;/android/app/src/main/AndroidManifest.xml 检测信息 1. application 中 图标 名称2. 权限 uses-permission3. 包名 版本号gradle 配置目录 &lt;app dir&gt;/android/app/ 检测信息 1. defaultConfig 中 applicationId2. versionCode &amp; versionName3. minSdkVersion &amp; targetSdkVersion签名1. 创建 keystore 证书可以使用android studio 创建签名 也可以使用命令行创建签名 keytool -genkey -v -keystore ~/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key 2. 配置签名创建证书引用的配置文件 key.properties &lt;app dir&gt;/android/key.properties storePassword=&lt;上一步中输入的 store 密码&gt; keyPassword=&lt;上一步中输入的 key 密码&gt; keyAlias=key storeFile=&lt;keystore 文件的位置， 例如： /Users/&lt;user name&gt;/key.jks&gt; 编辑您应用的 &lt;app dir&gt;/android/app/build.gradle 文件以配置签名选项 替换: android { 为您包含证书引用的配置文件: def keystorePropertiesFile = rootProject.file(&quot;key.properties&quot;) def keystoreProperties = new Properties() keystoreProperties.load(new FileInputStream(keystorePropertiesFile)) android { 替换: buildTypes { release { // TODO: Add your own signing config for the release build. // Signing with the debug keys for now, so `flutter run --release` works. signingConfig signingConfigs.debug } } 为如下内容: signingConfigs { release { keyAlias keystoreProperties[&apos;keyAlias&apos;] keyPassword keystoreProperties[&apos;keyPassword&apos;] storeFile file(keystoreProperties[&apos;storeFile&apos;]) storePassword keystoreProperties[&apos;storePassword&apos;] } } buildTypes { release { signingConfig signingConfigs.release } } 这样一来，当您的应用构建 Release 版本时就会自动签名。 编译release 版应用在命令行使用: cd &lt;app dir&gt; (用您应用工程的根目录替换 &lt;app dir&gt; )。 运行 flutter build apk (flutter build 命令默认使用 --release)。 您应用的 release 版本的 APK 会生成在 /build/app/outputs/apk/app-release.apk。","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Features 点击空白区域隐藏键盘","slug":"android/Features/点击空白区域隐藏键盘","date":"2018-08-07T10:51:16.211Z","updated":"2018-08-12T04:06:59.354Z","comments":true,"path":"2018/08/07/android/Features/点击空白区域隐藏键盘/","link":"","permalink":"http://www.kylinhuang.cn/2018/08/07/android/Features/点击空白区域隐藏键盘/","excerpt":"","text":"点击空白区域隐藏键盘在 BaseActivity 添加 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/** * 点击空白区域隐藏键盘. */@Overridepublic boolean dispatchTouchEvent(MotionEvent ev) &#123; if (ev.getAction() == MotionEvent.ACTION_DOWN) &#123; //把操作放在用户点击的时候 View v = getCurrentFocus(); //得到当前页面的焦点,ps:有输入框的页面焦点一般会被输入框占据 if (isShouldHideKeyboard(v, ev)) &#123; //判断用户点击的是否是输入框以外的区域 hideKeyboard(v.getWindowToken()); //收起键盘 &#125; &#125; return super.dispatchTouchEvent(ev);&#125;/** * 根据EditText所在坐标和用户点击的坐标相对比，来判断是否隐藏键盘，因为当用户点击EditText时则不能隐藏 * * @param v * @param event * @return */private boolean isShouldHideKeyboard(View v, MotionEvent event) &#123; if (v != null &amp;&amp; (v instanceof EditText)) &#123; //判断得到的焦点控件是否包含EditText int[] l = &#123;0, 0&#125;; v.getLocationInWindow(l); int left = l[0], //得到输入框在屏幕中上下左右的位置 top = l[1], bottom = top + v.getHeight(), right = left + v.getWidth(); if (event.getX() &gt; left &amp;&amp; event.getX() &lt; right &amp;&amp; event.getY() &gt; top &amp;&amp; event.getY() &lt; bottom) &#123; // 点击位置如果是EditText的区域，忽略它，不收起键盘。 return false; &#125; else &#123; return true; &#125; &#125; // 如果焦点不是EditText则忽略 return false;&#125;/** * 获取InputMethodManager，隐藏软键盘 * @param token */private void hideKeyboard(IBinder token) &#123; if (token != null) &#123; InputMethodManager im = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE); im.hideSoftInputFromWindow(token, InputMethodManager.HIDE_NOT_ALWAYS); &#125;&#125; 安卓开发 自定义软键盘 从原理到应用 可更改个别键颜色等","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android Features","slug":"android-Features","permalink":"http://www.kylinhuang.cn/tags/android-Features/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Snap Setings","slug":"Work/Snap SettingUI文档","date":"2018-07-10T16:28:39.765Z","updated":"2019-04-18T06:05:03.161Z","comments":true,"path":"2018/07/11/Work/Snap SettingUI文档/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/11/Work/Snap SettingUI文档/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/categories/Work/"}],"tags":[{"name":"Snap","slug":"Snap","permalink":"http://www.kylinhuang.cn/tags/Snap/"}],"keywords":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/categories/Work/"}]},{"title":"MySQL","slug":"工具/mysql/MySQL","date":"2018-07-10T16:26:02.056Z","updated":"2018-11-18T07:11:03.979Z","comments":true,"path":"2018/07/11/工具/mysql/MySQL/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/11/工具/mysql/MySQL/","excerpt":"","text":"MySQLMySQL 安装 基本设置1.mac 下载mySQL 下载地址2.mac 安装启动下一步安装 （安装完成记住初始化密码）安装完成在偏好设置 中 选择MySQL启动 3.连接数据库 12mysql -uroot -p按照提示输入密码 第一次输入初始化密码 4.密码重新设置 1ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;kylinhuang&apos;; MySQL 基本语法1.数据库操作1.1 显示 所有数据库 SHOW DATABASES; 1234567891011mysql&gt; SHOW DATABASES;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || sys || uesr |+--------------------+5 rows in set (0.00 sec) 1.2 创建数据库 CREATE DATABASE 库名; 1.3 切换数据库 USE 库名; 1.4 删除数据库 DROP DATABASE 库名;1.5 修改数据库名修改数据库三种方法 2.表操作1.显示 当前数据库下所有表 show tables;1.创建表 CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1)); 2.显示 表数据详情 desc 表名; 12345678mysql&gt; desc uesr;+-------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id | varchar(20) | YES | | NULL | || name | char(1) | YES | | NULL | |+-------+-------------+------+-----+---------+-------+2 rows in set (0.01 sec) 3.删除3.1删除表drop table 表名;1drop table workmates; 3.2 删除表中的数据delete from 表名称 where 删除条件;123456789删除id为2的行:delete from students where id=2;删除所有年龄小于21岁的数据:delete from students where age&lt;20;删除表中的所有数据:delete from students; 4.修改表4.1修改表名alter table 表名 rename 新表名;4.2删除列alter table 表名 drop 列名称;4.3修改列名alter table 表名 change 列名称 列新名称 新数据类型;4.4 修改 表中的数据update 表名称 set 列名称=新值 where 更新条件; UPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause] 12345678将id为5的手机号改为默认的&quot;-&quot;:update students set tel=default where id=5;将所有人的年龄增加1:update students set age=age+1;将手机号为 13288097888 的姓名改为 &quot;张伟鹏&quot;, 年龄改为 19:update students set name=&quot;张伟鹏&quot;, age=19 where tel=&quot;13288097888&quot;; 5.查询select 列名称 from 表名称 [查询条件];也可以使用通配符 * 查询表中所有的内容, 语句: select * from students; 123456789101112mysql&gt; select name, age from students; +--------+-----+ | name | age | +--------+-----+ | 王刚 | 20 | | 孙丽华 | 21 | | 王永恒 | 23 | | 郑俊杰 | 19 | | 陈芳 | 22 | | 张伟朋 | 21 | +--------+-----+ 6 rows in set (0.00 sec) 5.1 where条件查询select 列名称 from 表名称 where 条件;select * from students where sex=&quot;女&quot;; where 子句不仅仅支持 “where 列名 = 值” 这种名等于值的查询形式, 对一般的比较运算的运算符都是支持的, 例如 =、&gt;、&lt;、&gt;=、&lt;、!= 以及一些扩展运算符 is [not] null、in、like 等等。 还可以对查询条件使用 or 和 and 进行组合查询, 以后还会学到更加高级的条件查询方式, 这里不再多做介绍。12345678查询年龄在21岁以上的所有人信息:select * from students where age &gt; 21;查询名字中带有 &quot;王&quot; 字的所有人信息:select * from students where name like &quot;%王%&quot;;查询id小于5且年龄大于20的所有人信息:select * from students where id&lt;5 and age&gt;20; 5.2 where条件查询 WHERE…LIKE12SELECT field1, field2,...fieldN table_name1, table_name2...WHERE field1 LIKE condition1 [AND [OR]] filed2 = &apos;somevalue&apos; LIKE 通常与 % 一同使用，类似于一个元字符的搜索。你可以使用AND或者OR指定一个或多个条件。你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。 runoob_tbl表中获取runoob_author字段中以”jay”为结尾的的所有记录1SELECT * from runoob_tbl WHERE runoob_author LIKE &apos;%jay&apos;; 5.3 ORDER BY12SELECT field1, field2,...fieldN table_name1, table_name2...ORDER BY field1, [field2...] [ASC [DESC]] ASC 升序DESC 降序1SELECT * from runoob_tbl ORDER BY runoob_author ASC 5.4 JOIN MySQL的JOIN来连接以上两张表来读取runoob_tbl表中所有runoob_author字段在tcount_tbl表对应的runoob_count字段值： 123456789101112131415161718192021222324252627282930313233343536373839root@host# mysql -u root -p password;Enter password:*******mysql&gt; use RUNOOB;Database changedmysql&gt; SELECT * FROM tcount_tbl;+-----------------+----------------+| runoob_author | runoob_count |+-----------------+----------------+| mahran | 20 || mahnaz | NULL || Jen | NULL || Gill | 20 || John Poul | 1 || Sanjay | 1 |+-----------------+----------------+6 rows in set (0.01 sec)mysql&gt; SELECT * from runoob_tbl;+-------------+----------------+-----------------+-----------------+| runoob_id | runoob_title | runoob_author | submission_date |+-------------+----------------+-----------------+-----------------+| 1 | Learn PHP | John Poul | 2007-05-24 || 2 | Learn MySQL | Abdul S | 2007-05-24 || 3 | JAVA Tutorial | Sanjay | 2007-05-06 |+-------------+----------------+-----------------+-----------------+3 rows in set (0.00 sec)mysql&gt;mysql&gt; SELECT a.runoob_id, a.runoob_author, b.runoob_count -&gt; FROM runoob_tbl a, tcount_tbl b -&gt; WHERE a.runoob_author = b.runoob_author;+-------------+-----------------+----------------+| runoob_id | runoob_author | runoob_count |+-------------+-----------------+----------------+| 1 | John Poul | 1 || 3 | Sanjay | 1 |+-------------+-----------------+----------------+2 rows in set (0.01 sec)","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://www.kylinhuang.cn/tags/MySQL/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"CentOS搭建VPS控制面板","slug":"工具/shadowsocks/CentOS配置Shadowsocks","date":"2018-07-10T16:15:08.534Z","updated":"2018-11-07T03:27:21.920Z","comments":true,"path":"2018/07/11/工具/shadowsocks/CentOS配置Shadowsocks/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/11/工具/shadowsocks/CentOS配置Shadowsocks/","excerpt":"","text":"centos配置Shadowsocks 多用户1.安装shadowsocks12345yum install epel-releaseyum updateyum install python-setuptools m2crypto supervisoreasy_install pippip install shadowsocks 2. 配置shadowsocks.json文件上边几条命令都执行完成后，输入下面这条命令，回车执行：1vi /etc/shadowsocks.json 之后按i键进入编辑模式，putty黑框的左下角会出现 – INSERT – 字样，然后一次性复制下面的内容（记得先修改再复制，将2333修改为想用的端口，范围 1 – 65535，mima12345改成你的密码，记住下面的内容，配置客户端的时候会用到；另外，下面是建了2333和6666两个账号，如果多了，可以删掉，不够可以再加。注意逗号，免得出错）, 在putty里右键，此时复制的内容应该已经粘贴到了putty里了。 123456789&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;port_password&quot;:&#123; &quot;2333&quot;:&quot;mima12345&quot;, &quot;6666&quot;:&quot;mima12345&quot; &#125;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot;&#125; 完成后，按ESC键退出编辑模式，putty黑框的左下角 – INSERT – 字样消失，输入:wq，回车执行，这时文件保存并返回。 3 添加到进程。继续输入下面这条命令，回车执行： 1vi /etc/supervisord.conf 之后按i键进入编辑模式，putty黑框的左下角会出现 – INSERT – 字样，用方向键将光标移动到文件尾部空行处。然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里了。 1234567[program:shadowsocks]command=ssserver -c /etc/shadowsocks.jsonautostart=trueautorestart=trueuser=rootlog_stderr=truelogfile=/var/log/shadowsocks.log 完成后，按ESC键退出编辑模式，putty黑框的左下角 – INSERT – 字样消失，输入:wq，回车执行，这时文件保存并返回。 4. 设置开机启动继续输入下面这条命令，回车执行： 1vi /etc/rc.local 之后按i键进入编辑模式，putty黑框的左下角会出现 – INSERT – 字样，用方向键将光标移动到文件中部空行处。然后一次性复制下面的内容，在putty里右键，此时复制的内容应该已经粘贴到了putty里了。 12service supervisord startssserver -c /etc/shadowsocks.json -d start 完成后，按ESC键退出编辑模式，putty黑框的左下角 – INSERT – 字样消失，输入:wq，回车执行，这时文件保存并返回。1reboot 客户端配置1.shadowsocks下载shadowsocks下载地址 2.配置 服务器IP ： 第一步获取到的ip服务器端口 ： 第二步第五小步设置的端口（port），比如：2333密码 ： 第二步第五小步设置的密码（password），比如:mima12345加密 ： 第二步第五小步设置的加密方式（method），默认为：aes-256-cfb备注 不用填代理端口 建议使用默认端口1080 配置完成，点击确定，然后在工具栏右键纸飞机图标，启动系统代理，现在打开 谷歌 看看墙外的世界。至于其他菜单的功能，靠你自己摸索了。 注意如果遇到问题启动 12ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"Flutter 2.创建app","slug":"android/Flutter/Flutter 2.创建app","date":"2018-07-10T16:06:07.262Z","updated":"2018-09-04T13:52:31.778Z","comments":true,"path":"2018/07/11/android/Flutter/Flutter 2.创建app/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/11/android/Flutter/Flutter 2.创建app/","excerpt":"","text":"Flutter 2.创建app1.创建项目 运行123456789101112131415161718192021import 'package:flutter/material.dart';void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( title: 'Welcome to Flutter', home: new Scaffold( appBar: new AppBar( title: new Text('Welcome to Flutter'), ), body: new Center( child: new Text('Hello World'), ), ), ); &#125;&#125; main函数使用了(=&gt;)符号, 这是Dart中单行函数或方法的简写。 12345678void main() =&gt; runApp(new MyApp());等价于void main() &#123; runApp(new MyApp());&#125; 创建app 继承 StatelessWidget 1class MyApp extends StatelessWidget &#123; Scaffold 是 Material library 中提供的一个widget, 它提供了默认的导航栏、标题和包含主屏幕widget树的body属性。widget树可以很复杂。 widget的主要工作是提供一个build()方法来描述如何根据其他较低级别的widget来显示自己。 本示例中的body的widget树中包含了一个Center widget, Center widget又包含一个 Text 子widget。 Center widget可以将其子widget树对其到屏幕中心。 2 更改 AppBar123456789101112131415161718192021222324 class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( title: 'Welcome to Flutter', home: new Scaffold( appBar: new AppBar( title: new Text(\"Flutter\"), actions: &lt;Widget&gt;[ new IconButton(icon: new Icon(Icons.add_alert), onPressed: ()&#123; _pressed(\"add_alert\"); &#125;), new IconButton(icon: new Icon(Icons.print), onPressed: ()&#123; _pressed(\"print\"); &#125;), new IconButton(icon: new Icon(Icons.people), onPressed: ()&#123; _pressed(\"people\"); &#125;), ], ), body: new Center( child: new Text('Hello World'), ), ), ); &#125; 3 pubspec.yaml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667name: flutterdemodescription: A new Flutter project.dependencies: flutter: sdk: flutter # 国际化 flutter_localizations: sdk: flutter intl: intl_translation: # The following adds the Cupertino Icons font to your application. # Use with the CupertinoIcons class for iOS style icons. cupertino_icons: ^0.1.0 # Use an external package english_words: ^3.1.0dev_dependencies: flutter_test: sdk: flutter# For information on the generic Dart part of this file, see the# following page: https://www.dartlang.org/tools/pub/pubspec# The following section is specific to Flutter.flutter: # The following line ensures that the Material Icons font is # included with your application, so that you can use the icons in # the material Icons class. uses-material-design: true # To add assets to your application, add an assets section, like this: # assets: # - images/a_dot_burr.jpeg # - images/a_dot_ham.jpeg # An image asset can refer to one or more resolution-specific \"variants\", see # https://flutter.io/assets-and-images/#resolution-aware. # For details regarding adding assets from package dependencies, see # https://flutter.io/assets-and-images/#from-packages # To add custom fonts to your application, add a fonts section here, # in this \"flutter\" section. Each entry in this list should have a # \"family\" key with the font family name, and a \"fonts\" key with a # list giving the asset and other descriptors for the font. For # example: # fonts: # - family: Schyler # fonts: # - asset: fonts/Schyler-Regular.ttf # - asset: fonts/Schyler-Italic.ttf # style: italic # - family: Trajan Pro # fonts: # - asset: fonts/TrajanPro.ttf # - asset: fonts/TrajanPro_Bold.ttf # weight: 700 # # For details regarding fonts from package dependencies, # see https://flutter.io/custom-fonts/#from-packages 源码 地址 https://github.com/kylinhuang/flutterDemo/blob/master/flutterdemo/lib/flutter1/flutterapp.dart","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Flutter-问题","slug":"android/Flutter/Flutter-问题","date":"2018-07-10T16:02:03.701Z","updated":"2018-09-04T13:53:27.816Z","comments":true,"path":"2018/07/11/android/Flutter/Flutter-问题/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/11/android/Flutter/Flutter-问题/","excerpt":"","text":"Flutter-问题1. Waiting for another flutter command to release the startup lock…解决方式去到flutter\\bin\\cache这个目录 把有lock 字样的文件都删除掉 2. Flutter 卡在 package get 的解决办法一直卡在 Running &quot;flutter packages get&quot; in project_name... 解决方法 https://github.com/flutter/flutter/wiki/Using-Flutter-in-China or https://www.jianshu.com/p/147f0e20c312","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 5.获取数据","slug":"android/Flutter/Flutter 5.获取数据","date":"2018-07-10T15:53:45.119Z","updated":"2018-09-04T13:52:43.552Z","comments":true,"path":"2018/07/10/android/Flutter/Flutter 5.获取数据/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/10/android/Flutter/Flutter 5.获取数据/","excerpt":"","text":"移动端-Flutter-5.获取数据1 添加http包2 使用http 软件包发送网络请求3 解析数据4 显示 数据 1 添加http包在pubspec.yaml中添加 http 包 12dependencies: http: &lt;latest_version&gt; 2 使用http 软件包发送网络请求123Future&lt;http.Response&gt; fetchPost() &#123; return http.get('https://jsonplaceholder.typicode.com/posts/1');&#125; 3 解析数据创建解析对象 123456789101112131415class Post &#123; final int userId; final int id; final String title; final String body; Post(&#123;this.userId, this.id, this.title, this.body&#125;); factory Post.fromJson(Map&lt;String, dynamic&gt; json) &#123; return new Post( userId: json['userId'], id: json['id'], title: json['title'], body: json['body'], ); &#125;&#125; 解析数据 12345Future&lt;Post&gt; fetchPost() async &#123; final response = await http.get('https://jsonplaceholder.typicode.com/posts/1'); final responseJson = json.decode(response.body); return new Post.fromJson(responseJson); &#125; 4 显示 数据123456789101112new FutureBuilder&lt;Post&gt;( future: fetchPost(), builder: (context, snapshot) &#123; if (snapshot.hasData) &#123; return new Text(snapshot.data.title); &#125; else if (snapshot.hasError) &#123; return new Text(\"$&#123;snapshot.error&#125;\"); &#125; // By default, show a loading spinner return new CircularProgressIndicator(); &#125;,); code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import 'dart:async';import 'dart:convert';import 'package:flutter/material.dart';import 'package:http/http.dart' as http;Future&lt;Post&gt; fetchPost() async &#123; final response = await http.get('https://jsonplaceholder.typicode.com/posts/1'); final responseJson = json.decode(response.body); return new Post.fromJson(responseJson);&#125;class Post &#123; final int userId; final int id; final String title; final String body; Post(&#123;this.userId, this.id, this.title, this.body&#125;); factory Post.fromJson(Map&lt;String, dynamic&gt; json) &#123; return new Post( userId: json['userId'], id: json['id'], title: json['title'], body: json['body'], ); &#125;&#125;void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( title: 'Fetch Data Example', theme: new ThemeData( primarySwatch: Colors.blue, ), home: new Scaffold( appBar: new AppBar( title: new Text('Fetch Data Example'), ), body: new Center( child: new FutureBuilder&lt;Post&gt;( future: fetchPost(), builder: (context, snapshot) &#123; if (snapshot.hasData) &#123; return new Text(snapshot.data.title); &#125; else if (snapshot.hasError) &#123; return new Text(\"$&#123;snapshot.error&#125;\"); &#125; // By default, show a loading spinner return new CircularProgressIndicator(); &#125;, ), ), ), ); &#125;&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 6.获取数据-post","slug":"android/Flutter/Flutter 6.获取数据-post","date":"2018-07-10T15:49:56.083Z","updated":"2018-09-05T01:50:43.631Z","comments":true,"path":"2018/07/10/android/Flutter/Flutter 6.获取数据-post/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/10/android/Flutter/Flutter 6.获取数据-post/","excerpt":"","text":"android Flutter 6.获取数据-post1234567891011121314static void post(String url, Function callback, &#123; String params, Function errorCallback&#125;) async &#123; Map&lt;String, String&gt; headers = new Map(); headers['Content-Type'] = 'application/json'; try &#123; http.Response res = await http.post(url,headers : headers, body: params); if (callback != null) &#123; callback(res.body); &#125; &#125; catch (e) &#123; if (errorCallback != null) &#123; errorCallback(e); &#125; &#125; &#125; 发送请求 1234567891011String jsonParams = json.encode(&#123;\"appCode\":\"snap\",\"baiduChanelToken\":\"\"&#125;); NetUtils.post( Api.Login, (data) &#123; print('data is $&#123; data &#125;');// &#125;, params: jsonParams, errorCallback: (e) &#123; print(' errorCallback ' + e); &#125;);","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 10.Native 项目中添加Flutter","slug":"android/Flutter/Flutter 10.Native 项目中添加Flutter","date":"2018-07-05T05:41:26.334Z","updated":"2018-09-04T13:52:28.547Z","comments":true,"path":"2018/07/05/android/Flutter/Flutter 10.Native 项目中添加Flutter/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/05/android/Flutter/Flutter 10.Native 项目中添加Flutter/","excerpt":"","text":"Flutter android 项目中添加Flutter官方文档 官方 给出 是不建议在原项目中集成 flutter 目前还是测试 实验阶段 已有android 项目中集成 Flutter The Flutter project template使用flutter create xxx创建的Flutter项目包括用于Flutter / Dart代码的非常简单的 应用程序（Android单个Activity 和 iOS 单个 ViewController ）。您可以修改这些主机应用程序以满足您的需求并从那里构建。 The Flutter module template但是，如果您开始使用任一平台的现有应用程序，您可能希望将Flutter项目作为某种形式的库包含在该应用程序中。 这就是Flutter模块模板提供的内容。执行 flutter create -t​​ module xxx会生成一个Flutter项目，其中包含一个Android库和一个Cocoapods pod，专为现有主机应用程序使用而设计。 android 项目中集成 FlutterCreate a Flutter module命令行 创建 flutter create -t module flutter_mode 也可以使用android Studio 创建 flutter_mode 应用转化为库修改flutter_mode 中 android/app/build.gradle 123apply plugin: &apos;com.android.application&apos;修改为apply plugin: &apos;com.android.library&apos; 删除 defaultConfig 中 applicationId123456789 defaultConfig &#123; // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).// applicationId &quot;com.example.fluttermode&quot; minSdkVersion 16 targetSdkVersion 27 versionCode 1 versionName &quot;1.0&quot; testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot; &#125; 删除 flutter_mode 中 AndroidManifest.xml删除 flutter_mode 中 android/app/src/main/AndroidManifest.xml中 多余的代码 intent-filter application 属性 123456789101112131415161718 &lt;application &gt; &lt;activity android:name=&quot;.MainActivity&quot; android:launchMode=&quot;singleTop&quot; android:theme=&quot;@style/LaunchTheme&quot; android:configChanges=&quot;orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density&quot; android:hardwareAccelerated=&quot;true&quot; android:windowSoftInputMode=&quot;adjustResize&quot;&gt; &lt;!-- This keeps the window background of the activity showing until Flutter renders its first frame. It can be removed if there is no splash screen (such as the default splash screen defined in @style/LaunchTheme). --&gt; &lt;meta-data android:name=&quot;io.flutter.app.android.SplashScreenUntilFirstFrame&quot; android:value=&quot;true&quot; /&gt; &lt;/activity&gt;&lt;/application&gt; 修改 MainActivity.java12345678public class MainActivity extends FlutterActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; io.flutter.view.FlutterMain.startInitialization(this.getApplicationContext()); // &lt;= New. super.onCreate(savedInstanceState); GeneratedPluginRegistrant.registerWith(this); &#125;&#125; android Native 项目 引用修改 Native 工程目录中 settings.gradle 文件 12include &apos;:flutter_mode&apos;project(&apos;:flutter_mode&apos;).projectDir = new File( &apos;flutter_mode/flutter_mode/android/app&apos;) 修改 Native 项目目录中 build.gradle 文件1implementation project(&quot;:flutter_mode&quot;) 修改 Native 工程项目中 local.properties 文件123ndk.dir=/Users/kylinhuang/androidStudioSDK/ndk-bundlesdk.dir=/Users/kylinhuang/androidStudioSDKflutter.sdk=/Users/kylinhuang/software/flutter 调用123456789public void startFlutterActivity(View view) &#123; // ComponentName componentName = new ComponentName(this, &quot;com.example.fluttermode.MainActivity&quot;);// Intent intent = new Intent().setComponent(componentName);// startActivity(intent); Intent intent = new Intent(getActivity(), com.example.fluttermode.MainActivity.class); startActivity(intent);&#125; 启动过程有点慢先白屏 再渲染出来 使用release 版本 运行起来比较快 123456java.lang.UnsatisfiedLinkError: dalvik.system.PathClassLoader[DexPathList[[zip file &quot;/data/app/com.sengled.Snap-1/base.apk&quot;],nativeLibraryDirectories=[/data/app/com.sengled.Snap-1/lib/arm, /data/app/com.sengled.Snap-1/base.apk!/lib/armeabi, /system/lib, /vendor/lib]]] couldn&apos;t find &quot;libflutter.so&quot; at java.lang.Runtime.loadLibrary0(Runtime.java:984) at java.lang.System.loadLibrary(System.java:1530) at io.flutter.view.FlutterMain.startInitialization(FlutterMain.java:163) at io.flutter.view.FlutterMain.startInitialization(FlutterMain.java:140) at com.example.fluttermode.MainActivity.onCreate(MainActivity.java:10) 123No application found for TargetPlatform.android_arm.Is your project missing an android/app/src/main/AndroidManifest.xml?Consider running &quot;flutter create .&quot; to create one. 第一次遇到 更新 flutter 就可以了又遇见了 怎么都不好使 无奈之下 删除 android 目录 ios目录 直接运行 flutter create . 再git 恢复配置问题","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 9.app错误上报","slug":"android/Flutter/Flutter 9.app错误上报","date":"2018-07-05T05:39:30.721Z","updated":"2018-09-04T13:52:59.596Z","comments":true,"path":"2018/07/05/android/Flutter/Flutter 9.app错误上报/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/05/android/Flutter/Flutter 9.app错误上报/","excerpt":"","text":"android Flutter 9.app错误上报参考https://flutter.io/cookbook/maintenance/error-reporting/ codehttps://github.com/flutter/crashy","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 8.数据存储-File","slug":"android/Flutter/Flutter 8.数据存储-File","date":"2018-07-05T05:36:59.898Z","updated":"2018-09-04T13:52:54.114Z","comments":true,"path":"2018/07/05/android/Flutter/Flutter 8.数据存储-File/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/05/android/Flutter/Flutter 8.数据存储-File/","excerpt":"","text":"android Flutter 8.数据存储-File为了将文件保存到磁盘，我们需要将 path_provider 插件与dart:io 库结合起来 。 1.找到正确的本地路径 2.创建对文件位置的引用 3.将数据写入文件 4.从文件中读取数据 1.找到正确的本地路径path_provider插件提供了一种平台不可知的方式来访问设备文件系统上的常用位置。该插件当前支持访问两个文件系统位置： 临时目录(Temporary directory)：系统可随时清除的临时目录（缓存）。在iOS上，这对应于NSTemporaryDirectory() 返回的值 。在Android上，这是getCacheDir() 返回的值。 文档目录(Documents directory)：应用程序的目录，用于存储只有它可以访问的文件。只有当应用程序被删除时，系统才会清除目录。在iOS上，这对应于NSDocumentDirectory。在Android上，这是 AppData目录。 在我们的例子中，我们希望将信息存储在文档目录中！我们可以像这样找到文档目录的路径： 12345Future&lt;String&gt; get _localPath async &#123; final directory = await getApplicationDocumentsDirectory(); return directory.path;&#125; 2.创建对文件位置的引用一旦我们知道在哪里存储文件，我们需要创建一个文件的完整位置的引用。我们可以使用File 类从 dart:io 库来实现这一目标。 1234Future&lt;File&gt; get _localFile async &#123; final path = await _localPath; return new File(&apos;$path/counter.txt&apos;);&#125; 3.将数据写入文件现在我们有了一个File合作关系，我们可以使用它来读取和写入数据！首先，我们将一些数据写入文件。由于我们正在使用计数器，因此我们只会将整数存储为字符串。 123456Future&lt;File&gt; writeCounter(int counter) async &#123; final file = await _localFile; // Write the file return file.writeAsString(&apos;$counter&apos;);&#125; 4.从文件中读取数据现在我们在磁盘上有一些数据，我们可以阅读它！我们再次使用这个 File类来做到这一点。 12345678910111213Future&lt;int&gt; readCounter() async &#123; try &#123; final file = await _localFile; // Read the file String contents = await file.readAsString(); return int.parse(contents); &#125; catch (e) &#123; // If we encounter an error, return 0 return 0; &#125;&#125; 测试为了测试与文件交互的代码，我们需要模拟调用MethodChannel。这MethodChannel是Flutter用来与主机平台进行通信的类。 在我们的测试中，我们无法与设备上的文件系统进行交互。我们需要与我们的测试环境的文件系统进行交互！ 为了模拟方法调用，我们可以setupAll在我们的测试文件中提供一个函数。该功能将在测试执行之前运行。 123456789101112131415setUpAll(() async &#123; // Create a temporary directory to work with final directory = await Directory.systemTemp.createTemp(); // Mock out the MethodChannel for the path_provider plugin const MethodChannel(&apos;plugins.flutter.io/path_provider&apos;) .setMockMethodCallHandler((MethodCall methodCall) async &#123; // If we&apos;re getting the apps documents directory, return the path to the // temp directory on our test environment instead. if (methodCall.method == &apos;getApplicationDocumentsDirectory&apos;) &#123; return directory.path; &#125; return null; &#125;);&#125;); 例子1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798import &apos;dart:async&apos;;import &apos;dart:io&apos;;import &apos;package:flutter/foundation.dart&apos;;import &apos;package:flutter/material.dart&apos;;import &apos;package:path_provider/path_provider.dart&apos;;void main() &#123; runApp( new MaterialApp( title: &apos;Reading and Writing Files&apos;, home: new FlutterDemo(storage: new CounterStorage()), ), );&#125;class CounterStorage &#123; Future&lt;String&gt; get _localPath async &#123; final directory = await getApplicationDocumentsDirectory(); return directory.path; &#125; Future&lt;File&gt; get _localFile async &#123; final path = await _localPath; return new File(&apos;$path/counter.txt&apos;); &#125; Future&lt;int&gt; readCounter() async &#123; try &#123; final file = await _localFile; // Read the file String contents = await file.readAsString(); return int.parse(contents); &#125; catch (e) &#123; // If we encounter an error, return 0 return 0; &#125; &#125; Future&lt;File&gt; writeCounter(int counter) async &#123; final file = await _localFile; // Write the file return file.writeAsString(&apos;$counter&apos;); &#125;&#125;class FlutterDemo extends StatefulWidget &#123; final CounterStorage storage; FlutterDemo(&#123;Key key, @required this.storage&#125;) : super(key: key); @override _FlutterDemoState createState() =&gt; new _FlutterDemoState();&#125;class _FlutterDemoState extends State&lt;FlutterDemo&gt; &#123; int _counter; @override void initState() &#123; super.initState(); widget.storage.readCounter().then((int value) &#123; setState(() &#123; _counter = value; &#125;); &#125;); &#125; Future&lt;File&gt; _incrementCounter() async &#123; setState(() &#123; _counter++; &#125;); // write the variable as a string to the file return widget.storage.writeCounter(_counter); &#125; @override Widget build(BuildContext context) &#123; return new Scaffold( appBar: new AppBar(title: new Text(&apos;Reading and Writing Files&apos;)), body: new Center( child: new Text( &apos;Button tapped $_counter time$&#123;_counter == 1 ? &apos;&apos; : &apos;s&apos;&#125;.&apos;, ), ), floatingActionButton: new FloatingActionButton( onPressed: _incrementCounter, tooltip: &apos;Increment&apos;, child: new Icon(Icons.add), ), ); &#125;&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 7.数据存储-shared_preferences","slug":"android/Flutter/Flutter 7.数据存储-shared_preferences","date":"2018-07-05T05:34:18.578Z","updated":"2018-09-04T13:52:50.013Z","comments":true,"path":"2018/07/05/android/Flutter/Flutter 7.数据存储-shared_preferences/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/05/android/Flutter/Flutter 7.数据存储-shared_preferences/","excerpt":"","text":"android Flutter 7.数据存储-shared_preferences通常我们必须编写本地平台集成以在两个平台上存储数据。幸运的是，shared_preferences 插件可用于在磁盘上保存键值数据。共享首选项插件包装NSUserDefaults在iOS和SharedPreferencesAndroid上，为简单数据提供持久存储。 1.添加依赖项 2.保存数据 3.读取数据 4.删除数据 1.添加依赖项在我们开始之前，我们需要将shared_preferences 插件添加到我们的pubspec.yaml文件中： 1234dependencies: flutter: sdk: flutter shared_preferences: \"&lt;newest version&gt;\" 2.保存数据为了保存数据，我们可以使用SharedPreferences该类提供的setter方法 。设置器方法可用于各种原始类型，例如setInt，setBool，和setString。 Setter方法做两件事：首先，同步更新内存中的键值对。然后，将数据保存到磁盘。 12345// obtain shared preferences final prefs = await SharedPreferences.getInstance();// set new valueprefs.setInt('counter', counter); 3.读取数据要读取数据，我们可以使用SharedPreferences该类提供的适当的getter方法 。对于每个制定者都有一个相应的获得者。例如，我们可以使用getInt，getBool和getString方法。 1234final prefs = await SharedPreferences.getInstance();// Try reading data from the counter key. If it does not exist, return 0.final counter = prefs.getInt('counter') ?? 0; 4.删除数据要删除数据，我们可以使用该remove方法。 123final prefs = await SharedPreferences.getInstance();prefs.remove('counter'); 支持的类型虽然使用键值存储非常简单方便，但它有一些限制： 只有基本类型可以使用：int，double，bool，string和stringList它不是用来存储大量数据的。 测试支持测试持续使用数据的代码可能是一个好主意 shared_preferences。为此，我们需要嘲笑图书馆MethodChannel使用的shared_preferences。 SharedPreferences通过setupAll在我们的测试文件中的一个方法中运行以下代码，我们可以在我们的测试中填充初始值： 1234567const MethodChannel('plugins.flutter.io/shared_preferences') .setMockMethodCallHandler((MethodCall methodCall) async &#123; if (methodCall.method == 'getAll') &#123; return &lt;String, dynamic&gt;&#123;&#125;; // set initial values here if desired &#125; return null; &#125;); 例子12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import 'package:flutter/material.dart';import 'package:shared_preferences/shared_preferences.dart';void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget &#123; // This widget is the root of our application. @override Widget build(BuildContext context) &#123; return new MaterialApp( title: 'Shared preferences demo', theme: new ThemeData( primarySwatch: Colors.blue, ), home: new MyHomePage(title: 'Shared preferences demo'), ); &#125;&#125;class MyHomePage extends StatefulWidget &#123; MyHomePage(&#123;Key key, this.title&#125;) : super(key: key); final String title; @override _MyHomePageState createState() =&gt; new _MyHomePageState();&#125;class _MyHomePageState extends State&lt;MyHomePage&gt; &#123; int _counter = 0; @override void initState() &#123; super.initState(); _loadCounter(); &#125; //Loading counter value on start _loadCounter() async &#123; SharedPreferences prefs = await SharedPreferences.getInstance(); setState(() &#123; _counter = (prefs.getInt('counter') ?? 0); &#125;); &#125; //Incrementing counter after click _incrementCounter() async &#123; SharedPreferences prefs = await SharedPreferences.getInstance(); _counter = (prefs.getInt('counter') ?? 0) + 1; setState(() &#123; _counter; &#125;); prefs.setInt('counter', _counter); &#125; @override Widget build(BuildContext context) &#123; return new Scaffold( appBar: new AppBar( title: new Text(widget.title), ), body: new Center( child: new Column( mainAxisAlignment: MainAxisAlignment.center, children: &lt;Widget&gt;[ new Text( 'You have pushed the button this many times:', ), new Text( '$_counter', style: Theme.of(context).textTheme.display1, ), ], ), ), floatingActionButton: new FloatingActionButton( onPressed: _incrementCounter, tooltip: 'Increment', child: new Icon(Icons.add), ), // This trailing comma makes auto-formatting nicer for build methods. ); &#125;&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 4.组件与布局","slug":"android/Flutter/Flutter 4.组件与布局","date":"2018-07-05T05:27:36.254Z","updated":"2018-09-04T13:52:39.855Z","comments":true,"path":"2018/07/05/android/Flutter/Flutter 4.组件与布局/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/05/android/Flutter/Flutter 4.组件与布局/","excerpt":"","text":"android Flutter 4.组件与布局Flutter带有一套强大的基本小组件1 Text 文本2 Row 水平布局3 Column 垂直布局Row Column 其设计基于网络的Flexbox布局模型。4 Stack 可以让你在绘制顺序上堆叠小部件 然后，您可以Positioned 在a的子项上使用该 小部件， Stack以相对于堆栈的顶部，右侧，底部或左侧边缘定位它们。堆栈基于Web的绝对定位布局模型。 6 Container：Container 小部件可让您创建矩形视觉元素。一个容器可以装饰一个 BoxDecoration，如背景，边框或阴影。A Container 也可以具有边距，填充和应用于其大小的约束。另外， Container 可以使用矩阵在三维空间中对a进行变换。 Using Material Components 质应用程序以MaterialApp 小部件开始， 小部件在应用程序的根部创建了许多有用的小部件，其中包括一个 Navigator管理由字符串标识的一堆小部件（也称为“路由”）的小部件。将 Navigator 让您应用程序的屏幕之间的平稳过渡。使用 MaterialApp 小部件完全是可选的，但是一个很好的做法。 ListView 1 水平ListView12345678910111213141516171819202122232425262728293031323334353637 @override Widget build(BuildContext context) &#123; return new Scaffold(// appBar: new AppBar(title: new Text(\"Secutity\"),), body: new Container( margin: new EdgeInsets.symmetric(vertical: 20.0), height: 200.0, child: new ListView( scrollDirection: Axis.horizontal, children: &lt;Widget&gt;[ new Container( width: 160.0, color: Colors.red, ), new Container( width: 160.0, color: Colors.yellow, ), new Container( width: 160.0, color: Colors.green, ), new Container( width: 160.0, color: Colors.yellow, ), new Container( width: 160.0, color: Colors.orange, ), ], ), ) ); &#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 3.使用使用外部包","slug":"android/Flutter/Flutter 3.使用使用外部包","date":"2018-07-05T05:24:51.195Z","updated":"2018-09-04T13:52:35.554Z","comments":true,"path":"2018/07/05/android/Flutter/Flutter 3.使用使用外部包/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/05/android/Flutter/Flutter 3.使用使用外部包/","excerpt":"","text":"android Flutter 3.使用使用外部包公开资源包https://pub.dartlang.org/flutter/ 例子添加 english_words 1 pubspec.yaml中添加123456dependencies: flutter: sdk: flutter cupertino_icons: ^0.1.0 english_words: ^3.1.0 # add this line 2 更新 package点击 Packages get 3 .dart文件中引入package12import 'package:flutter/material.dart';import 'package:english_words/english_words.dart'; // Add this line. 4 使用1234567891011121314151617181920212223import 'package:flutter/material.dart';import 'package:english_words/english_words.dart'; // Add this line./// MySnapPageclass MySnapPage extends StatefulWidget &#123; @override _MySnapPageState createState() =&gt; new _MySnapPageState();&#125;class _MySnapPageState extends State&lt;MySnapPage&gt; &#123; @override Widget build(BuildContext context) &#123; final wordPair = new WordPair.random(); // Add this line. return new Scaffold(// appBar: new AppBar(title: new Text(\"MySnapPage\"),),// body: new Center(child: new Text(\"MySnapPage\")), body: new Center(child: new Text(wordPair.asPascalCase) ), ); &#125;&#125; 创建WordPair1final wordPair = new WordPair.random(); // Add this line. 使用wordPair new Text(wordPair.asPascalCase)","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"android Flutter 1.环境配置","slug":"android/Flutter/Flutter 1.环境配置","date":"2018-07-05T05:18:38.891Z","updated":"2018-09-04T13:52:22.662Z","comments":true,"path":"2018/07/05/android/Flutter/Flutter 1.环境配置/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/05/android/Flutter/Flutter 1.环境配置/","excerpt":"","text":"android Flutter 1.环境配置安装参考官方网站https://flutter.io/setup-macos/#update-your-path flutter 中文 一 本地环境配置1. 下载1.1 下载压缩包flutter_macos_v0.3.1-beta.zip 解压即可 1.2 git 下载如果你是第一次在你机器上安装 Flutter ，克隆 beta 分支的仓库然后添加 flutter 工具到你的路径 git clone -b beta https://github.com/flutter/flutter.git export PATH=`pwd`/flutter/bin:$PATH 2. 设置环境变量.bash_profile中添加 以下代码 [PATH_TO_FLUTTER_GIT_DIRECTORY] 为本地路径 export PATH=[PATH_TO_FLUTTER_GIT_DIRECTORY]/flutter/bin:$PATH 刷新 文件 source $HOME/.bash_profile check wherther the installation is successful flutter doctor 二 工具 环境配置1. android Studio 环境配置参考 官方文档https://flutter.io/get-started/editor/#androidstudio android Studio 安装 flutter 插件(Plugins &gt; Browserepositories &gt; 搜索 Flutter 选择安装) 安装完成出出现Start a new Flutter project创建 Flutter项目 2. IOS 环境配置mac 中 安装 Xcode命令行sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer sudo xcodebuild -license 创建ios模拟器open -a Simulator 3. idea 环境配置idea 可以运行 android IOS 平台先安装插件 Filtter 重启idea 创建项目选择Flutter运行 三 问题1 idea Please configure Android SDKhttps://stackoverflow.com/questions/21070268/intellij-idea-13-error-please-select-android-sdk 2 idea Dart SDK is not configured下载https://www.dartlang.org/tools/sdk/archive 配置 运行成功","categories":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/tags/Flutter/"}],"keywords":[{"name":"Flutter","slug":"Flutter","permalink":"http://www.kylinhuang.cn/categories/Flutter/"}]},{"title":"Markdown 基本语法","slug":"工具/Markdown基本语法","date":"2018-07-04T02:33:00.429Z","updated":"2018-08-08T11:38:38.124Z","comments":true,"path":"2018/07/04/工具/Markdown基本语法/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/Markdown基本语法/","excerpt":"","text":"标题标题一标题二标题三标题四1234# 标题一## 标题二### 标题三#### 标题四 引用大于号 &gt;1&gt; ddd ddd 代码引用 需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。如果引用的语句为多行，可以将1234567# 段落``` bash System.out.println(&quot;url&quot; + url); 连接1[Deployment](https://hexo.io/docs/deployment.html) Deployment 图片12345![Alt text](http://ow59rnl1a.bkt.clouddn.com/snap_playback_%E6%97%B6%E5%BA%8F%E5%9B%BE.png \"Optional title\")# 图片 html 方式&lt;img src=\"http://ow59rnl1a.bkt.clouddn.com/Wechat_play.jpeg\" width = \"300\" height = \"300\" alt=\"微信\" align=center /&gt; 粗体 斜体1*一盏灯* 一盏灯 一盏灯 表格12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 vim /home/wwwroot/www.kylinhuang.cn/lib/config-simple.php 目录1.一级目录 1.1二级目录 1.1.1三级目录 一级目录 二级目录 三级目录 st=>start: Start i=>inputoutput: 输入年份n cond1=>condition: n能否被4整除？ cond2=>condition: n能否被100整除？ cond3=>condition: n能否被400整除？ o1=>inputoutput: 输出非闰年 o2=>inputoutput: 输出非闰年 o3=>inputoutput: 输出闰年 o4=>inputoutput: 输出闰年 e=>end st->i->cond1 cond1(no)->o1->e cond1(yes)->cond2 cond2(no)->o3->e cond2(yes)->cond3 cond3(yes)->o2->e cond3(no)->o4->e{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);#由于渲染问题， st=>start: 开始 e=>end: 结束 op=>operation: 我的操作 cond=>condition: 确认？ st->op->cond cond(yes)->e cond(no)->op{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-1-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-1-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-1\", options);","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://www.kylinhuang.cn/tags/Markdown/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"七牛云存储","slug":"工具/七牛云存储","date":"2018-07-04T02:32:54.443Z","updated":"2018-10-27T05:40:23.209Z","comments":true,"path":"2018/07/04/工具/七牛云存储/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/七牛云存储/","excerpt":"","text":"七牛云存储账号 gmail 域名1ow59rnl1a.bkt.clouddn.com https://portal.qiniu.com/bucket/photo/resource http://ow59rnl1a.bkt.clouddn.com/snap_playback_%E6%97%B6%E5%BA%8F%E5%9B%BE.png ow59rnl1a.bkt.clouddn.com 同步工具使用 qshell 下载工具下载地址","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"云存储","slug":"云存储","permalink":"http://www.kylinhuang.cn/tags/云存储/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"git","slug":"工具/git/git","date":"2018-07-04T02:32:54.442Z","updated":"2018-07-04T02:32:54.442Z","comments":true,"path":"2018/07/04/工具/git/git/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/git/git/","excerpt":"","text":"git git 安装Linux (Ubuntu, Debian)：sudo apt-get install git-coreLinux (Fedora, Red Hat, CentOS)：sudo yum install git-core","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"git","slug":"git","permalink":"http://www.kylinhuang.cn/tags/git/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"wiki环境搭建","slug":"工具/wiki","date":"2018-07-04T02:32:54.442Z","updated":"2018-07-04T02:32:54.443Z","comments":true,"path":"2018/07/04/工具/wiki/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/wiki/","excerpt":"","text":"TiddlyWiki5https://github.com/Jermolene/TiddlyWiki5 git 安装Linux (Ubuntu, Debian)：sudo apt-get install git-coreLinux (Fedora, Red Hat, CentOS)：sudo yum install git-core","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"wiki","slug":"wiki","permalink":"http://www.kylinhuang.cn/tags/wiki/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"CentOS搭建VPS控制面板","slug":"工具/CentOS搭建/CentOS搭建VPS控制面板","date":"2018-07-04T02:32:54.441Z","updated":"2018-07-04T02:32:54.441Z","comments":true,"path":"2018/07/04/工具/CentOS搭建/CentOS搭建VPS控制面板/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/CentOS搭建/CentOS搭建VPS控制面板/","excerpt":"","text":"1 宝塔 Linux/Windows 面板 安装12yum -y install screen wget &amp;&amp; echo -e “defencoding utf-8\\nencoding utf-8 utf-8” &gt;&gt; /etc/screenrc &amp;&amp; screen -S btwget -O install.sh http://125.88.182.172:5880/src/install.sh &amp;&amp; sh install.sh 访问账号 admin查看宝塔初始密码1cat /www/server/panel/default.pl 网站管理http://kylinhuang.top/admin/ http://blog.kylinhuang.top1234用户：admin密码： zblogger访问站点：http://blog.kylinhuang.tophttp://blog.kylinhuang.top/zb_system/admin/ http://android.kylinhuang.top123用户： admin密码： zblogger访问站点： http://android.kylinhuang.top WDCP Linux服务器管理系统 参考https://www.freehao123.com/top-10-vps-cp/","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"CentOS搭建 dokuwiki","slug":"工具/CentOS搭建/Centos 搭建 dokuwiki","date":"2018-07-04T02:32:54.441Z","updated":"2018-11-02T10:35:29.402Z","comments":true,"path":"2018/07/04/工具/CentOS搭建/Centos 搭建 dokuwiki/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/CentOS搭建/Centos 搭建 dokuwiki/","excerpt":"","text":"1 在centos7 下安装apache2，php1234yum install httpd yum install php /etc/init.d/httpd start chkconfig --levels 235 httpd on --- 开机自启，建议打开 2 安装 dokuwiki2.1 下载地址http://download.dokuwiki.org/ 2.2 解压缩到你的网站目录下，比如/var/www/html/dokuwiki。apache默认的目录/var/www/html，故需要把解压后的目录拷贝到这下面 2.3 权限设置dokuwiki的访问权限 123chown -R apache:root /var/www/html/dokuwiki chmod -R 664 /var/www/html/dokuwiki/ find /var/www/html/dokuwiki/ -type d -exec chmod 775 &#123;&#125; \\; 3 访问service httpd restarthttp://域名/dokuwiki/data/pages/wiki/dokuwiki.txt","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"CentOS搭建 Tomcat","slug":"工具/CentOS搭建/CentOS搭建 Tomcat","date":"2018-07-04T02:32:54.440Z","updated":"2018-08-08T11:21:47.579Z","comments":true,"path":"2018/07/04/工具/CentOS搭建/CentOS搭建 Tomcat/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/CentOS搭建/CentOS搭建 Tomcat/","excerpt":"","text":"1 java 安装12yum updateyum install java-1.8.0-openjdk-headless https://linode.com/docs/development/java/install-java-on-centos/参考 2 安装 Tomcat2.1 下载下载地址http://tomcat.apache.org/ 12345wget -c http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70tar -zxvf apache-tomcat-7.0.82.tar.gz cd apache-tomcat-7.0.82./startup.sh","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"CentOS搭建 python","slug":"工具/CentOS搭建/CentOS搭建Python","date":"2018-07-04T02:32:54.440Z","updated":"2018-07-04T02:32:54.441Z","comments":true,"path":"2018/07/04/工具/CentOS搭建/CentOS搭建Python/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/CentOS搭建/CentOS搭建Python/","excerpt":"","text":"1、CentOS安装Python的依赖包12yum groupinstall \"Development tools\"yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel 2、下载Python3.4的源码包并编译123456wget https://www.python.org/ftp/python/3.4.1/Python-3.4.1.tgztar xf Python-3.4.1.tgzcd Python-3.4.1./configure --prefix=/usr/local --enable-sharedmakemake install 3、在运行Python之前需要配置库：12echo /usr/local/lib &gt;&gt; /etc/ld.so.conf.d/local.confldconfig 4、运行演示：12python3 --versionPython 3.4.1 5、删除编译Python时所需要的库12yum groupremove \"Development tools\" --remove-leavesyum remove zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel --remove-leaves 参考http://www.linuxidc.com/Linux/2015-01/111870.htm","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"CentOS搭建Hexo","slug":"工具/CentOS搭建/CentOS搭建Hexo","date":"2018-07-04T02:32:54.440Z","updated":"2018-07-04T02:32:54.440Z","comments":true,"path":"2018/07/04/工具/CentOS搭建/CentOS搭建Hexo/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/CentOS搭建/CentOS搭建Hexo/","excerpt":"","text":"CentOS环境搭建Hexo git安装yum install git-core node安装方法一 方法二123yum install epel-releaseyum install nodejsyum install npm java https://jingyan.baidu.com/article/4853e1e51d0c101909f72607.html tomcat","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"CentOS搭建 Ftp","slug":"工具/CentOS搭建/CentOS搭建 Ftp","date":"2018-07-04T02:32:54.439Z","updated":"2018-07-04T02:32:54.440Z","comments":true,"path":"2018/07/04/工具/CentOS搭建/CentOS搭建 Ftp/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/CentOS搭建/CentOS搭建 Ftp/","excerpt":"","text":"1.安装vsftpd12yum check-updateyum -y install vsftpd 2.配置参数1vi /etc/vsftpd/vsftpd.conf 修改为如下内容123456anonymous_enable=NOchroot_local_user=YESallow_writeable_chroot=YESpasv_enable=YESpasv_min_port=40000pasv_max_port=40100 3.重启ftp123firewall-cmd --permanent --add-service=ftpfirewall-cmd --reloadsetsebool -P ftp_home_dir on 5.为ftp创建一个用户test1（指定目录为/home/www，不允许远程登录shell）123useradd -d /home/www -m test1 -s /sbin/nologincd /home/wwwchmod -R 777 * 6.为ftp用户设置一个密码1passwd root","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"VIP看看 - 看会员视频","slug":"工具/VIP看看","date":"2018-07-04T02:32:54.438Z","updated":"2018-07-10T16:33:28.325Z","comments":true,"path":"2018/07/04/工具/VIP看看/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/VIP看看/","excerpt":"","text":"VIP看看轻松看 腾讯 优酷 爱奇艺等 vip 视频 不同的浏览器 有不同的方式下面 介绍 google chrome 1 下载 安装google 应用商店 搜索 Vip看看选择选择添加至chrome 就可以了 但是 google 应用商店 需要翻墙 才可以使用翻墙账号 查看科学上网 如果不能翻墙或者是其他浏览器可以查看教程http://www.tudou.com/programs/view/L6ATpgHHbyQ/ 3 使用使用时候不需要翻墙在腾讯 优酷 爱奇艺等视频网站观看视频页面空白处右击鼠标 选择VIP看看就可以查看vip视频了","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"VIP看看","slug":"VIP看看","permalink":"http://www.kylinhuang.cn/tags/VIP看看/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"辅助工具 接口文档管理工具","slug":"工具/辅助工具 接口文档管理工具","date":"2018-07-04T02:31:38.075Z","updated":"2018-07-04T02:31:38.076Z","comments":true,"path":"2018/07/04/工具/辅助工具 接口文档管理工具/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/辅助工具 接口文档管理工具/","excerpt":"","text":"每个公司有自己接口管理有自己的 接口管理网页(html页面 ajax测试)有自己公司的GUI工具 (测试接口 )Postman 测试的 下面介绍下 第三方的接口管理 1 RAP 阿里巴巴http://rap.taobao.org/org/index.dohttp://rapapi.org/org/index.do 最初接触 是学习慕课网 js全栈 视频 介绍的 作者之前维护这个项目可视化接口管理工具设定接口模拟数据校验真实接口正确性 2 docleverhttp://doclever.cn/全部开源 太牛了 围绕接口定义文档，通过一系列自动化工具提升我们的协作效率。DOClever前后端全部采用了javascript来作为开发语言，前端用的是vue+element UI后端是express+mongodb， 正在使用中 体验完 在写 感受 3 SwaggerSwagger是一个规范和完整的框架，用于生成、描述、调用和可视化RESTful风格的Web服务。 简单来说，Swagger是一个功能强大的接口管理工具，并且提供了多种编程语言的前后端分离解决方案。Swagger主要包含了以下4个部分： 1. Swagger可以直接嵌入项目中，通过开发时编写注释，自动生成接口文档； 2. Swagger包含了SwaggerEditor，它是使用yaml语言的Swagger API的编辑器，支持导出yaml和json格式的接口文件； 3. Swagger包含了SwaggerUI，它将Swagger Editor编辑好的接口文档以html的形式展示出来； 4. Swagger支持根据定义的接口导出各种语言的服务端或客户端代码。 其中1和4是更加面向开发的内容，开发团队要有自动生成文档的需求，在开发和自测中遵循前后端分离。而2和3是相对可以独立出来的、可供QA人员参考的接口文档管理方案，也是我们主要关注的部分。 Swagger提供了SwaggerEditor和Swagger UI的在线demo，如下图。可以看出，Swagger可以完整地定义一个接口的内容，包括各个参数、返回值的具体结构、类型，SwaggerEditor可以实时进行编辑并在线调试。编辑好的API可以导出为json文件，使用Swagger UI打开即可以看到更美观的接口文档。 Swagger Editor和SwaggerUI的本地部署十分简单，这两者都可以直接从Github上下载源码，将其部署到本地Tomcat服务器上，然后通过浏览器访问即可。官方还提供了其他几种部署方式，具体步骤在帮助文档中有详细说明，这里不再赘述。 这个 还没使用过 待更新","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"本地环境 MySQL","slug":"工具/mysql/本地环境MySQL","date":"2018-07-04T02:31:38.075Z","updated":"2018-07-04T02:31:38.075Z","comments":true,"path":"2018/07/04/工具/mysql/本地环境MySQL/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/mysql/本地环境MySQL/","excerpt":"","text":"###1 下载 软件https://dev.mysql.com/downloads/file/?id=472883 2 安装3 配置1 mac 偏好设置 点击MySql 启动 服务2 配置环境变量123456(1).进入/usr/local/mysql/bin,查看此目录下是否有mysql(2).执行vim ~/.bash_profile 在该文件中添加mysql/bin的目录 PATH=$PATH:/usr/local/mysql/bin添加完成后，按esc，然后输入wq保存。最后在命令行输入source ~/.bash_profile 3 连接12345mysql -uroot -porsudo mysql -uroot -p","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"安装node","slug":"工具/node/node安装","date":"2018-07-04T02:31:38.074Z","updated":"2018-11-19T15:26:11.343Z","comments":true,"path":"2018/07/04/工具/node/node安装/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/node/node安装/","excerpt":"","text":"安装HomeBrewHomebrew是OS X的套件(包)管理器，我们可以通过它获取并且安装很多组件网页打开 brew.sh 复制 安装命令 1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 终端中粘贴安装 node 安装node 一、Node 升级 利用Node.js的多版本管理器nsudo npm cache clean -f //清除nodejs的cache：sudo npm install -g n //使用npm安装n模块npm view node versions // node所有版本sudo n latest // 升级到最新版本sudo n stable // 升级到稳定版本sudo n xx.xx // 升级到具体版本号 2.利用brew升级brew update(1).更新homebrew,如果出现The /usr/local directory is not writable.则需要更改权限 ，然后输入：sudo chown -R $(whoami) /usr/local(2).升级完以后，会弹出这个Homebrew no longer needs to have ownership of /usr/local. If you wish you canreturn /usr/local to its default ownership withsudo chown root:wheel /usr/local(3). 按提示输入下边的命令，更改会原来的权限sudo chown root:wheel /usr/local 接下来更新nodebrew upgrade node 一、npm 升级sudo npm install npm@latest -g //升级到最新版sudo npm install npm@xx -g //升级到指定版本npm version // 查看版本详情npm view npm version // npm最新版本npm view npm versions // npm所有版本npm list // 插件清单 切换 版本12npm install -g nn 6.5.0 安装指定版本的 Node.jsnvm 命令在线安装指定版本的 Node.jsnvm install [nodeversion] 指定当前使用的 Node.js 版本nvm use [nodeversion] 设置Node.js 默认版本nvm alias default v10.xxx","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"node","slug":"node","permalink":"http://www.kylinhuang.cn/tags/node/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"Mac OSX下 卸载node.js","slug":"工具/node/node卸载","date":"2018-07-04T02:31:38.073Z","updated":"2018-07-04T02:31:38.073Z","comments":true,"path":"2018/07/04/工具/node/node卸载/","link":"","permalink":"http://www.kylinhuang.cn/2018/07/04/工具/node/node卸载/","excerpt":"","text":"卸载node如果是从brew安装的, 运行brew uninstall node删除~/目录下所有node和node_modules删除/usr/local/lib中的所有node和node_modules删除/usr/local/lib中的所有node和node_modules的文件夹在/usr/local/bin中, 删除所有node的可执行文件(node和npm) 手动删除文件，整理成脚本是这个样子: 123456sudo rm -rf ~/.npmsudo rm -rf ~/node_modulessudo rm -rf ~/.node-gypsudo rm /usr/local/bin/nodesudo rm /usr/local/bin/npmsudo rm /usr/local/lib/dtrace/node.d 卸载.nvm之前是手动安装的nvm，nvm的目录结构比较简单，删除这三个就可以了 123rm -rf ~/.nvmrm -rf ~/.npmrm -rf ~/.bower","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[{"name":"node","slug":"node","permalink":"http://www.kylinhuang.cn/tags/node/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"android SwipeRefreshLayout","slug":"android/android SwipeRefreshLayout","date":"2018-01-25T08:49:43.674Z","updated":"2018-08-08T11:34:52.694Z","comments":true,"path":"2018/01/25/android/android SwipeRefreshLayout/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/android/android SwipeRefreshLayout/","excerpt":"","text":"1 简介 WebView是一个基于webkit引擎、展现web页面的控件。Android的Webview在低版本和高版本采用了不同的webkit版本内核，4.4后直接使用了Chrome。 2 作用 显示和渲染Web页面 直接使用html文件（网络上或本地assets中）作布局 可和JavaScript交互调用 WebView控件功能强大，除了具有一般View的属性和设置外，还可以对url请求、页面加载、渲染、页面交互进行强大的处理。 3 使用介绍 Webview自身的常见方法； Webview的最常用的子类 （WebSettings类、WebViewClient类、WebChromeClient类) Android和Js的交互 3.1 Webview自身的常见方法 3.1.1 WebView的状态 1234567891011121314151617181920//激活WebView为活跃状态，能正常执行网页的响应webView.onResume() ；//当页面被失去焦点被切换到后台不可见状态，需要执行onPause//通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。webView.onPause()；//当应用程序(存在webview)被切换到后台时，这个方法不仅仅针对当前的webview而是全局的全应用程序的webview//它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。webView.pauseTimers()//恢复pauseTimers状态webView.resumeTimers()；//销毁Webview//在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview//但是注意：webview调用destory时,webview仍绑定在Activity上//这是由于自定义webview构建时传入了该Activity的context对象//因此需要先从父容器中移除webview,然后再销毁webview:rootLayout.removeView(webView); webView.destroy(); 3.1.2 关于前进 / 后退网页 12345678910111213//是否可以后退Webview.canGoBack() //后退网页Webview.goBack()//是否可以前进 Webview.canGoForward()//前进网页Webview.goForward()//以当前的index为起始点前进或者后退到历史记录中指定的steps//如果steps为负数则为后退，正数则为前进Webview.goBackOrForward(intsteps) 运用 activity back 12345678910111213141516171819@Overridepublic boolean onKeyDown(int keyCode, KeyEvent event) &#123; if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123; setWebViewGoBack(); return true; &#125; return false;&#125;/** * 设置webView 后退 */private void setWebViewGoBack() &#123; if (mWebview.canGoBack()) &#123; mWebview.goBack(); &#125; else &#123; finish(); &#125;&#125; 3.1.3 清除缓存数据 12345678910//清除网页访问留下的缓存//由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.Webview.clearCache(true);//清除当前webview访问的历史记录//只会webview访问历史记录里的所有记录除了当前访问记录Webview.clearHistory()；//这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据Webview.clearFormData()； 3.2 常用类 3.2.1 WebSettings类 配置步骤1：添加访问网络权限（AndroidManifest.xml）1&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt; 配置步骤2：生成一个WebView组件（有两种方式）12345//方式1：直接在在Activity中生成WebView webView = new WebView(this)//方法2：在Activity的layout文件里添加webview控件：WebView webview = (WebView) findViewById(R.id.webView1); 配置步骤3：进行配置-利用WebSettings子类（常见方法） 123456789101112131415161718192021222324//声明WebSettings子类WebSettings webSettings = webView.getSettings();//如果访问的页面中要与Javascript交互，则webview必须设置支持JavascriptwebSettings.setJavaScriptEnabled(true); //支持插件webSettings.setPluginsEnabled(true); //设置自适应屏幕，两者合用webSettings.setUseWideViewPort(true); //将图片调整到适合webview的大小 webSettings.setLoadWithOverviewMode(true); // 缩放至屏幕的大小//缩放操作webSettings.setSupportZoom(true); //支持缩放，默认为true。是下面那个的前提。webSettings.setBuiltInZoomControls(true); //设置内置的缩放控件。若为false，则该WebView不可缩放webSettings.setDisplayZoomControls(false); //隐藏原生的缩放控件//其他细节操作webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 webSettings.setAllowFileAccess(true); //设置可以访问文件 webSettings.setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 webSettings.setLoadsImagesAutomatically(true); //支持自动加载图片webSettings.setDefaultTextEncodingName(\"utf-8\");//设置编码格式 常见用法：设置WebView缓存 当加载 html 页面时，WebView会在/data/data/包名目录下生成 database 与 cache 两个文件夹 请求的 URL记录保存在 WebViewCache.db，而 URL的内容是保存在 WebViewCache 文件夹下 是否启用缓存 12345678910//优先使用缓存: WebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //缓存模式如下： //LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据 //LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。 //LOAD_NO_CACHE: 不使用缓存，只从网络获取数据. //LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。//不使用缓存: WebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE); 结合使用（离线加载) 1234567891011121314if (NetStatusUtil.isConnected(getApplicationContext())) &#123; webSettings.setCacheMode(WebSettings.LOAD_DEFAULT); //根据cache-control决定是否从网络上取数据。&#125; else &#123; webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //没网，则从本地获取，即离线加载&#125;webSettings.setDomStorageEnabled(true); // 开启 DOM storage API 功能webSettings.setDatabaseEnabled(true); //开启 database storage API 功能webSettings.setAppCacheEnabled(true);//开启 Application Caches 功能String cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;webSettings.setAppCachePath(cacheDirPath); //设置 Application Caches 缓存目录 注意： 每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize() 3.2.2 WebViewClient类 作用：处理各种通知 &amp; 请求事件 常见方法： 常见方法1：shouldOverrideUrlLoading() 作用：打开网页时不调用系统浏览器， 而是在本WebView中显示；在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。123456789101112131415161718192021//步骤1. 定义Webview组件Webview webview = (WebView) findViewById(R.id.webView1);//步骤2. 选择加载方式 //方式1. 加载一个网页： webView.loadUrl(\"http://www.google.com/\"); //方式2：加载apk包中的html页面 webView.loadUrl(\"file:///android_asset/test.html\"); //方式3：加载手机本地的html页面 webView.loadUrl(\"content://com.android.htmlfileprovider/sdcard/test.html\");//步骤3. 复写shouldOverrideUrlLoading()方法，使得打开网页时不调用系统浏览器， 而是在本WebView中显示 webView.setWebViewClient(new WebViewClient()&#123; @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; view.loadUrl(url); return true; &#125; &#125;); 常见方法2：onPageStarted() 作用：开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。123456webView.setWebViewClient(new WebViewClient()&#123; @Override public void onPageStarted(WebView view, String url, Bitmap favicon) &#123; //设定加载开始的操作 &#125; &#125;); 常见方法3：onPageFinished() 作用：在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。123456789 /** * 在页面加载结束时调用。 */@Overridepublic void onPageFinished(WebView view, String url) &#123; //设定加载结束的操作 mProgressBar.setVisibility(View.GONE);&#125; 常见方法4：onLoadResource() 作用：在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。123456 webView.setWebViewClient(new WebViewClient()&#123; @Override public boolean onLoadResource(WebView view, String url) &#123; //设定加载资源的操作 &#125;&#125;); 常见方法5：onReceivedError（） 作用：加载页面的服务器出现错误时（如404）调用。 App里面使用webview控件的时候遇到了诸如404这类的错误的时候，若也显示浏览器里面的那种错误提示页面就显得很丑陋了，那么这个时候我们的app就需要加载一个本地的错误提示页面，即webview如何加载一个本地的页面 12345678910111213141516//步骤1：写一个html文件（error_handle.html），用于出错时展示给用户看的提示页面//步骤2：将该html文件放置到代码根目录的assets文件夹下//步骤3：复写WebViewClient的onRecievedError方法//该方法传回了错误码，根据错误类型可以进行不同的错误分类处理 webView.setWebViewClient(new WebViewClient()&#123; @Override public void onReceivedError(WebView view, int errorCode, String description, String failingUrl)&#123;switch(errorCode) &#123; case HttpStatus.SC_NOT_FOUND: view.loadUrl(\"file:///android_assets/error_handle.html\"); break; &#125; &#125; &#125;); 常见方法6：onReceivedSslError() 作用：处理https请求webView默认是不处理https请求的，页面显示空白，需要进行如下设置：12345678webView.setWebViewClient(new WebViewClient() &#123; @Override public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) &#123; handler.proceed(); //表示等待证书响应 // handler.cancel(); //表示挂起连接，为默认方式 // handler.handleMessage(null); //可做其他处理 &#125; &#125;); 3.2.3 WebChromeClient类 作用：辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等。常见使用： 常见方法1： onProgressChanged（） 作用：获得网页的加载进度并显示 12345678910webview.setWebChromeClient(new WebChromeClient()&#123; @Override public void onProgressChanged(WebView view, int newProgress) &#123; if (newProgress &lt; 100) &#123; String progress = newProgress + \"%\"; progress.setText(progress); &#125; else &#123; &#125; &#125;&#125;); 常见方法2： onReceivedTitle（） 作用：获取Web页中的标题 1234567webview.setWebChromeClient(new WebChromeClient()&#123; @Override public void onReceivedTitle(WebView view, String title) &#123; titleview.setText(title)； &#125;&#125;); 3.3 WebView与JS的交互参考 3.4 注意事项：如何避免WebView内存泄露？ 3.4.1 不在xml中定义 Webview ，而是在需要的时候在Activity中创建，并且Context使用 getApplicationgContext() 1234LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);mWebView = new WebView(getApplicationContext());mWebView.setLayoutParams(params);mLayout.addView(mWebView); 3.4.2 在 Activity 销毁（ WebView ）的时候，先让 WebView 加载null内容，然后移除 WebView，再销毁 WebView，最后置空。 123456789101112@Overrideprotected void onDestroy() &#123; if (mWebView != null) &#123; mWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null); mWebView.clearHistory(); ((ViewGroup) mWebView.getParent()).removeView(mWebView); mWebView.destroy(); mWebView = null; &#125; super.onDestroy();&#125; 参考","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"SwipeRefreshLayout","slug":"SwipeRefreshLayout","permalink":"http://www.kylinhuang.cn/tags/SwipeRefreshLayout/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android O Fonts","slug":"android/android O Fonts","date":"2018-01-25T08:49:43.673Z","updated":"2018-08-29T09:14:41.452Z","comments":true,"path":"2018/01/25/android/android O Fonts/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/android/android O Fonts/","excerpt":"","text":"1 Downloadable Fonts您可以使用可下载字体功能在以下几个方面： 使用Android Studio和谷歌播放服务 编程 通过支持库 2 Fonts in XMLWebView控件功能强大，除了具有一般View的属性和设置外，还可以对url请求、页面加载、渲染、页面交互进行强大的处理。 3 使用介绍 Webview自身的常见方法； Webview的最常用的子类 （WebSettings类、WebViewClient类、WebChromeClient类) Android和Js的交互 3.1 Webview自身的常见方法 3.1.1 WebView的状态 1234567891011121314151617181920//激活WebView为活跃状态，能正常执行网页的响应webView.onResume() ；//当页面被失去焦点被切换到后台不可见状态，需要执行onPause//通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。webView.onPause()；//当应用程序(存在webview)被切换到后台时，这个方法不仅仅针对当前的webview而是全局的全应用程序的webview//它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。webView.pauseTimers()//恢复pauseTimers状态webView.resumeTimers()；//销毁Webview//在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview//但是注意：webview调用destory时,webview仍绑定在Activity上//这是由于自定义webview构建时传入了该Activity的context对象//因此需要先从父容器中移除webview,然后再销毁webview:rootLayout.removeView(webView); webView.destroy(); 3.1.2 关于前进 / 后退网页 12345678910111213//是否可以后退Webview.canGoBack() //后退网页Webview.goBack()//是否可以前进 Webview.canGoForward()//前进网页Webview.goForward()//以当前的index为起始点前进或者后退到历史记录中指定的steps//如果steps为负数则为后退，正数则为前进Webview.goBackOrForward(intsteps) 运用 activity back 12345678910111213141516171819@Overridepublic boolean onKeyDown(int keyCode, KeyEvent event) &#123; if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123; setWebViewGoBack(); return true; &#125; return false;&#125;/** * 设置webView 后退 */private void setWebViewGoBack() &#123; if (mWebview.canGoBack()) &#123; mWebview.goBack(); &#125; else &#123; finish(); &#125;&#125; 3.1.3 清除缓存数据 12345678910//清除网页访问留下的缓存//由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.Webview.clearCache(true);//清除当前webview访问的历史记录//只会webview访问历史记录里的所有记录除了当前访问记录Webview.clearHistory()；//这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据Webview.clearFormData()； 3.2 常用类 3.2.1 WebSettings类 配置步骤1：添加访问网络权限（AndroidManifest.xml）1&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt; 配置步骤2：生成一个WebView组件（有两种方式）12345//方式1：直接在在Activity中生成WebView webView = new WebView(this)//方法2：在Activity的layout文件里添加webview控件：WebView webview = (WebView) findViewById(R.id.webView1); 配置步骤3：进行配置-利用WebSettings子类（常见方法） 123456789101112131415161718192021222324//声明WebSettings子类WebSettings webSettings = webView.getSettings();//如果访问的页面中要与Javascript交互，则webview必须设置支持JavascriptwebSettings.setJavaScriptEnabled(true); //支持插件webSettings.setPluginsEnabled(true); //设置自适应屏幕，两者合用webSettings.setUseWideViewPort(true); //将图片调整到适合webview的大小 webSettings.setLoadWithOverviewMode(true); // 缩放至屏幕的大小//缩放操作webSettings.setSupportZoom(true); //支持缩放，默认为true。是下面那个的前提。webSettings.setBuiltInZoomControls(true); //设置内置的缩放控件。若为false，则该WebView不可缩放webSettings.setDisplayZoomControls(false); //隐藏原生的缩放控件//其他细节操作webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 webSettings.setAllowFileAccess(true); //设置可以访问文件 webSettings.setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 webSettings.setLoadsImagesAutomatically(true); //支持自动加载图片webSettings.setDefaultTextEncodingName(\"utf-8\");//设置编码格式 常见用法：设置WebView缓存 当加载 html 页面时，WebView会在/data/data/包名目录下生成 database 与 cache 两个文件夹 请求的 URL记录保存在 WebViewCache.db，而 URL的内容是保存在 WebViewCache 文件夹下 是否启用缓存 12345678910//优先使用缓存: WebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //缓存模式如下： //LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据 //LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。 //LOAD_NO_CACHE: 不使用缓存，只从网络获取数据. //LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。//不使用缓存: WebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE); 结合使用（离线加载) 1234567891011121314if (NetStatusUtil.isConnected(getApplicationContext())) &#123; webSettings.setCacheMode(WebSettings.LOAD_DEFAULT); //根据cache-control决定是否从网络上取数据。&#125; else &#123; webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //没网，则从本地获取，即离线加载&#125;webSettings.setDomStorageEnabled(true); // 开启 DOM storage API 功能webSettings.setDatabaseEnabled(true); //开启 database storage API 功能webSettings.setAppCacheEnabled(true);//开启 Application Caches 功能String cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;webSettings.setAppCachePath(cacheDirPath); //设置 Application Caches 缓存目录 注意： 每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize() 3.2.2 WebViewClient类 作用：处理各种通知 &amp; 请求事件 常见方法： 常见方法1：shouldOverrideUrlLoading() 作用：打开网页时不调用系统浏览器， 而是在本WebView中显示；在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。123456789101112131415161718192021//步骤1. 定义Webview组件Webview webview = (WebView) findViewById(R.id.webView1);//步骤2. 选择加载方式 //方式1. 加载一个网页： webView.loadUrl(\"http://www.google.com/\"); //方式2：加载apk包中的html页面 webView.loadUrl(\"file:///android_asset/test.html\"); //方式3：加载手机本地的html页面 webView.loadUrl(\"content://com.android.htmlfileprovider/sdcard/test.html\");//步骤3. 复写shouldOverrideUrlLoading()方法，使得打开网页时不调用系统浏览器， 而是在本WebView中显示 webView.setWebViewClient(new WebViewClient()&#123; @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; view.loadUrl(url); return true; &#125; &#125;); 常见方法2：onPageStarted() 作用：开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。123456webView.setWebViewClient(new WebViewClient()&#123; @Override public void onPageStarted(WebView view, String url, Bitmap favicon) &#123; //设定加载开始的操作 &#125; &#125;); 常见方法3：onPageFinished() 作用：在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。123456789 /** * 在页面加载结束时调用。 */@Overridepublic void onPageFinished(WebView view, String url) &#123; //设定加载结束的操作 mProgressBar.setVisibility(View.GONE);&#125; 常见方法4：onLoadResource() 作用：在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。123456 webView.setWebViewClient(new WebViewClient()&#123; @Override public boolean onLoadResource(WebView view, String url) &#123; //设定加载资源的操作 &#125;&#125;); 常见方法5：onReceivedError（） 作用：加载页面的服务器出现错误时（如404）调用。 App里面使用webview控件的时候遇到了诸如404这类的错误的时候，若也显示浏览器里面的那种错误提示页面就显得很丑陋了，那么这个时候我们的app就需要加载一个本地的错误提示页面，即webview如何加载一个本地的页面 12345678910111213141516//步骤1：写一个html文件（error_handle.html），用于出错时展示给用户看的提示页面//步骤2：将该html文件放置到代码根目录的assets文件夹下//步骤3：复写WebViewClient的onRecievedError方法//该方法传回了错误码，根据错误类型可以进行不同的错误分类处理 webView.setWebViewClient(new WebViewClient()&#123; @Override public void onReceivedError(WebView view, int errorCode, String description, String failingUrl)&#123;switch(errorCode) &#123; case HttpStatus.SC_NOT_FOUND: view.loadUrl(\"file:///android_assets/error_handle.html\"); break; &#125; &#125; &#125;); 常见方法6：onReceivedSslError() 作用：处理https请求webView默认是不处理https请求的，页面显示空白，需要进行如下设置：12345678webView.setWebViewClient(new WebViewClient() &#123; @Override public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) &#123; handler.proceed(); //表示等待证书响应 // handler.cancel(); //表示挂起连接，为默认方式 // handler.handleMessage(null); //可做其他处理 &#125; &#125;); 3.2.3 WebChromeClient类 作用：辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等。常见使用： 常见方法1： onProgressChanged（） 作用：获得网页的加载进度并显示 12345678910webview.setWebChromeClient(new WebChromeClient()&#123; @Override public void onProgressChanged(WebView view, int newProgress) &#123; if (newProgress &lt; 100) &#123; String progress = newProgress + \"%\"; progress.setText(progress); &#125; else &#123; &#125; &#125;&#125;); 常见方法2： onReceivedTitle（） 作用：获取Web页中的标题 1234567webview.setWebChromeClient(new WebChromeClient()&#123; @Override public void onReceivedTitle(WebView view, String title) &#123; titleview.setText(title)； &#125;&#125;); 3.3 WebView与JS的交互参考 3.4 注意事项：如何避免WebView内存泄露？ 3.4.1 不在xml中定义 Webview ，而是在需要的时候在Activity中创建，并且Context使用 getApplicationgContext() 1234LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);mWebView = new WebView(getApplicationContext());mWebView.setLayoutParams(params);mLayout.addView(mWebView); 3.4.2 在 Activity 销毁（ WebView ）的时候，先让 WebView 加载null内容，然后移除 WebView，再销毁 WebView，最后置空。 123456789101112@Overrideprotected void onDestroy() &#123; if (mWebView != null) &#123; mWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null); mWebView.clearHistory(); ((ViewGroup) mWebView.getParent()).removeView(mWebView); mWebView.destroy(); mWebView = null; &#125; super.onDestroy();&#125; 参考","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"android O","slug":"android-O","permalink":"http://www.kylinhuang.cn/tags/android-O/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Openwrt 固件配置","slug":"资源/openwrt/Openwrt配置","date":"2018-01-25T08:49:37.287Z","updated":"2018-01-25T08:49:37.287Z","comments":true,"path":"2018/01/25/资源/openwrt/Openwrt配置/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/资源/openwrt/Openwrt配置/","excerpt":"","text":"翻墙配置https://cokebar.info/archives/664 这个很实用 完全OK ftp1234opkg updateopkg install vsftpd openssh-sftp-server/etc/init.d/vsftpd enable/etc/init.d/vsftpd start OpenWrt挂载U盘(NTFS)并在网上邻居共享访问http://jingyan.baidu.com/article/5225f26b6b273fe6fa090829.html 12345678910111213opkg updateopkg install kmod-usb-coreopkg install kmod-usb2 #安装usb2.0opkg install kmod-usb-ohci #安装usb ohci控制器驱动opkg install kmod-usb-storage #安装usb存储设备驱动opkg install kmod-fs-ext3 #安装ext3分区格式支持组件opkg install kmod-fs-vfat #挂载FATopkg install ntfs-3g #挂载NTFSopkg install mount-utils #挂载卸载工具opkg install block-mountopkg install luci-app-samba #SAMBA网络共享服务/etc/init.d/samba enable #启用并开始SAMBA共享/etc/init.d/samba restart 不废话 按照这个弄 OK后 访问http://jingyan.baidu.com/article/624e7459acd0ee34e9ba5a4a.html 按照这个来 也OKFinder 中 command +K 输入smb://192.168.1.1 OK","categories":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}],"tags":[],"keywords":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}]},{"title":"Openwrt 刷机","slug":"资源/openwrt/OpenWrt刷机","date":"2018-01-25T08:49:37.286Z","updated":"2018-11-21T09:28:06.657Z","comments":true,"path":"2018/01/25/资源/openwrt/OpenWrt刷机/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/资源/openwrt/OpenWrt刷机/","excerpt":"","text":"刷机晚上回去试试https://post.smzdm.com/p/98238/ 配置1 设置密码 开启ssh之后就可以通过ssh连接路由器1ssh root@192.168.1.1 -p 22 如果还是无法ssh连接参考配置防火墙设置 2 设置语言1.语言设置的位置在：System -&gt; System -&gt; System Properties -&gt; Language and Style &gt; Language通过下拉菜单选择。 2.刚刷完固件只有英语可以选。3.System -&gt; Software -&gt; opkg update4.下载中文语言包的方法：System -&gt; Software –&gt; Software -&gt; Actions，在Download and install package右边的文本框里输入：luci-i18n-chinese，点击OK，系统即会自动下载并安装。5.安装完后到语言设置的位置选择chinese，然后刷新页面即可。 如果以上 方法 不成功 可以使用命令 12opkg updateopkg install luci-i18n-base-zh-cn 安装完成 到语言设置的位置选择chinese，然后刷新页面即可。 3 开启使用 SFTP 客户端上传功能1234root@OpenWrt:~# opkg updateroot@OpenWrt:~# opkg install vsftpd openssh-sftp-serverroot@OpenWrt:~# /etc/init.d/vsftpd enableroot@OpenWrt:~# /etc/init.d/vsftpd start FileZilla 上传文件连接 上传文件 4 翻墙配置参考大神配置1 opkg opkg install12opkg updateopkg opkg install ip ipset iptables-mod-tproxy libev libpthread libpcre 2 下载需要的包接下来下载软件，注意需要根据自己的CPU型号来进行选择。下载地址： http://openwrt-dist.sourceforge.net/packages/OpenWrt/ 12345678910libcares_x.xx-x_xxxx.ipklibmbedtls_x.x.x-x_xxxx.ipklibsodium_x.x.xx-x_xxxx.ipkshadowsocks-libev_x.x.x-x_xxxx.ipkdns-forwarder_x.x.x-x_xxxx.ipkChinaDNS_x.x.x-x_xxxx.ipkluci-app-shadowsocks_x.x.x-x_all.ipkluci-app-chinadns_x.x.x-x_all.ipkluci-app-dns-forwarder_x.x.x-x_all.ipk 使用 FTP上传文件将下载的包通过WinSCP之类的工具上传至路由器的/tmp目录。安装shadowsocks, ChinaDNS以及dns-forwarder： 12345cd /tmpopkg install libsodium*.ipk libmbedtls*.ipk libcares*.ipkopkg install shadowsocks-libev*.ipk luci-app-shadowsocks*.ipkopkg install ChinaDNS*.ipk luci-app-chinadns*.ipkopkg install dns-forwarder*.ipk luci-app-dns-forwarder*.ipk shadowsocks 配置需要截图太多了 参考大神的","categories":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}],"tags":[],"keywords":[{"name":"资源","slug":"资源","permalink":"http://www.kylinhuang.cn/categories/资源/"}]},{"title":"ionic 项目未完成","slug":"前端/ionic/项目未完成","date":"2018-01-25T08:49:37.267Z","updated":"2018-01-25T08:49:37.267Z","comments":true,"path":"2018/01/25/前端/ionic/项目未完成/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/项目未完成/","excerpt":"","text":"1 motion 删除接口2小视频播放页面","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"JS常用技巧","slug":"前端/js/js常用技巧","date":"2018-01-25T08:49:37.267Z","updated":"2018-01-25T08:49:37.267Z","comments":true,"path":"2018/01/25/前端/js/js常用技巧/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/js/js常用技巧/","excerpt":"","text":"1 数组中添加数组 使用 concat(Array) 方法 非pushconcat(Array) 方法123456var arrA=[1,2,3];var arrB=[4,5,6];var a = arrA.concat(arrB);console.log(a);// [1, 2, 3 ,4 ,5,6] push123456var arrA=[1,2,3];var arrB=[4,5,6];var a = arrA.push(arrB);console.log(a);// [1, 2, 3 ,&#123;[4,5,6]&#125;] 2","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"js","slug":"js","permalink":"http://www.kylinhuang.cn/tags/js/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"ionic 调试","slug":"前端/ionic/ionic调试","date":"2018-01-25T08:49:37.266Z","updated":"2018-01-25T08:49:37.266Z","comments":true,"path":"2018/01/25/前端/ionic/ionic调试/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/ionic调试/","excerpt":"","text":"1 页面调试1open -n /Applications/Google\\ Chrome.app/ --args --disable-web-security --user-data-dir=/Users/kylinhuang/MyChromeDevUserData/ 2 设备调试修改 devtool 查看 源码node_modules @ionic/app-scripts/config/webpack.config.js 12修改 devtool 查看 源码devtool: eval-source-map, 浏览器 查看 chrome://inspect/#devices 错误在node_modules/@ionic/app-script/config/webpack.config.js12345678910111213141516171819202122232425 module: &#123; loaders: [ &#123; test: /\\.json$/, loader: 'json-loader' &#125;, &#123; test: /\\.ts$/, loader: process.env.IONIC_WEBPACK_LOADER &#125;, &#123; test: /\\.js$/, loader: process.env.IONIC_WEBPACK_TRANSPILE_LOADER &#125;, &#123; test: /\\.jsx?$/, exclude: /(node_modules|bower_components)/, loader: 'babel-loader', // 'babel-loader' is also a legal name to reference query: &#123; plugins: [\"transform-runtime\", \"babel-plugin-transform-regenerator\"], presets: ['es2015','stage-3'] &#125; &#125; ]&#125;, 添加 以下代码 123456789&#123; test: /\\.jsx?$/, exclude: /(node_modules|bower_components)/, loader: 'babel-loader', // 'babel-loader' is also a legal name to reference query: &#123; plugins: [\"transform-runtime\", \"babel-plugin-transform-regenerator\"], presets: ['es2015','stage-3'] &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"ionic移动端web的性能优化开源组件","slug":"前端/ionic/ionic移动端web的性能优化开源组件","date":"2018-01-25T08:49:37.265Z","updated":"2018-01-25T08:49:37.266Z","comments":true,"path":"2018/01/25/前端/ionic/ionic移动端web的性能优化开源组件/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/ionic移动端web的性能优化开源组件/","excerpt":"","text":"1、四种方式优化ionic,接近原生体验 http://scottbolinger.com/4-ways-to-make-your-ionic-app-feel-native/ 2、ionic的问题事件收集http://emersonthompson.com.br/ionic-collection/ 3、ionic创建动画http://blog.ionic.io/animating-elements-in-your-ionic-app/ 4、好用的move.js,基于css3http://devdactic.com/ionic-with-movejs/http://visionmedia.github.io/move.js/ 5、移动端日期http://rajeshwarpatlolla.github.io/DatePickerForIonicFramework/demo/#/tab/home 6、angularjs的缓存https://github.com/jmdobry/angular-cache 7、特效移除cardshttp://codepen.io/ionic/pen/nxEdH 8、Trigger Pull To Refresh In Ionic Framework Appshttps://calendee.com/2015/04/25/trigger-pull-to-refresh-in-ionic-framework-apps/ 9、ionic-socketio-chathttp://melvin0008.github.io/blog/ionic-socketio-chat/ 10、饿了么开源的服务器中间件restchttps://www.oschina.net/p/restc 11、yii2结合angularjs使用http://blog.neattutorials.com/angularjs-yii2-part-1-routing/ 12、关于github上readme.html的文件编辑http://www.qdfuns.com/notes/21014/2ff9fbda55e88aa7896ce72837852adb.html 13、一些移动端的日期组件http://market.ionic.io/plugins/onezone-datepicker 14、浮动按钮的多功能http://market.ionic.io/plugins/ion-floating-menu 15、图片预览器http://market.ionic.io/plugins/ionic-photo-browser 16、一个超级好用的super-popuphttp://market.ionic.io/plugins/ionic-super-popup 17、超级按钮http://market.ionic.io/plugins/material-action-button#description 18、实用的时间轴https://github.com/comapedrosa/ionic-timeline 19、angularjs非常详细的教程https://www.zouyesheng.com/angular.html 20、angularjs的教程http://each.sinaapp.com/angular/https://github.com/dolymood/AngularLearning 21、25个可遇不可求的jquey插件http://lib.csdn.net/article/jquery/8042 22、超级好用图片轮播http://owlgraphic.com/owlcarousel/demos/custom.html 23、50个丰富的插件http://lib.csdn.net/article/jquery/8038 24、15款最好的 jQuery 网格布局插件http://lib.csdn.net/article/jquery/8394 http://blog.csdn.net/mygrilzhuyulin/article/details/52687738 https://github.com/dicallc/ionic3_angular4_JD 仿钉钉左右滑动日历http://www.jianshu.com/p/9e0c5c457f43","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"ionic移动端 监听事件","slug":"前端/ionic/ionic监听事件","date":"2018-01-25T08:49:37.265Z","updated":"2018-01-25T08:49:37.265Z","comments":true,"path":"2018/01/25/前端/ionic/ionic监听事件/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/ionic监听事件/","excerpt":"","text":"1 物理返回按钮 back12345678910111213141516171819202122232425 ionViewDidLoad() &#123; this.registerBackButtonAction();&#125;ionViewDidLeave()&#123; Log.d(\"AddBulbPage --&gt; \",'ionViewDidLeave'); this.unRegisterBackButtonAction();&#125;//物理返回按钮 android backprivate registerBackButtonAction()&#123; if(!this.unRegisterFun)&#123; this.unRegisterFun = this.platform.registerBackButtonAction(() =&gt; &#123; this.onBack(); &#125;,101); &#125;&#125;private unRegisterBackButtonAction()&#123; if(this.unRegisterFun)&#123; this.unRegisterFun(); this.unRegisterFun = null; &#125;&#125; #","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"ionic 文件上传下载 cordova-plugin-file-transfer","slug":"前端/ionic/ionic文件上传下载","date":"2018-01-25T08:49:37.264Z","updated":"2018-01-25T08:49:37.265Z","comments":true,"path":"2018/01/25/前端/ionic/ionic文件上传下载/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/ionic文件上传下载/","excerpt":"","text":"文件上传下载 cordova-plugin-file-transfer下载地址git 下载1234567download( source: string, target: string, successCallback: (fileEntry: FileEntry) =&gt; void, errorCallback: (error: FileTransferError) =&gt; void, trustAllHosts?: boolean, options?: FileDownloadOptions): void; demo 12345678910111213141516var source = encodeURI(motion.videoUrl);var target = \"/storage/emulated/0//DCIM/camera/ED73463F498CF11D9F3834E18DAA1E10_motion_1507718040820.jpg\" ;var fileTransfer = new FileTransfer();fileTransfer.download(source,target, function(entry) &#123; console.log(\"download complete: \" + entry.toURL()); &#125;, function(error) &#123; console.log(\"download error source \" + error.source); console.log(\"download error target \" + error.target); console.log(\"download error code\" + error.code); &#125;, false ,null); 参数 类型 说明 source String 下载地址 url target String 文件下载目标地址 successCallback Function 文件下载成功 Callback errorCallback Function 文件下载失败 Callback trustAllHosts boolean defaults to false. If set to true, it accepts all security certificates. Not recommended for production use. Supported on iOS. options boolean currently only supports headers (such as Authorization (Basic Authentication), etc) 上传","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"ionic 下拉刷新","slug":"前端/ionic/ionic下拉刷新","date":"2018-01-25T08:49:37.264Z","updated":"2018-01-25T08:49:37.264Z","comments":true,"path":"2018/01/25/前端/ionic/ionic下拉刷新/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/ionic下拉刷新/","excerpt":"","text":"下拉刷新 ion-refresherdoc 控件12345 &lt;ion-refresher (ionRefresh)=\"doRefresh($event)\"&gt; &lt;ion-refresher-content pullingIcon=\"arrow-dropdown\" pullingText=\"Pull to refresh\" refreshingSpinner=\"circles\" refreshingText=\"Refreshing...\"&gt; &lt;/ion-refresher-content&gt;&lt;/ion-refresher&gt; 属性 类型 详情 on-refresh(可选) 表达式 当用户下拉到一定程度然后开始刷新时触发 on-pulling(可选) 表达式 当用户开始下来刷新时触发 pullingIcon(可选) 字符串 当用户下拉时显示的图标。默认: ‘ion-arrow-down-c’ pullingText(可选) 字符串 当用户下拉时显示的文字 refreshingSpinner(可选) 字符串 动画SVG微调显示刷新开始时 refreshingText(可选) 字符串 用户刷新后显示的文字 下拉刷新 执行 doRefresh 加载数据保存motionList 页面显示 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667 // 下拉刷新async doRefresh(refresher)&#123; this.CURRENT_PAGENO = 1 ; console.log(\"doRefresh\"); /* http请求 */ let timer:any; try &#123; let result = await this.SNAP_GET_SECURITY_LOG_BY_CONDITION(false); if(result)&#123; clearTimeout(timer); refresher.complete(); // this.ionViewWillEnter(); &#125;else &#123; timer = setTimeout(()=&gt;&#123; clearTimeout(timer); refresher.complete(); &#125;,4000) &#125; &#125; catch (e) &#123; clearTimeout(timer); refresher.complete(); &#125;&#125; // 获取数据async SNAP_GET_SECURITY_LOG_BY_CONDITION(isLoadMore)&#123; Log.e(this.TAG,\"SNAP_GET_SECURITY_LOG_BY_CONDITION\"); console.log(\"SNAP_GET_SECURITY_LOG_BY_CONDITION\"); let result = await this.deviceInfo.doAction(&#123; name: DeviceActionName.SNAP_GET_SECURITY_LOG_BY_CONDITION, params: &#123; currentPageNo : this.CURRENT_PAGENO, pageSize : this.PAGE_SIZE, date : this.selectSecurityDate, lastStartTime : '', condition: [] &#125; &#125;); console.log(result); if(result.messageCode != \"undefined\" || result.messageCode != null &amp;&amp; result.messageCode == \"200\")&#123; console.log(result.list.length); if ( result.list.length &gt; 0 )&#123; if (isLoadMore)&#123; Log.d(\"SnapActivityPage\",\"isLoadMore push\"); this.motionList = this.motionList.concat(result.list) ; Log.d(\"SnapActivityPage\",\"isLoadMore push\" + this.motionList.length + \" result.list \" +result.list.length ); &#125;else &#123; this.motionList = result.list ; &#125; &#125; return true ; &#125; return false ;&#125; 12345678 &lt;section *ngIf=\"motionList.length!=0\"&gt; &lt;div *ngFor=\"let item of motionList\"&gt; &lt;div class=\"space_none\"&gt;&lt;/div&gt; &lt;app-motion [motion]=\"item\" [page] = \"page\"&gt;&lt;/app-motion&gt; &lt;/div&gt; &lt;div class=\"space_none\"&gt;&lt;/div&gt; &lt;/section&gt; 自动 拉下刷新 Refresher._beginRefresh() 1 声明控件1@ViewChild(Refresher) refresher: Refresher; 2 自动显示刷新1this.refresher._beginRefresh();","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"ionic 开发中遇到的问题","slug":"前端/ionic/ionic开发遇到问题","date":"2018-01-25T08:49:37.264Z","updated":"2018-01-25T08:49:37.264Z","comments":true,"path":"2018/01/25/前端/ionic/ionic开发遇到问题/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/ionic开发遇到问题/","excerpt":"","text":"1 list列表中删除某条 var index = this.motionList.indexOf(motion); if (index &gt; 0 ) this.motionList.splice(index, 1); // delete this.motionList[index]; 数据删除 UI没有删除","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"Ionic常用组件","slug":"前端/ionic/ionic常用组件","date":"2018-01-25T08:49:37.264Z","updated":"2018-01-25T08:49:37.264Z","comments":true,"path":"2018/01/25/前端/ionic/ionic常用组件/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/ionic常用组件/","excerpt":"","text":"DatePipe 1234567891011121314151617181 引入控件import &#123; DatePipe &#125; from '@angular/common';constructor(private datePipe: DatePipe) &#123; &#125;如果出现 不支持 问题添加@Component(&#123; providers: [DatePipe], selector: 'app-motion', templateUrl: 'motion.component.html'&#125;)2 使用 startTime = this.datePipe.transform(new Date(\"2017-01-4 15:30:10\"), 'hh:mm:ss a');结果 03:30:10 PM","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"ionic 上拉加载更多","slug":"前端/ionic/ionic上拉加载更多","date":"2018-01-25T08:49:37.263Z","updated":"2018-01-25T08:49:37.263Z","comments":true,"path":"2018/01/25/前端/ionic/ionic上拉加载更多/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/ionic上拉加载更多/","excerpt":"","text":"上拉加载更多 ion-infinite-scrolldoc参考 控件1234&lt;!--上拉更多 ng-if=\"moreDataCanBeLoaded()\"--&gt;&lt;ion-infinite-scroll (ionInfinite)=\"doInfinite($event)\" distance=\"1%\" &gt; &lt;ion-infinite-scroll-content&gt;&lt;/ion-infinite-scroll-content&gt;&lt;/ion-infinite-scroll&gt; 1234567891011121314151617181920212223242526272829303132333435 //上拉 加载更多 async doInfinite(infiniteScroll) &#123; if (this.isLock) return ; this.isLock = true; console.log('Begin async operation'); this.CURRENT_PAGENO = this.CURRENT_PAGENO + 1 ; /* http请求 */ let timer:any; try &#123; let result = await this.SNAP_GET_SECURITY_LOG_BY_CONDITION(true); if(result)&#123; clearTimeout(timer); infiniteScroll.complete(); // this.ionViewWillEnter(); &#125;else &#123; timer = setTimeout(()=&gt;&#123; clearTimeout(timer); infiniteScroll.complete(); &#125;,4000) &#125; this.isLock = false; &#125; catch (e) &#123; clearTimeout(timer); infiniteScroll.complete(); this.isLock = false; &#125; &#125; islock：锁，防止在网络慢的时候多次请求。","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"ionic 环境安装","slug":"前端/ionic/ionic_install","date":"2018-01-25T08:49:37.263Z","updated":"2018-01-25T08:49:37.263Z","comments":true,"path":"2018/01/25/前端/ionic/ionic_install/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/ionic_install/","excerpt":"","text":"Cordova 主页 1 Cordova 安装install npm 、node.js12install npm 、node.jsinstall Cordova CLI install Cordova CLI1npm install -g cordova ionic 2 cordova 创建项目1 创建项目 - ionic start 【项目名】1ionic start myproject 指定创建 ionic2 版本1ionic start awesome-app --v2 指定创建 ionic2 版本 设置 Typescript1ionic start awesome-app --v2 --typescript 3 添加平台 - ionic platform add 【平台】12cd myprojectionic platform add ios 4 编译 运行12345ionic build ios(编译)ionic emulate ios(模拟器上运行)ionic run ios #ionic 2ionic cordova run ios #ionic 3ionic serve (页面调试) 6 常用命令1 初始化 安装npm install 2 安装plugman 插件管理npm install -g plugman 3 添加插件cordova plugin add ../Plugins/cordova-cookie-master-master/ 4 删除插件ionic plugin rm com.sengled.slliveplayer 5 查看插件cordova pluginionic cordova plugin ls","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"Ionic页面的生命周期","slug":"前端/ionic/Ionic页面的生命周期","date":"2018-01-25T08:49:37.262Z","updated":"2018-01-25T08:49:37.263Z","comments":true,"path":"2018/01/25/前端/ionic/Ionic页面的生命周期/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/ionic/Ionic页面的生命周期/","excerpt":"","text":"Ionic页面的生命周期官方文档 如官网文档所示，常用的生命周期有如下6个： Event Desc ionViewDidLoad 当页面加载的时候触发，仅在页面创建的时候触发一次，如果被缓存了，那么下次再打开这个页面则不会触发 ionViewWillEnter 当将要进入页面时触发 ionViewDidEnter 当进入页面时触发 ionViewWillLeave 当将要从页面离开时触发 ionViewDidLeave 离开页面时触发 ionViewWillUnload 当页面将要销毁同时页面上元素移除时触发 demo1234567891011121314151617181920212223242526ionViewDidLoad()&#123; console.log(\"1.0 ionViewDidLoad 当页面加载的时候触发，仅在页面创建的时候触发一次，如果被缓存了，那么下次再打开这个页面则不会触发\"); &#125; ionViewWillEnter()&#123; console.log(\"2.0 ionViewWillEnter 顾名思义，当将要进入页面时触发\"); &#125; ionViewDidEnter()&#123; console.log(\"3.0 ionViewDidEnter 当进入页面时触发\"); &#125; ionViewWillLeave()&#123; console.log(\"4.0 ionViewWillLeave 当将要从页面离开时触发\"); &#125; ionViewDidLeave()&#123; console.log(\"5.0 ionViewDidLeave 离开页面时触发\"); &#125; ionViewWillUnload()&#123; console.log(\"6.0 ionViewWillUnload 当页面将要销毁同时页面上元素移除时触发\"); &#125; ionViewCanEnter()&#123; console.log(\"ionViewCanEnter\"); &#125; ionViewCanLeave()&#123; console.log(\"ionViewCanLeave\"); &#125; 运行结果12345678910111213141516ionViewCanEnter1.0 ionViewDidLoad 当页面加载的时候触发，仅在页面创建的时候触发一次，如果被缓存了，那么下次再打开这个页面则不会触发2.0 ionViewWillEnter 顾名思义，当将要进入页面时触发ionViewCanLeave3.0 ionViewDidEnter 当进入页面时触发 4.0 ionViewWillLeave 当将要从页面离开时触发 5.0 ionViewDidLeave 离开页面时触发6.0 ionViewWillUnload 当页面将要销毁同时页面上元素移除时触发","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"ionic","slug":"ionic","permalink":"http://www.kylinhuang.cn/tags/ionic/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"android demo wifi","slug":"android/demo/androidDemo_wifi","date":"2018-01-25T08:49:37.261Z","updated":"2018-11-21T02:11:37.798Z","comments":true,"path":"2018/01/25/android/demo/androidDemo_wifi/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/android/demo/androidDemo_wifi/","excerpt":"","text":"android wifi 自动连接连接方式 无密码连接 mWifiManager.disconnect(); 其他网络 enableNetwork 创建网络 mWifiManager 中添加网络 1234567891011121314151617181920212223public boolean connectSpecificAP(ScanResult scan) &#123; List&lt;WifiConfiguration&gt; list = mWifiManager.getConfiguredNetworks(); boolean networkInSupplicant = false; boolean connectResult = false; // 重新连接指定AP mWifiManager.disconnect(); for (WifiConfiguration w : list) &#123; // 将指定AP 名字转化 // String str = convertToQuotedString(info.ssid); if (w.BSSID != null &amp;&amp; w.BSSID.equals(scan.BSSID)) &#123; connectResult = mWifiManager.enableNetwork(w.networkId, true); // mWifiManager.saveConfiguration(); networkInSupplicant = true; break; &#125; &#125; if (!networkInSupplicant) &#123; WifiConfiguration config = CreateWifiInfo(scan, &quot;&quot;); connectResult = addNetwork(config); &#125; return connectResult; &#125; 创建网络 123456789101112131415161718192021222324252627282930313233343536373839404142// 然后是一个实际应用方法，只验证过没有密码的情况： public WifiConfiguration CreateWifiInfo(ScanResult scan, String Password) &#123; WifiConfiguration config = new WifiConfiguration(); config.hiddenSSID = false; config.status = WifiConfiguration.Status.ENABLED; if (scan.capabilities.contains(&quot;WEP&quot;)) &#123; config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE); config.allowedAuthAlgorithms .set(WifiConfiguration.AuthAlgorithm.OPEN); config.allowedGroupCiphers .set(WifiConfiguration.GroupCipher.WEP104); config.SSID = &quot;\\&quot;&quot; + scan.SSID + &quot;\\&quot;&quot;; config.wepTxKeyIndex = 0; config.wepKeys[0] = Password; // config.preSharedKey = &quot;\\&quot;&quot; + SHARED_KEY + &quot;\\&quot;&quot;; &#125; else if (scan.capabilities.contains(&quot;PSK&quot;)) &#123; // config.SSID = &quot;\\&quot;&quot; + scan.SSID + &quot;\\&quot;&quot;; config.preSharedKey = &quot;\\&quot;&quot; + Password + &quot;\\&quot;&quot;; &#125; else if (scan.capabilities.contains(&quot;EAP&quot;)) &#123; config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP); config.allowedAuthAlgorithms .set(WifiConfiguration.AuthAlgorithm.OPEN); config.allowedPairwiseCiphers .set(WifiConfiguration.PairwiseCipher.TKIP); config.allowedProtocols.set(WifiConfiguration.Protocol.WPA); config.SSID = &quot;\\&quot;&quot; + scan.SSID + &quot;\\&quot;&quot;; config.preSharedKey = &quot;\\&quot;&quot; + Password + &quot;\\&quot;&quot;; &#125; else &#123; config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE); config.SSID = &quot;\\&quot;&quot; + scan.SSID + &quot;\\&quot;&quot;; // config.BSSID = info.mac; config.preSharedKey = null; // &#125; return config; &#125; 添加到网络 1234567891011121314151617181920/** * 添加到网络 * * @author Xiho * @param wcg */ public boolean addNetwork(WifiConfiguration wcg) &#123; if (wcg == null) &#123; return false; &#125; // receiverDhcp = new ReceiverDhcp(ctx, mWifiManager, this, // wlanHandler); // ctx.registerReceiver(receiverDhcp, new // IntentFilter(WifiManager.NETWORK_STATE_CHANGED_ACTION)); int wcgID = mWifiManager.addNetwork(wcg); boolean b = mWifiManager.enableNetwork(wcgID, true); mWifiManager.saveConfiguration(); System.out.println(b); return b; &#125; 有密码连接 在wifi列表中获取 加密方式scanResult.capabilities 创建 WifiConfiguration 添加到 WifiManager WifiManager断开连接WifiManager.disconnect() WifiManager 其他的连接断开WifiManager.enableNetwork(netID, true) WifiManager 重新连接WifiManager.reconnect() code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * 给外部提供一个借口，连接无线网络 * * @param SSID * @param Password * @param Type * @return &lt;br&gt; * @return true:连接成功；false:连接失败&lt;br&gt; * */ public boolean connect(String SSID, String Password, WifiConnectUtils.WifiCipherType Type) &#123; if (!this.openWifi()) &#123; return false; &#125; // 状态变成WIFI_STATE_ENABLED的时候才能执行下面的语句 while (mWifiManager.getWifiState() == WifiManager.WIFI_STATE_ENABLING) &#123; try &#123; // 为了避免程序一直while循环，让它睡个100毫秒在检测…… Thread.currentThread(); Thread.sleep(100); &#125; catch (InterruptedException ie) &#123; &#125; &#125; if (SSID == null || Password == null || SSID.equals(&quot;&quot;)) &#123; Log.e(this.getClass().getName(), &quot;addNetwork() ## nullpointer error!&quot;); return false; &#125; WifiConfiguration wifiConfig = createWifiInfo(SSID, Password, Type); // wifi的配置信息 if (wifiConfig == null) &#123; return false; &#125; // 查看以前是否也配置过这个网络 WifiConfiguration tempConfig = this.isExsits(SSID); if (tempConfig != null) &#123; mWifiManager.removeNetwork(tempConfig.networkId); &#125; // 添加一个新的网络描述为一组配置的网络。 int netID = mWifiManager.addNetwork(wifiConfig); Log.d(&quot;WifiListActivity&quot;, &quot;wifi的netID为：&quot; + netID); // 断开连接 mWifiManager.disconnect(); // 重新连接 Log.d(&quot;WifiListActivity&quot;, &quot;Wifi的重新连接netID为：&quot; + netID); // 设置为true,使其他的连接断开 boolean mConnectConfig = mWifiManager.enableNetwork(netID, true); mWifiManager.reconnect(); return mConnectConfig; &#125; 网上大多数demo 都是这样子的 兼容性问题 系统 手机型号 无密码连接 密码连接 4.4.2 华为p6-06 YES YES 4.4.4 酷派 YES YES 5.1.0 moto XT YES YES 7.1.1 android 原生系统 Moto G Play NO (wifi 会断开 后重新连接 之前的wifi 并非指定的) NO (wifi 会断开 后重新连接 之前的wifi 并非指定的) 8.0.0 华为mate 9 NO (wifi 会断开 后重新连接 之前的wifi 并非指定的) NO (wifi 会断开 后重新连接 之前的wifi 并非指定的) 原因分析android 4.4.4android 源码http://androidxref.com/4.4.4_r1/xref/packages/apps/Settings/src/com/android/settings/wifi/WifiSettings.java 575行 onContextItemSelected(MenuItem item) 该方法中 12345678910111213141516171819202122232425262728293031574 @Override575 public boolean onContextItemSelected(MenuItem item) &#123;576 if (mSelectedAccessPoint == null) &#123;577 return super.onContextItemSelected(item);578 &#125;579 switch (item.getItemId()) &#123;580 case MENU_ID_CONNECT: &#123;581 if (mSelectedAccessPoint.networkId != INVALID_NETWORK_ID) &#123;582 mWifiManager.connect(mSelectedAccessPoint.networkId,583 mConnectListener);584 &#125; else if (mSelectedAccessPoint.security == AccessPoint.SECURITY_NONE) &#123;585 /** Bypass dialog for unsecured networks */586 mSelectedAccessPoint.generateOpenNetworkConfig();587 mWifiManager.connect(mSelectedAccessPoint.getConfig(),588 mConnectListener);589 &#125; else &#123;590 showDialog(mSelectedAccessPoint, true);591 &#125;592 return true;593 &#125;594 case MENU_ID_FORGET: &#123;595 mWifiManager.forget(mSelectedAccessPoint.networkId, mForgetListener);596 return true;597 &#125;598 case MENU_ID_MODIFY: &#123;599 showDialog(mSelectedAccessPoint, true);600 return true;601 &#125;602 &#125;603 return super.onContextItemSelected(item);604 &#125; 580 点击链接无密码 123586 mSelectedAccessPoint.generateOpenNetworkConfig();587 mWifiManager.connect(mSelectedAccessPoint.getConfig(),588 mConnectListener); 具体分析mSelectedAccessPoint.generateOpenNetworkConfig(); 123456789390 protected void generateOpenNetworkConfig() &#123;391 if (security != SECURITY_NONE)392 throw new IllegalStateException();393 if (mConfig != null)394 return;395 mConfig = new WifiConfiguration();396 mConfig.SSID = AccessPoint.convertToQuotedString(ssid);397 mConfig.allowedKeyManagement.set(KeyMgmt.NONE);398 &#125; mSelectedAccessPoint.getConfig() 123312 WifiConfiguration getConfig() &#123;313 return mConfig;314 &#125; mSelectedAccessPoint 的值1234567891011121314151617181920553 @Override554 public void onCreateContextMenu(ContextMenu menu, View view, ContextMenuInfo info) &#123;555 if (info instanceof AdapterContextMenuInfo) &#123;556 Preference preference = (Preference) getListView().getItemAtPosition(557 ((AdapterContextMenuInfo) info).position);558559 if (preference instanceof AccessPoint) &#123;560 mSelectedAccessPoint = (AccessPoint) preference;561 menu.setHeaderTitle(mSelectedAccessPoint.ssid);562 if (mSelectedAccessPoint.getLevel() != -1563 &amp;&amp; mSelectedAccessPoint.getState() == null) &#123;564 menu.add(Menu.NONE, MENU_ID_CONNECT, 0, R.string.wifi_menu_connect);565 &#125;566 if (mSelectedAccessPoint.networkId != INVALID_NETWORK_ID) &#123;567 menu.add(Menu.NONE, MENU_ID_FORGET, 0, R.string.wifi_menu_forget);568 menu.add(Menu.NONE, MENU_ID_MODIFY, 0, R.string.wifi_menu_modify);569 &#125;570 &#125;571 &#125;572 &#125; mWifiManager.connect(mSelectedAccessPoint.getConfig(),mConnectListener);分析WifiManager 123456781586 public void connect(WifiConfiguration config, ActionListener listener) &#123;1587 if (config == null) throw new IllegalArgumentException(&quot;config cannot be null&quot;);1588 validateChannel();1589 // Use INVALID_NETWORK_ID for arg1 when passing a config object1590 // arg1 is used to pass network id when the network already exists1591 sAsyncChannel.sendMessage(CONNECT_NETWORK, WifiConfiguration.INVALID_NETWORK_ID,1592 putListener(listener), config);1593 &#125; 7.1.1123456789101112131415161718192021222324252627282930313233477 @Override478 public boolean onContextItemSelected(MenuItem item) &#123;479 if (mSelectedAccessPoint == null) &#123;480 return super.onContextItemSelected(item);481 &#125;482 switch (item.getItemId()) &#123;483 case MENU_ID_CONNECT: &#123;484 if (mSelectedAccessPoint.isSaved()) &#123;485 connect(mSelectedAccessPoint.getConfig());486 &#125; else if (mSelectedAccessPoint.getSecurity() == AccessPoint.SECURITY_NONE) &#123;487 /** Bypass dialog for unsecured networks */488 mSelectedAccessPoint.generateOpenNetworkConfig();489 connect(mSelectedAccessPoint.getConfig());490 &#125; else &#123;491 showDialog(mSelectedAccessPoint, WifiConfigUiBase.MODE_CONNECT);492 &#125;493 return true;494 &#125;495 case MENU_ID_FORGET: &#123;496 forget();497 return true;498 &#125;499 case MENU_ID_MODIFY: &#123;500 showDialog(mSelectedAccessPoint, WifiConfigUiBase.MODE_MODIFY);501 return true;502 &#125;503 case MENU_ID_WRITE_NFC:504 showDialog(WRITE_NFC_DIALOG_ID);505 return true;506507 &#125;508 return super.onContextItemSelected(item);509 &#125; 1234853 protected void connect(final WifiConfiguration config) &#123;854 MetricsLogger.action(getActivity(), MetricsEvent.ACTION_WIFI_CONNECT);855 mWifiManager.connect(config, mConnectListener);856 &#125; 相对 4.4.4 引入MetricsLogger.action(getActivity(), MetricsEvent.ACTION_WIFI_CONNECT); http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/java/com/android/internal/logging/MetricsLogger.java 12362 public static void action(Context context, int category) &#123;63 action(context, category, &quot;&quot;);64 &#125; 12345674 public static void action(Context context, int category, String pkg) &#123;75 if (Build.IS_DEBUGGABLE &amp;&amp; category == VIEW_UNKNOWN) &#123;76 throw new IllegalArgumentException(&quot;Must define metric category&quot;);77 &#125;78 EventLogTags.writeSysuiAction(category, pkg);79 &#125; 1EventLogTags.writeSysuiAction(category, pkg); 8.0.0 8.0.0_r4http://androidxref.com/8.0.0_r4/xref/packages/apps/Settings/src/com/android/settings/wifi/WifiSettings.java 12345678910111213141516171819202122232425262728293031323334509 @Override510 public boolean onContextItemSelected(MenuItem item) &#123;511 if (mSelectedAccessPoint == null) &#123;512 return super.onContextItemSelected(item);513 &#125;514 switch (item.getItemId()) &#123;515 case MENU_ID_CONNECT: &#123;516 boolean isSavedNetwork = mSelectedAccessPoint.isSaved();517 if (isSavedNetwork) &#123;518 connect(mSelectedAccessPoint.getConfig(), isSavedNetwork);519 &#125; else if (mSelectedAccessPoint.getSecurity() == AccessPoint.SECURITY_NONE) &#123;520 /** Bypass dialog for unsecured networks */521 mSelectedAccessPoint.generateOpenNetworkConfig();522 connect(mSelectedAccessPoint.getConfig(), isSavedNetwork);523 &#125; else &#123;524 showDialog(mSelectedAccessPoint, WifiConfigUiBase.MODE_CONNECT);525 &#125;526 return true;527 &#125;528 case MENU_ID_FORGET: &#123;529 forget();530 return true;531 &#125;532 case MENU_ID_MODIFY: &#123;533 showDialog(mSelectedAccessPoint, WifiConfigUiBase.MODE_MODIFY);534 return true;535 &#125;536 case MENU_ID_WRITE_NFC:537 showDialog(WRITE_NFC_DIALOG_ID);538 return true;539540 &#125;541 return super.onContextItemSelected(item);542 &#125; 1234561003 protected void connect(final WifiConfiguration config, boolean isSavedNetwork) &#123;1004 // Log subtype if configuration is a saved network.1005 mMetricsFeatureProvider.action(getActivity(), MetricsEvent.ACTION_WIFI_CONNECT,1006 isSavedNetwork);1007 mWifiManager.connect(config, mConnectListener);1008 &#125; android 8.0 这里 又做了修改 http://androidxref.com/8.0.0_r4/xref/packages/apps/Settings/src/com/android/settings/core/instrumentation/MetricsFeatureProvider.java1234563 public void action(Context context, int category, Pair&lt;Integer, Object&gt;... taggedData) &#123;64 for (LogWriter writer : mLoggerWriters) &#123;65 writer.action(context, category, taggedData);66 &#125;67 &#125; 12345678910111233 private List&lt;LogWriter&gt; mLoggerWriters;3435 public MetricsFeatureProvider() &#123;36 mLoggerWriters = new ArrayList&lt;&gt;();37 installLogWriters();38 &#125;3940 protected void installLogWriters() &#123;41 mLoggerWriters.add(new EventLogWriter());42 mLoggerWriters.add(new SettingSuggestionsLogWriter());43 &#125; 主要是 EventLogWriter SettingSuggestionsLogWriter http://androidxref.com/8.0.0_r4/xref/packages/apps/Settings/src/com/android/settings/core/instrumentation/EventLogWriter.java EventLogWriter 中 MetricsLogger 以上分析 只能指定 android 系统API 更改了 不能找到相应的 解决方法 换条路吧从代码上看 1wifiManager.addNetwork返回-1 应该是失败原因 纠结好几个小时 发现在设置中忘记配置 连接是成功的 原因分析android M 连接无 Internet 会提示 是否自动切换一旦自动切换 那就记录下来了 下次 自动连接 就连接不了 检测网络又问题 就自动切换了 解决版本自动连接前 删除配置信息应该在自动连接前 添加 忘记配置就可以了 系统 忘记配置 系统的方法 123456789101112131415161718/** * Delete the network in the supplicant config. * * This function is used instead of a sequence of removeNetwork() * and saveConfiguration(). * * @param config the set of variables that describe the configuration, * contained in a &#123;@link WifiConfiguration&#125; object. * @param listener for callbacks on success or failure. Can be null. * @throws IllegalStateException if the WifiManager instance needs to be * initialized again * @hide */public void forget(int netId, ActionListener listener) &#123; if (netId &lt; 0) throw new IllegalArgumentException(&quot;Network id cannot be negative&quot;); validateChannel(); sAsyncChannel.sendMessage(FORGET_NETWORK, netId, putListener(listener));&#125; hide 不能使用啊 反射吧 android 9.0 禁止了 放弃反射 好吧 放弃 removeNetwork() 试试 发现 不行啊 让系统 不检测 是否有可以用的 Internet https://blog.csdn.net/u010042260/article/details/52931489 frameworks/base/services/core/java/com/android/server/connectivity/NetworkMonitor.java修改：mIsCaptivePortalCheckEnabled = false；即可。 isCaptivePortal() 这个方法真的 在检测了 修改 mIsCaptivePortalCheckEnabled 没有方法 不能反射 通过命令 修改 不需要 root https://android.stackexchange.com/questions/100657/how-to-disable-captive-portal-detection-how-to-remove-exclamation-mark-on-wi-fi https://support.honeywellaidc.com/s/article/What-does-limited-or-no-Internet-Access-mean 修改了 但是 连接 无可用的 Internet还是提示了 但是 可以连接上了 https://android.stackexchange.com/questions/100657/how-to-disable-captive-portal-detection-how-to-remove-exclamation-mark-on-wi-fi settings put global captive_portal_detection_enabled 1刚刚开始 没用重启后 可以连接上了 不太确定 是不是 这个原因还是重启 系统导致的 恢复之前的值settings put global captive_portal_detection_enabled null之后 现在无法复现了问题 待更近","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"CSS 常用属性","slug":"前端/css/css常用属性","date":"2018-01-25T08:49:37.261Z","updated":"2018-01-25T08:49:37.262Z","comments":true,"path":"2018/01/25/前端/css/css常用属性/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/前端/css/css常用属性/","excerpt":"","text":"常用属性1 flex-direction 主轴方向1234567flex-direction: row; 默认值。水平显示flex-direction: row-reverse; 与 row 相同，但是以相反的顺序flex-direction: column; 垂直显示flex-direction: column-reverse; 与 column 相同，但是以相反的顺序flex-direction: initial; 设置该属性为它的默认值flex-direction: inherit; 从父元素继承该属性 2 justify-content 主轴对齐方式（水平轴）1234567justify-content: flex-start ; 默认值。项目位于容器的开头。 justify-content: flex-end ; 项目位于容器的结尾。 justify-content: center ; 项目位于容器的中心。 justify-content: space-between ; 项目位于各行之间留有空白的容器内。justify-content: space-around ; 项目位于各行之前、之间、之后都留有空白的容器内。 justify-content: initial ; 设置该属性为它的默认值。 justify-content: inherit ; 从父元素继承该属性。 3 align-content 侧轴对齐方式（水平轴）12345678align-content: stretch ; 默认值。项目被拉伸以适应容器。 align-content: center ; 项目位于容器的中心。 align-content: flex-start ; 项目位于容器的开头。 align-content: flex-end ; 项目位于容器的结尾。 align-content: space-between ; 项目位于各行之间留有空白的容器内。 align-content: space-around ; 项目位于各行之前、之间、之后都留有空白的容器内。 align-content: initial ; 设置该属性为它的默认值。请参阅 initial。 align-content: inherit ; 从父元素继承该属性。请参阅 inherit。 4 align-items 属性定义flex子项在flex容器的当前行的侧轴（纵轴）方向上的对齐方式。1234567align-items: stretch ; 默认值。项目被拉伸以适应容器。 align-items: center ; 项目位于容器的中心。 align-items: flex-start ; 项目位于容器的开头。 align-items: flex-end ; 项目位于容器的结尾。 align-items: baseline ; 项目位于容器的基线上。 align-items: initial ; 设置该属性为它的默认值。align-items: inherit ; 从父元素继承该属性。","categories":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://www.kylinhuang.cn/tags/CSS/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://www.kylinhuang.cn/categories/前端/"}]},{"title":"android umeng push 集成","slug":"android/Umeng_Push","date":"2018-01-25T08:49:37.260Z","updated":"2018-01-25T08:49:37.260Z","comments":true,"path":"2018/01/25/android/Umeng_Push/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/android/Umeng_Push/","excerpt":"","text":"1 Umeng 账号注册2 下载SDK Demo3 导入 PushSDK","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"umeng","slug":"umeng","permalink":"http://www.kylinhuang.cn/tags/umeng/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"android studio logcat 设置 缓存大小","slug":"android/android_studio_log","date":"2018-01-25T08:49:37.260Z","updated":"2018-01-25T08:49:37.260Z","comments":true,"path":"2018/01/25/android/android_studio_log/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/25/android/android_studio_log/","excerpt":"","text":"logcat 经常刷新过快，冲掉之前的数据，可以改下logcat的缓存（缓冲区）大小，可以显示更多行避免被冲掉：文件：安装根目录/bin/idea.properties 1idea.cycle.buffer.size=1024000","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"Hexo github 搭建 blog","slug":"工具/Hexo","date":"2018-01-05T11:13:24.000Z","updated":"2019-04-18T06:10:10.824Z","comments":true,"path":"2018/01/05/工具/Hexo/","link":"","permalink":"http://www.kylinhuang.cn/2018/01/05/工具/Hexo/","excerpt":"","text":"使用 Hexo githbub搭建 blog github配置1 注册githug 用户名 username2 创建仓库 仓库名 username.github.io注册名 和仓库名中 username 必须保持一致 本地环境搭建1 install git1brew install git // 安装Git 2 install nodejs3 install Hexo1sudo npm install hexo-cli -g 创建项目1 创建项目12hexo init &lt;folder&gt;hexo init kylinhuang.github.io 2 主题12cd kylinhuang.github.iogit clone https://github.com/iissnan/hexo-theme-next themes/next 修改 kylinhuang/_config.yml1234567title: dimsky 的 9 维空间 //你博客的名字 author: dimsky //你的名字 language: zh-Hans //语言 中文 theme: next //刚刚安装的主题名称 deploy: type: git //使用Git 发布 repo: https://github.com/username/username.github.io.git // 刚创建的Github仓库 3 写文章在在username.github.io/source/_posts 下创建 博客 编译1 测试1234hexo sorhexo clean &amp;&amp; hexo g &amp;&amp; hexo s 浏览器中输入https://localhost:4000 访问了 2 发布安装hexo-deployer-git自动部署发布工具1npm install hexo-deployer-git --save 测试没问题后，我们就生成静态网页文件发布至我们的Github pages 中。1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 第一次 需要输入github邮箱密码 5分钟后 应该能访问了http://kylinhuang.github.io 插件12345678npm install --save hexo-adminhexo server -dhexo s &amp; 后台运行http://localhost:4000/ - 预览页面http://localhost:4000/admin - 编辑页面 语法https://hexo.io/zh-cn/docs/front-matter.html hexo 添加 流程图hexo 添加 时序图 hexo-filter-sequence 插件: 1npm install --save hexo-filter-sequence 2.配置 站点配置文件 _config.yml 中增加如下配置:123456789sequence: webfont: https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js raphael: https://cdn.bootcss.com/raphael/2.2.7/raphael.min.js underscore: https://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js sequence: https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js css: # optional, the url for css, such as hand drawn theme options: theme: simple css_class: Hexo pluginshttps://hexo.io/plugins/ 1 HEXO-browsersync适用于Hexo的BrowserSync插件 123456789npm install hexo-browsersync --save_config.yml 中 browsersync: logLevel: &quot;warn&quot; ghostMode: scroll: true instanceName: &quot;uniqueString&quot; 2 Hexo博客文章影藏 hexo-generator-index2在Hexo插件库找到一个产生首页的插件，自带过滤功能，hexo-generator-index2。 安装12npm install hexo-generator-index2 --savenpm uninstall hexo-generator-index --save 修改hexo的配置文件 打开hexo博客根目录下的_config.yml添加以下内容，过滤分类或者标签为hide的文章 12345678# index2 generator是否包含官方的hexo-generator-index，默认true（包含）index2_include_index: trueindex2_generator:per_page: 8order_by: -date # 按发布时间排序exclude:- tag hide # 不包含标签为hide的文章- category hide # 不包含分类为hide的文章","categories":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}],"tags":[],"keywords":[{"name":"工具","slug":"工具","permalink":"http://www.kylinhuang.cn/categories/工具/"}]},{"title":"3.3 模板引擎","slug":"后端/3.3 模板引擎","date":"2017-12-21T06:48:14.710Z","updated":"2019-02-03T13:56:10.965Z","comments":true,"path":"2017/12/21/后端/3.3 模板引擎/","link":"","permalink":"http://www.kylinhuang.cn/2017/12/21/后端/3.3 模板引擎/","excerpt":"","text":"1 ejs模板安装 1npm i ejs --save index.js 12345678910111213const path = require('path')const express = require('express')const app = express()const indexRouter = require('./routes/index')const userRouter = require('./routes/users')app.set('views', path.join(__dirname, 'views'))// 设置存放模板文件的目录app.set('view engine', 'ejs')// 设置模板引擎为 ejsapp.use('/', indexRouter)app.use('/users', userRouter)app.listen(3000) index.js 12345678910111213const path = require('path')const express = require('express')const app = express()const indexRouter = require('./routes/index')const userRouter = require('./routes/users')app.set('views', path.join(__dirname, 'views'))// 设置存放模板文件的目录app.set('view engine', 'ejs')// 设置模板引擎为 ejsapp.use('/', indexRouter)app.use('/users', userRouter)app.listen(3000)","categories":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://www.kylinhuang.cn/tags/nodejs/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}]},{"title":"3.2 路由","slug":"后端/3.2 路由","date":"2017-12-21T02:18:00.973Z","updated":"2019-02-03T13:56:33.341Z","comments":true,"path":"2017/12/21/后端/3.2 路由/","link":"","permalink":"http://www.kylinhuang.cn/2017/12/21/后端/3.2 路由/","excerpt":"","text":"1 添加简单路由123456789101112const express = require('express')const app = express()app.get('/', function (req, res) &#123; res.send('hello, express')&#125;)app.get('/users/:name', function (req, res) &#123; res.send('hello, ' + req.params.name)&#125;)app.listen(3000) 以上代码的意思是：当访问根路径时，依然返回 hello, express，当访问如 localhost:3000/users/nswbmw 路径时，返回 hello, nswbmw。路径中 :name 起了占位符的作用，这个占位符的名字是 name，可以通过 req.params.name 取到实际的值。 req.query: 解析后的 url 中的 querystring，如 ?name=haha，req.query 的值为 {name: ‘haha’}req.params: 解析 url 中的占位符，如 /:name，访问 /haha，req.params 的值为 {name: ‘haha’}req.body: 解析后请求体，需使用相关的模块，如 body-parser，请求体为 {“name”: “haha”}，则 req.body 为 {name: ‘haha’} express.Routerindex.js 123456789const express = require('express')const app = express()const indexRouter = require('./routes/index')const userRouter = require('./routes/users')app.use('/', indexRouter)app.use('/users', userRouter)app.listen(3000) routes/index.js 12345678const express = require('express')const router = express.Router()router.get('/', function (req, res) &#123; res.send('hello, express')&#125;)module.exports = router routes/users.js 12345678const express = require('express')const router = express.Router()router.get('/', function (req, res) &#123; res.send('hello, express')&#125;)module.exports = router","categories":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://www.kylinhuang.cn/tags/nodejs/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}]},{"title":"3.1 exports 安装","slug":"后端/3.1 exports 安装","date":"2017-12-20T13:27:53.531Z","updated":"2017-12-21T02:17:08.728Z","comments":true,"path":"2017/12/20/后端/3.1 exports 安装/","link":"","permalink":"http://www.kylinhuang.cn/2017/12/20/后端/3.1 exports 安装/","excerpt":"","text":"1 Exports 安装1234mkdir blogcd blognpm initnpm i express@4.14.0 --save 新建 index.js12345678const express = require('express')const app = express()app.get('/', function (req, res) &#123; res.send('hello, express')&#125;)app.listen(3000) 运行12node index.js浏览器 访问 localhost:3000 supervisor在开发过程中，每次修改代码保存后，我们都需要手动重启程序，才能查看改动的效果。使用 supervisor 可以解决这个繁琐的问题，全局安装 supervisor：1npm i -g supervisor 运行 supervisor index 启动程序，如下所示：1supervisor index.js 效果非常好","categories":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://www.kylinhuang.cn/tags/nodejs/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}]},{"title":"snap 推送","slug":"Work/Snap推送","date":"2017-11-15T02:14:18.000Z","updated":"2019-04-18T06:05:07.010Z","comments":true,"path":"2017/11/15/Work/Snap推送/","link":"","permalink":"http://www.kylinhuang.cn/2017/11/15/Work/Snap推送/","excerpt":"Welcome to my blog, enter password to read.","text":"Welcome to my blog, enter password to read. Incorrect Password! No content to display! ","categories":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/categories/Work/"}],"tags":[{"name":"snap","slug":"snap","permalink":"http://www.kylinhuang.cn/tags/snap/"}],"keywords":[{"name":"Work","slug":"Work","permalink":"http://www.kylinhuang.cn/categories/Work/"}]},{"title":"android WebView","slug":"android/android WebView","date":"2017-11-06T02:36:45.000Z","updated":"2017-12-03T03:18:56.474Z","comments":true,"path":"2017/11/06/android/android WebView/","link":"","permalink":"http://www.kylinhuang.cn/2017/11/06/android/android WebView/","excerpt":"","text":"1 简介 WebView是一个基于webkit引擎、展现web页面的控件。Android的Webview在低版本和高版本采用了不同的webkit版本内核，4.4后直接使用了Chrome。 2 作用 显示和渲染Web页面 直接使用html文件（网络上或本地assets中）作布局 可和JavaScript交互调用 WebView控件功能强大，除了具有一般View的属性和设置外，还可以对url请求、页面加载、渲染、页面交互进行强大的处理。 3 使用介绍 Webview自身的常见方法； Webview的最常用的子类 （WebSettings类、WebViewClient类、WebChromeClient类) Android和Js的交互 3.1 Webview自身的常见方法 3.1.1 WebView的状态 1234567891011121314151617181920//激活WebView为活跃状态，能正常执行网页的响应webView.onResume() ；//当页面被失去焦点被切换到后台不可见状态，需要执行onPause//通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。webView.onPause()；//当应用程序(存在webview)被切换到后台时，这个方法不仅仅针对当前的webview而是全局的全应用程序的webview//它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。webView.pauseTimers()//恢复pauseTimers状态webView.resumeTimers()；//销毁Webview//在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview//但是注意：webview调用destory时,webview仍绑定在Activity上//这是由于自定义webview构建时传入了该Activity的context对象//因此需要先从父容器中移除webview,然后再销毁webview:rootLayout.removeView(webView); webView.destroy(); 3.1.2 关于前进 / 后退网页 12345678910111213//是否可以后退Webview.canGoBack() //后退网页Webview.goBack()//是否可以前进 Webview.canGoForward()//前进网页Webview.goForward()//以当前的index为起始点前进或者后退到历史记录中指定的steps//如果steps为负数则为后退，正数则为前进Webview.goBackOrForward(intsteps) 运用 activity back 12345678910111213141516171819@Overridepublic boolean onKeyDown(int keyCode, KeyEvent event) &#123; if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123; setWebViewGoBack(); return true; &#125; return false;&#125;/** * 设置webView 后退 */private void setWebViewGoBack() &#123; if (mWebview.canGoBack()) &#123; mWebview.goBack(); &#125; else &#123; finish(); &#125;&#125; 3.1.3 清除缓存数据 12345678910//清除网页访问留下的缓存//由于内核缓存是全局的因此这个方法不仅仅针对webview而是针对整个应用程序.Webview.clearCache(true);//清除当前webview访问的历史记录//只会webview访问历史记录里的所有记录除了当前访问记录Webview.clearHistory()；//这个api仅仅清除自动完成填充的表单数据，并不会清除WebView存储到本地的数据Webview.clearFormData()； 3.2 常用类 3.2.1 WebSettings类 配置步骤1：添加访问网络权限（AndroidManifest.xml）1&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt; 配置步骤2：生成一个WebView组件（有两种方式）12345//方式1：直接在在Activity中生成WebView webView = new WebView(this)//方法2：在Activity的layout文件里添加webview控件：WebView webview = (WebView) findViewById(R.id.webView1); 配置步骤3：进行配置-利用WebSettings子类（常见方法） 123456789101112131415161718192021222324//声明WebSettings子类WebSettings webSettings = webView.getSettings();//如果访问的页面中要与Javascript交互，则webview必须设置支持JavascriptwebSettings.setJavaScriptEnabled(true); //支持插件webSettings.setPluginsEnabled(true); //设置自适应屏幕，两者合用webSettings.setUseWideViewPort(true); //将图片调整到适合webview的大小 webSettings.setLoadWithOverviewMode(true); // 缩放至屏幕的大小//缩放操作webSettings.setSupportZoom(true); //支持缩放，默认为true。是下面那个的前提。webSettings.setBuiltInZoomControls(true); //设置内置的缩放控件。若为false，则该WebView不可缩放webSettings.setDisplayZoomControls(false); //隐藏原生的缩放控件//其他细节操作webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //关闭webview中缓存 webSettings.setAllowFileAccess(true); //设置可以访问文件 webSettings.setJavaScriptCanOpenWindowsAutomatically(true); //支持通过JS打开新窗口 webSettings.setLoadsImagesAutomatically(true); //支持自动加载图片webSettings.setDefaultTextEncodingName(\"utf-8\");//设置编码格式 常见用法：设置WebView缓存 当加载 html 页面时，WebView会在/data/data/包名目录下生成 database 与 cache 两个文件夹 请求的 URL记录保存在 WebViewCache.db，而 URL的内容是保存在 WebViewCache 文件夹下 是否启用缓存 12345678910//优先使用缓存: WebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //缓存模式如下： //LOAD_CACHE_ONLY: 不使用网络，只读取本地缓存数据 //LOAD_DEFAULT: （默认）根据cache-control决定是否从网络上取数据。 //LOAD_NO_CACHE: 不使用缓存，只从网络获取数据. //LOAD_CACHE_ELSE_NETWORK，只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。//不使用缓存: WebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE); 结合使用（离线加载) 1234567891011121314if (NetStatusUtil.isConnected(getApplicationContext())) &#123; webSettings.setCacheMode(WebSettings.LOAD_DEFAULT); //根据cache-control决定是否从网络上取数据。&#125; else &#123; webSettings.setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK); //没网，则从本地获取，即离线加载&#125;webSettings.setDomStorageEnabled(true); // 开启 DOM storage API 功能webSettings.setDatabaseEnabled(true); //开启 database storage API 功能webSettings.setAppCacheEnabled(true);//开启 Application Caches 功能String cacheDirPath = getFilesDir().getAbsolutePath() + APP_CACAHE_DIRNAME;webSettings.setAppCachePath(cacheDirPath); //设置 Application Caches 缓存目录 注意： 每个 Application 只调用一次 WebSettings.setAppCachePath()，WebSettings.setAppCacheMaxSize() 3.2.2 WebViewClient类 作用：处理各种通知 &amp; 请求事件 常见方法： 常见方法1：shouldOverrideUrlLoading() 作用：打开网页时不调用系统浏览器， 而是在本WebView中显示；在网页上的所有加载都经过这个方法,这个函数我们可以做很多操作。123456789101112131415161718192021//步骤1. 定义Webview组件Webview webview = (WebView) findViewById(R.id.webView1);//步骤2. 选择加载方式 //方式1. 加载一个网页： webView.loadUrl(\"http://www.google.com/\"); //方式2：加载apk包中的html页面 webView.loadUrl(\"file:///android_asset/test.html\"); //方式3：加载手机本地的html页面 webView.loadUrl(\"content://com.android.htmlfileprovider/sdcard/test.html\");//步骤3. 复写shouldOverrideUrlLoading()方法，使得打开网页时不调用系统浏览器， 而是在本WebView中显示 webView.setWebViewClient(new WebViewClient()&#123; @Override public boolean shouldOverrideUrlLoading(WebView view, String url) &#123; view.loadUrl(url); return true; &#125; &#125;); 常见方法2：onPageStarted() 作用：开始载入页面调用的，我们可以设定一个loading的页面，告诉用户程序在等待网络响应。123456webView.setWebViewClient(new WebViewClient()&#123; @Override public void onPageStarted(WebView view, String url, Bitmap favicon) &#123; //设定加载开始的操作 &#125; &#125;); 常见方法3：onPageFinished() 作用：在页面加载结束时调用。我们可以关闭loading 条，切换程序动作。123456789 /** * 在页面加载结束时调用。 */@Overridepublic void onPageFinished(WebView view, String url) &#123; //设定加载结束的操作 mProgressBar.setVisibility(View.GONE);&#125; 常见方法4：onLoadResource() 作用：在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。123456 webView.setWebViewClient(new WebViewClient()&#123; @Override public boolean onLoadResource(WebView view, String url) &#123; //设定加载资源的操作 &#125;&#125;); 常见方法5：onReceivedError（） 作用：加载页面的服务器出现错误时（如404）调用。 App里面使用webview控件的时候遇到了诸如404这类的错误的时候，若也显示浏览器里面的那种错误提示页面就显得很丑陋了，那么这个时候我们的app就需要加载一个本地的错误提示页面，即webview如何加载一个本地的页面 12345678910111213141516//步骤1：写一个html文件（error_handle.html），用于出错时展示给用户看的提示页面//步骤2：将该html文件放置到代码根目录的assets文件夹下//步骤3：复写WebViewClient的onRecievedError方法//该方法传回了错误码，根据错误类型可以进行不同的错误分类处理 webView.setWebViewClient(new WebViewClient()&#123; @Override public void onReceivedError(WebView view, int errorCode, String description, String failingUrl)&#123;switch(errorCode) &#123; case HttpStatus.SC_NOT_FOUND: view.loadUrl(\"file:///android_assets/error_handle.html\"); break; &#125; &#125; &#125;); 常见方法6：onReceivedSslError() 作用：处理https请求webView默认是不处理https请求的，页面显示空白，需要进行如下设置：12345678webView.setWebViewClient(new WebViewClient() &#123; @Override public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) &#123; handler.proceed(); //表示等待证书响应 // handler.cancel(); //表示挂起连接，为默认方式 // handler.handleMessage(null); //可做其他处理 &#125; &#125;); 3.2.3 WebChromeClient类 作用：辅助 WebView 处理 Javascript 的对话框,网站图标,网站标题等等。常见使用： 常见方法1： onProgressChanged（） 作用：获得网页的加载进度并显示 12345678910webview.setWebChromeClient(new WebChromeClient()&#123; @Override public void onProgressChanged(WebView view, int newProgress) &#123; if (newProgress &lt; 100) &#123; String progress = newProgress + \"%\"; progress.setText(progress); &#125; else &#123; &#125; &#125;&#125;); 常见方法2： onReceivedTitle（） 作用：获取Web页中的标题 1234567webview.setWebChromeClient(new WebChromeClient()&#123; @Override public void onReceivedTitle(WebView view, String title) &#123; titleview.setText(title)； &#125;&#125;); 3.3 WebView与JS的交互参考 3.4 注意事项：如何避免WebView内存泄露？ 3.4.1 不在xml中定义 Webview ，而是在需要的时候在Activity中创建，并且Context使用 getApplicationgContext() 1234LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);mWebView = new WebView(getApplicationContext());mWebView.setLayoutParams(params);mLayout.addView(mWebView); 3.4.2 在 Activity 销毁（ WebView ）的时候，先让 WebView 加载null内容，然后移除 WebView，再销毁 WebView，最后置空。 123456789101112@Overrideprotected void onDestroy() &#123; if (mWebView != null) &#123; mWebView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null); mWebView.clearHistory(); ((ViewGroup) mWebView.getParent()).removeView(mWebView); mWebView.destroy(); mWebView = null; &#125; super.onDestroy();&#125; 参考","categories":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}],"tags":[{"name":"WebView","slug":"WebView","permalink":"http://www.kylinhuang.cn/tags/WebView/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://www.kylinhuang.cn/categories/android/"}]},{"title":"3 koa 搭建项目","slug":"后端/koa创建项目","date":"2017-11-03T10:04:49.000Z","updated":"2017-11-10T01:38:29.000Z","comments":true,"path":"2017/11/03/后端/koa创建项目/","link":"","permalink":"http://www.kylinhuang.cn/2017/11/03/后端/koa创建项目/","excerpt":"","text":"创建项目12345678mkidr servernpm init# 安装相关 npm init# 初始化项目npm i koa koa-logger koa-session koa-bodyparser koa-router mongoose sha1 lodash uuid xss bluebird speakeasy --save 123456koa-logger #日志中间件koa-session cookie #会话中间件koa-bodyParser #解析表单数据中间件koa-router #路由中间件mongoose #mongodb 中间件sha1 #加密算法 创建 index.js1234567891011121314151617181920212223var koa = require('koa');var logger = require('koa-logger');var session = require('koa-session');var bodyParser = require('koa-bodyparser');var app = koa();app.keys = ['server']; // cookie session 加密keyapp.use(logger());app.use(session(app));app.use(bodyParser());app.use(function *(next)&#123; console.log(this.href); console.log(this.method); this.body = &#123; success : true &#125; yield next;&#125;);app.listen('1234');console.log('http://localhost:1234/') 命令行 123node index.js在浏览器中访问 http://localhost:1234/ codehttps://github.com/kylinhuang/APIServer提交 #koa #创建项目 router 添加 index.js123456789101112131415161718192021222324252627282930var koa = require('koa');var logger = require('koa-logger');var session = require('koa-session');var bodyParser = require('koa-bodyparser');var app = koa();app.keys = ['server']; // cookie session 加密keyapp.use(logger());app.use(session(app));app.use(bodyParser());var router = require('./config/routes')();app.use(router.routes()) .use(router.allowedMethods());// app.use(function *(next)&#123;// console.log(this.href);// console.log(this.method);// this.body = &#123;// success : true// &#125;// yield next;// &#125;);app.listen('1234');console.log('http://localhost:1234/') routes.js 123456789101112131415161718var Router = require('koa-router');var User = require('../app/controllers/user');var App = require('../app/controllers/app');module.exports = function () &#123; var router = new Router(&#123; prefix:'/api/1' &#125;); // router.post('/api/i/u/signup' ,User.signup); router.post('/u/signup' ,User.signup); router.post('/u/verify' ,User.verify); router.post('/u/update' ,User.update); router.post('/signature' ,App.signature); return router ;&#125;; user.js12345678910111213141516exports.signup = function *(next) &#123; this.body = &#123; success : true &#125;&#125;exports.verify = function *(next) &#123; this.body = &#123; success : true &#125;&#125;exports.update = function *(next) &#123; this.body = &#123; success : true &#125;&#125;","categories":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}],"tags":[{"name":"koa","slug":"koa","permalink":"http://www.kylinhuang.cn/tags/koa/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}]},{"title":"1.2 mongoDB  install","slug":"后端/1.2 mongoDB  install","date":"2017-11-03T09:45:18.000Z","updated":"2017-12-20T13:24:01.012Z","comments":true,"path":"2017/11/03/后端/1.2 mongoDB  install/","link":"","permalink":"http://www.kylinhuang.cn/2017/11/03/后端/1.2 mongoDB  install/","excerpt":"","text":"mac 平台1 Homebrew installHomebrew打开网页 copy1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 粘贴到命令行安装完成 2 mongoDB installmongodbmongodb下载 12345678检验安装是否安装 mongo开启 数据库 mongod mongod -dbpath 路径mongod -dbpath /Users/kylinhuang/learn/db-dbpath 数据库文档位置 3 mongodb 常用命名1234567891011121314151617181920212223# 使用数据库mongo# 列出所有的数据库show dbs# 使用某个数据库/新建数据库use 数据库名# 查看 当前所在数据库db# 插入数据db.student.insert(&#123;\"name\":\"kylinhuang\",\"age\":25&#125;);# 查看 当前数据库所有集合show collections# 查询 student 中所有数据db.student.find();# 删除 数据库db.dropDatabase(); 3.1 插入数据 - 增1db.student.insert(&#123;\"name\":\"xiaoming\"&#125;); 3.2 删除数据 - 删1db.restaurants.remove( &#123; \"borough\": \"Manhattan\" &#125; ) By default, the remove() method removes all documents that match the remove condition. Use the justOne option to limit the remove operation to only one of the matching documents. 1db.restaurants.remove( &#123; \"borough\": \"Queens\" &#125;, &#123; justOne: true &#125; ) 3.3 修改数据 - 改修改里面还有查询条件。你要该谁，要告诉mongo。查找名字叫做小明的，把年龄更改为16岁： 1db.student.update(&#123;\"name\":\"小明\"&#125;,&#123;$set:&#123;\"age\":16&#125;&#125;); 查找数学成绩是70，把年龄更改为33岁：1db.student.update(&#123;\"score.shuxue\":70&#125;,&#123;$set:&#123;\"age\":33&#125;&#125;); 更改所有匹配项目：By default, the update() method updates a single document. To update multiple documents, use the multi option in the update() method. 1db.student.update(&#123;\"sex\":\"男\"&#125;,&#123;$set:&#123;\"age\":33&#125;&#125;,&#123;multi: true&#125;); 完整替换，不出现$set关键字了： 1db.student.update(&#123;\"name\":\"小明\"&#125;,&#123;\"name\":\"大明\",\"age\":16&#125;); 3.4 查找数据 - 查查找数据，用find。find中没有参数，那么将列出这个集合的所有文档：1db.restaurants.find() 精确匹配：1db.student.find(&#123;\"score.shuxue\":70&#125;); 多个条件：1db.student.find(&#123;\"score.shuxue\":70 , \"age\":12&#125;) 大于条件：1db.student.find(&#123;\"score.yuwen\":&#123;$gt:50&#125;&#125;); 寻找所有年龄是9岁，或者11岁的学生1db.student.find(&#123;$or:[&#123;\"age\":9&#125;,&#123;\"age\":11&#125;]&#125;); 查找完毕之后，打点调用sort，表示升降排序1db.restaurants.find().sort( &#123; \"borough\": 1, \"address.zipcode\": 1 &#125; ) 4 导入数据1mongoimport --db test --collection restaurants --drop --file primer-dataset.json –db test 想往哪个数据库里面导入–collection restaurants 想往哪个集合中导入–drop 把集合清空–file primer-dataset.json 哪个文件这样，我们就能用sublime创建一个json文件，然后用mongoimport命令导入，这样学习数据库非常方便。 Robomongo 和 Mongochef Robomongo 是一个基于 Shell 的跨平台开源 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac，嵌入了 JavaScript 引擎和 MongoDB mongo，只要你会使用 mongo shell，你就会使用 Robomongo，它还提了供语法高亮、自动补全、差别视图等。 下载地址https://robomongo.org/download MongoChefMongoChef 是另一款强大的 MongoDB 可视化管理工具，支持 Windows、Linux 和 Mac。 MongoChef 下载地址，我们选择左侧的非商业用途的免费版下载。https://studio3t.com/#mongochef-download-compare","categories":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}],"tags":[{"name":"mongoDB","slug":"mongoDB","permalink":"http://www.kylinhuang.cn/tags/mongoDB/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}]},{"title":"1.1 nodejs 安装","slug":"后端/1.1 nodejs 安装","date":"2017-10-11T11:26:52.000Z","updated":"2017-12-20T13:18:50.067Z","comments":true,"path":"2017/10/11/后端/1.1 nodejs 安装/","link":"","permalink":"http://www.kylinhuang.cn/2017/10/11/后端/1.1 nodejs 安装/","excerpt":"","text":"1 windows下载地址next next 安装 2 Mac先安装一个 nvm（https://github.com/creationix/nvm） 1curl -o- https://raw.githubusercontent.com/creationix/vm/v0.25.2/install.sh | bash 检查nvm1nvm 安装 Node.js12nvm install 0.12nvm install node 安装完成后，查看一下 1node -v 3 centosRun as root on RHEL, CentOS or Fedora, for Node.js v4 LTS Argon:1curl --silent --location https://rpm.nodesource.com/setup_4.x | bash - Alternatively for Node.js v6:1curl --silent --location https://rpm.nodesource.com/setup_6.x | bash - Alternatively for Node.js 0.10:1curl --silent --location https://rpm.nodesource.com/setup | bash - Then install, as root:1yum -y install nodejs 就这样，不能再简单。","categories":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://www.kylinhuang.cn/tags/nodejs/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://www.kylinhuang.cn/categories/后端/"}]}]}